
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ApiCostEntryScalarFieldEnum = {
  id: 'id',
  apiType: 'apiType',
  cost: 'cost',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  address: 'address',
  owner_name: 'owner_name',
  phone: 'phone',
  email: 'email',
  source_type: 'source_type',
  source: 'source',
  motivation_score: 'motivation_score',
  estimated_value: 'estimated_value',
  equity: 'equity',
  condition_score: 'condition_score',
  tax_debt: 'tax_debt',
  violations: 'violations',
  is_probate: 'is_probate',
  is_vacant: 'is_vacant',
  days_on_market: 'days_on_market',
  lead_score: 'lead_score',
  aiScore: 'aiScore',
  feedback_good: 'feedback_good',
  feedback_bad: 'feedback_bad',
  phones: 'phones',
  emails: 'emails',
  raw_data: 'raw_data',
  temperature_tag: 'temperature_tag',
  status: 'status',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  skip_traced_at: 'skip_traced_at',
  dnc_flag: 'dnc_flag',
  timezone: 'timezone',
  quiet_hours_start: 'quiet_hours_start',
  quiet_hours_end: 'quiet_hours_end',
  activity_log_json: 'activity_log_json',
  skip_trace_provider: 'skip_trace_provider',
  skip_trace_cost_cents: 'skip_trace_cost_cents',
  ai_cost_cents: 'ai_cost_cents',
  ai_scored_at: 'ai_scored_at'
};

exports.Prisma.ProbateCaseScalarFieldEnum = {
  id: 'id',
  case_number: 'case_number',
  deceased_name: 'deceased_name',
  filing_date: 'filing_date',
  case_status: 'case_status',
  county: 'county',
  estimated_estate_value: 'estimated_estate_value',
  properties_json: 'properties_json',
  heirs_json: 'heirs_json',
  urgency_score: 'urgency_score',
  deal_potential_score: 'deal_potential_score',
  next_hearing_date: 'next_hearing_date',
  attorney_name: 'attorney_name',
  attorney_phone: 'attorney_phone',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PropertyViolationScalarFieldEnum = {
  id: 'id',
  property_address: 'property_address',
  violation_type: 'violation_type',
  severity_score: 'severity_score',
  repeat_offender: 'repeat_offender',
  financial_burden: 'financial_burden',
  compliance_deadline: 'compliance_deadline',
  enforcement_stage: 'enforcement_stage',
  deal_potential: 'deal_potential',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  target_count: 'target_count',
  sent_count: 'sent_count',
  response_rate: 'response_rate',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  lead_id: 'lead_id',
  method: 'method',
  status: 'status',
  notes: 'notes',
  scheduled_at: 'scheduled_at',
  completed_at: 'completed_at',
  created_at: 'created_at'
};

exports.Prisma.DealAnalysisScalarFieldEnum = {
  id: 'id',
  lead_id: 'lead_id',
  analysis_json: 'analysis_json',
  arv: 'arv',
  budget: 'budget',
  total_investment: 'total_investment',
  net_profit: 'net_profit',
  roi_pct: 'roi_pct',
  risk_score: 'risk_score',
  recommendation: 'recommendation',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ScrapingJobScalarFieldEnum = {
  id: 'id',
  source: 'source',
  status: 'status',
  config: 'config',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  logs: 'logs',
  resultsCount: 'resultsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyRecordScalarFieldEnum = {
  id: 'id',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  source: 'source',
  rawData: 'rawData',
  processed: 'processed',
  scrapingJobId: 'scrapingJobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScrapingScheduleScalarFieldEnum = {
  id: 'id',
  enabled: 'enabled',
  frequency: 'frequency',
  time: 'time',
  day: 'day',
  sources: 'sources',
  zipCodes: 'zipCodes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScraperJobScalarFieldEnum = {
  id: 'id',
  source: 'source',
  inputPayload: 'inputPayload',
  resultPayload: 'resultPayload',
  status: 'status',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  attempt: 'attempt',
  previousErrors: 'previousErrors'
};

exports.Prisma.ScrapedPropertyScalarFieldEnum = {
  id: 'id',
  source: 'source',
  zip: 'zip',
  address: 'address',
  price: 'price',
  beds: 'beds',
  sqft: 'sqft',
  propertyType: 'propertyType',
  link: 'link',
  imageUrl: 'imageUrl',
  data: 'data',
  enrichmentTags: 'enrichmentTags',
  investmentScore: 'investmentScore',
  condition: 'condition',
  reasons: 'reasons',
  tagReasons: 'tagReasons',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookSubscriptionScalarFieldEnum = {
  id: 'id',
  targetUrl: 'targetUrl',
  eventTypes: 'eventTypes',
  isActive: 'isActive',
  signingSecret: 'signingSecret',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookDeliveryFailureScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  eventType: 'eventType',
  payload: 'payload',
  attempts: 'attempts',
  finalError: 'finalError',
  lastError: 'lastError',
  createdAt: 'createdAt',
  lastAttemptAt: 'lastAttemptAt',
  isResolved: 'isResolved',
  replayedAt: 'replayedAt',
  replayJobId: 'replayJobId'
};

exports.Prisma.WebhookDeliveryLogScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  eventType: 'eventType',
  status: 'status',
  attemptsMade: 'attemptsMade',
  jobId: 'jobId',
  lastAttemptAt: 'lastAttemptAt',
  isResolved: 'isResolved',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchmakingJobScalarFieldEnum = {
  id: 'id',
  filterJSON: 'filterJSON',
  status: 'status',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  matchedCount: 'matchedCount'
};

exports.Prisma.CrmActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  propertyId: 'propertyId',
  leadId: 'leadId',
  userId: 'userId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CallTranscriptScalarFieldEnum = {
  id: 'id',
  callSid: 'callSid',
  leadId: 'leadId',
  userId: 'userId',
  audioUrl: 'audioUrl',
  transcript: 'transcript',
  recordingUrl: 'recordingUrl',
  transcriptUrl: 'transcriptUrl',
  dtmfCaptured: 'dtmfCaptured',
  createdAt: 'createdAt'
};

exports.Prisma.CallAnalysisScalarFieldEnum = {
  id: 'id',
  callSid: 'callSid',
  transcriptId: 'transcriptId',
  summary: 'summary',
  score: 'score',
  tags: 'tags',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ScraperSource = exports.$Enums.ScraperSource = {
  zillow: 'zillow',
  auction: 'auction'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  queued: 'queued',
  running: 'running',
  completed: 'completed',
  failed: 'failed'
};

exports.PropertyCondition = exports.$Enums.PropertyCondition = {
  Excellent: 'Excellent',
  Fair: 'Fair',
  NeedsWork: 'NeedsWork'
};

exports.Prisma.ModelName = {
  ApiCostEntry: 'ApiCostEntry',
  Lead: 'Lead',
  ProbateCase: 'ProbateCase',
  PropertyViolation: 'PropertyViolation',
  Campaign: 'Campaign',
  Contact: 'Contact',
  DealAnalysis: 'DealAnalysis',
  ScrapingJob: 'ScrapingJob',
  PropertyRecord: 'PropertyRecord',
  ScrapingSchedule: 'ScrapingSchedule',
  ScraperJob: 'ScraperJob',
  ScrapedProperty: 'ScrapedProperty',
  WebhookSubscription: 'WebhookSubscription',
  WebhookDeliveryFailure: 'WebhookDeliveryFailure',
  WebhookDeliveryLog: 'WebhookDeliveryLog',
  MatchmakingJob: 'MatchmakingJob',
  CrmActivity: 'CrmActivity',
  CallTranscript: 'CallTranscript',
  CallAnalysis: 'CallAnalysis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
