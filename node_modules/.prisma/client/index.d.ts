
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ApiCostEntry
 * 
 */
export type ApiCostEntry = $Result.DefaultSelection<Prisma.$ApiCostEntryPayload>
/**
 * Model Lead
 * 
 */
export type Lead = $Result.DefaultSelection<Prisma.$LeadPayload>
/**
 * Model ProbateCase
 * 
 */
export type ProbateCase = $Result.DefaultSelection<Prisma.$ProbateCasePayload>
/**
 * Model PropertyViolation
 * 
 */
export type PropertyViolation = $Result.DefaultSelection<Prisma.$PropertyViolationPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model DealAnalysis
 * 
 */
export type DealAnalysis = $Result.DefaultSelection<Prisma.$DealAnalysisPayload>
/**
 * Model ScrapingJob
 * 
 */
export type ScrapingJob = $Result.DefaultSelection<Prisma.$ScrapingJobPayload>
/**
 * Model PropertyRecord
 * 
 */
export type PropertyRecord = $Result.DefaultSelection<Prisma.$PropertyRecordPayload>
/**
 * Model ScrapingSchedule
 * 
 */
export type ScrapingSchedule = $Result.DefaultSelection<Prisma.$ScrapingSchedulePayload>
/**
 * Model ScraperJob
 * 
 */
export type ScraperJob = $Result.DefaultSelection<Prisma.$ScraperJobPayload>
/**
 * Model ScrapedProperty
 * 
 */
export type ScrapedProperty = $Result.DefaultSelection<Prisma.$ScrapedPropertyPayload>
/**
 * Model WebhookSubscription
 * 
 */
export type WebhookSubscription = $Result.DefaultSelection<Prisma.$WebhookSubscriptionPayload>
/**
 * Model WebhookDeliveryFailure
 * 
 */
export type WebhookDeliveryFailure = $Result.DefaultSelection<Prisma.$WebhookDeliveryFailurePayload>
/**
 * Model WebhookDeliveryLog
 * 
 */
export type WebhookDeliveryLog = $Result.DefaultSelection<Prisma.$WebhookDeliveryLogPayload>
/**
 * Model MatchmakingJob
 * 
 */
export type MatchmakingJob = $Result.DefaultSelection<Prisma.$MatchmakingJobPayload>
/**
 * Model CrmActivity
 * 
 */
export type CrmActivity = $Result.DefaultSelection<Prisma.$CrmActivityPayload>
/**
 * Model CallTranscript
 * 
 */
export type CallTranscript = $Result.DefaultSelection<Prisma.$CallTranscriptPayload>
/**
 * Model CallAnalysis
 * 
 */
export type CallAnalysis = $Result.DefaultSelection<Prisma.$CallAnalysisPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ScraperSource: {
  zillow: 'zillow',
  auction: 'auction'
};

export type ScraperSource = (typeof ScraperSource)[keyof typeof ScraperSource]


export const JobStatus: {
  queued: 'queued',
  running: 'running',
  completed: 'completed',
  failed: 'failed'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const PropertyCondition: {
  Excellent: 'Excellent',
  Fair: 'Fair',
  NeedsWork: 'NeedsWork'
};

export type PropertyCondition = (typeof PropertyCondition)[keyof typeof PropertyCondition]

}

export type ScraperSource = $Enums.ScraperSource

export const ScraperSource: typeof $Enums.ScraperSource

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type PropertyCondition = $Enums.PropertyCondition

export const PropertyCondition: typeof $Enums.PropertyCondition

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ApiCostEntries
 * const apiCostEntries = await prisma.apiCostEntry.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ApiCostEntries
   * const apiCostEntries = await prisma.apiCostEntry.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.apiCostEntry`: Exposes CRUD operations for the **ApiCostEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiCostEntries
    * const apiCostEntries = await prisma.apiCostEntry.findMany()
    * ```
    */
  get apiCostEntry(): Prisma.ApiCostEntryDelegate<ExtArgs>;

  /**
   * `prisma.lead`: Exposes CRUD operations for the **Lead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.lead.findMany()
    * ```
    */
  get lead(): Prisma.LeadDelegate<ExtArgs>;

  /**
   * `prisma.probateCase`: Exposes CRUD operations for the **ProbateCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProbateCases
    * const probateCases = await prisma.probateCase.findMany()
    * ```
    */
  get probateCase(): Prisma.ProbateCaseDelegate<ExtArgs>;

  /**
   * `prisma.propertyViolation`: Exposes CRUD operations for the **PropertyViolation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropertyViolations
    * const propertyViolations = await prisma.propertyViolation.findMany()
    * ```
    */
  get propertyViolation(): Prisma.PropertyViolationDelegate<ExtArgs>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs>;

  /**
   * `prisma.dealAnalysis`: Exposes CRUD operations for the **DealAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DealAnalyses
    * const dealAnalyses = await prisma.dealAnalysis.findMany()
    * ```
    */
  get dealAnalysis(): Prisma.DealAnalysisDelegate<ExtArgs>;

  /**
   * `prisma.scrapingJob`: Exposes CRUD operations for the **ScrapingJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapingJobs
    * const scrapingJobs = await prisma.scrapingJob.findMany()
    * ```
    */
  get scrapingJob(): Prisma.ScrapingJobDelegate<ExtArgs>;

  /**
   * `prisma.propertyRecord`: Exposes CRUD operations for the **PropertyRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropertyRecords
    * const propertyRecords = await prisma.propertyRecord.findMany()
    * ```
    */
  get propertyRecord(): Prisma.PropertyRecordDelegate<ExtArgs>;

  /**
   * `prisma.scrapingSchedule`: Exposes CRUD operations for the **ScrapingSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapingSchedules
    * const scrapingSchedules = await prisma.scrapingSchedule.findMany()
    * ```
    */
  get scrapingSchedule(): Prisma.ScrapingScheduleDelegate<ExtArgs>;

  /**
   * `prisma.scraperJob`: Exposes CRUD operations for the **ScraperJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScraperJobs
    * const scraperJobs = await prisma.scraperJob.findMany()
    * ```
    */
  get scraperJob(): Prisma.ScraperJobDelegate<ExtArgs>;

  /**
   * `prisma.scrapedProperty`: Exposes CRUD operations for the **ScrapedProperty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapedProperties
    * const scrapedProperties = await prisma.scrapedProperty.findMany()
    * ```
    */
  get scrapedProperty(): Prisma.ScrapedPropertyDelegate<ExtArgs>;

  /**
   * `prisma.webhookSubscription`: Exposes CRUD operations for the **WebhookSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookSubscriptions
    * const webhookSubscriptions = await prisma.webhookSubscription.findMany()
    * ```
    */
  get webhookSubscription(): Prisma.WebhookSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.webhookDeliveryFailure`: Exposes CRUD operations for the **WebhookDeliveryFailure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookDeliveryFailures
    * const webhookDeliveryFailures = await prisma.webhookDeliveryFailure.findMany()
    * ```
    */
  get webhookDeliveryFailure(): Prisma.WebhookDeliveryFailureDelegate<ExtArgs>;

  /**
   * `prisma.webhookDeliveryLog`: Exposes CRUD operations for the **WebhookDeliveryLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebhookDeliveryLogs
    * const webhookDeliveryLogs = await prisma.webhookDeliveryLog.findMany()
    * ```
    */
  get webhookDeliveryLog(): Prisma.WebhookDeliveryLogDelegate<ExtArgs>;

  /**
   * `prisma.matchmakingJob`: Exposes CRUD operations for the **MatchmakingJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchmakingJobs
    * const matchmakingJobs = await prisma.matchmakingJob.findMany()
    * ```
    */
  get matchmakingJob(): Prisma.MatchmakingJobDelegate<ExtArgs>;

  /**
   * `prisma.crmActivity`: Exposes CRUD operations for the **CrmActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CrmActivities
    * const crmActivities = await prisma.crmActivity.findMany()
    * ```
    */
  get crmActivity(): Prisma.CrmActivityDelegate<ExtArgs>;

  /**
   * `prisma.callTranscript`: Exposes CRUD operations for the **CallTranscript** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CallTranscripts
    * const callTranscripts = await prisma.callTranscript.findMany()
    * ```
    */
  get callTranscript(): Prisma.CallTranscriptDelegate<ExtArgs>;

  /**
   * `prisma.callAnalysis`: Exposes CRUD operations for the **CallAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CallAnalyses
    * const callAnalyses = await prisma.callAnalysis.findMany()
    * ```
    */
  get callAnalysis(): Prisma.CallAnalysisDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ApiCostEntry: 'ApiCostEntry',
    Lead: 'Lead',
    ProbateCase: 'ProbateCase',
    PropertyViolation: 'PropertyViolation',
    Campaign: 'Campaign',
    Contact: 'Contact',
    DealAnalysis: 'DealAnalysis',
    ScrapingJob: 'ScrapingJob',
    PropertyRecord: 'PropertyRecord',
    ScrapingSchedule: 'ScrapingSchedule',
    ScraperJob: 'ScraperJob',
    ScrapedProperty: 'ScrapedProperty',
    WebhookSubscription: 'WebhookSubscription',
    WebhookDeliveryFailure: 'WebhookDeliveryFailure',
    WebhookDeliveryLog: 'WebhookDeliveryLog',
    MatchmakingJob: 'MatchmakingJob',
    CrmActivity: 'CrmActivity',
    CallTranscript: 'CallTranscript',
    CallAnalysis: 'CallAnalysis'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "apiCostEntry" | "lead" | "probateCase" | "propertyViolation" | "campaign" | "contact" | "dealAnalysis" | "scrapingJob" | "propertyRecord" | "scrapingSchedule" | "scraperJob" | "scrapedProperty" | "webhookSubscription" | "webhookDeliveryFailure" | "webhookDeliveryLog" | "matchmakingJob" | "crmActivity" | "callTranscript" | "callAnalysis"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ApiCostEntry: {
        payload: Prisma.$ApiCostEntryPayload<ExtArgs>
        fields: Prisma.ApiCostEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiCostEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiCostEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          findFirst: {
            args: Prisma.ApiCostEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiCostEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          findMany: {
            args: Prisma.ApiCostEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>[]
          }
          create: {
            args: Prisma.ApiCostEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          createMany: {
            args: Prisma.ApiCostEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiCostEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>[]
          }
          delete: {
            args: Prisma.ApiCostEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          update: {
            args: Prisma.ApiCostEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          deleteMany: {
            args: Prisma.ApiCostEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiCostEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApiCostEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiCostEntryPayload>
          }
          aggregate: {
            args: Prisma.ApiCostEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiCostEntry>
          }
          groupBy: {
            args: Prisma.ApiCostEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiCostEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiCostEntryCountArgs<ExtArgs>
            result: $Utils.Optional<ApiCostEntryCountAggregateOutputType> | number
          }
        }
      }
      Lead: {
        payload: Prisma.$LeadPayload<ExtArgs>
        fields: Prisma.LeadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findFirst: {
            args: Prisma.LeadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findMany: {
            args: Prisma.LeadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          create: {
            args: Prisma.LeadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          createMany: {
            args: Prisma.LeadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          delete: {
            args: Prisma.LeadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          update: {
            args: Prisma.LeadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          deleteMany: {
            args: Prisma.LeadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          aggregate: {
            args: Prisma.LeadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLead>
          }
          groupBy: {
            args: Prisma.LeadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadCountArgs<ExtArgs>
            result: $Utils.Optional<LeadCountAggregateOutputType> | number
          }
        }
      }
      ProbateCase: {
        payload: Prisma.$ProbateCasePayload<ExtArgs>
        fields: Prisma.ProbateCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProbateCaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProbateCaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          findFirst: {
            args: Prisma.ProbateCaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProbateCaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          findMany: {
            args: Prisma.ProbateCaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>[]
          }
          create: {
            args: Prisma.ProbateCaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          createMany: {
            args: Prisma.ProbateCaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProbateCaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>[]
          }
          delete: {
            args: Prisma.ProbateCaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          update: {
            args: Prisma.ProbateCaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          deleteMany: {
            args: Prisma.ProbateCaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProbateCaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProbateCaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProbateCasePayload>
          }
          aggregate: {
            args: Prisma.ProbateCaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProbateCase>
          }
          groupBy: {
            args: Prisma.ProbateCaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProbateCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProbateCaseCountArgs<ExtArgs>
            result: $Utils.Optional<ProbateCaseCountAggregateOutputType> | number
          }
        }
      }
      PropertyViolation: {
        payload: Prisma.$PropertyViolationPayload<ExtArgs>
        fields: Prisma.PropertyViolationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyViolationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyViolationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          findFirst: {
            args: Prisma.PropertyViolationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyViolationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          findMany: {
            args: Prisma.PropertyViolationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>[]
          }
          create: {
            args: Prisma.PropertyViolationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          createMany: {
            args: Prisma.PropertyViolationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyViolationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>[]
          }
          delete: {
            args: Prisma.PropertyViolationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          update: {
            args: Prisma.PropertyViolationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          deleteMany: {
            args: Prisma.PropertyViolationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyViolationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PropertyViolationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyViolationPayload>
          }
          aggregate: {
            args: Prisma.PropertyViolationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePropertyViolation>
          }
          groupBy: {
            args: Prisma.PropertyViolationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyViolationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyViolationCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyViolationCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      DealAnalysis: {
        payload: Prisma.$DealAnalysisPayload<ExtArgs>
        fields: Prisma.DealAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DealAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DealAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          findFirst: {
            args: Prisma.DealAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DealAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          findMany: {
            args: Prisma.DealAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>[]
          }
          create: {
            args: Prisma.DealAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          createMany: {
            args: Prisma.DealAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DealAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>[]
          }
          delete: {
            args: Prisma.DealAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          update: {
            args: Prisma.DealAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.DealAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DealAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DealAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealAnalysisPayload>
          }
          aggregate: {
            args: Prisma.DealAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDealAnalysis>
          }
          groupBy: {
            args: Prisma.DealAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<DealAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.DealAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<DealAnalysisCountAggregateOutputType> | number
          }
        }
      }
      ScrapingJob: {
        payload: Prisma.$ScrapingJobPayload<ExtArgs>
        fields: Prisma.ScrapingJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScrapingJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapingJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          findFirst: {
            args: Prisma.ScrapingJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScrapingJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          findMany: {
            args: Prisma.ScrapingJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>[]
          }
          create: {
            args: Prisma.ScrapingJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          createMany: {
            args: Prisma.ScrapingJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScrapingJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>[]
          }
          delete: {
            args: Prisma.ScrapingJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          update: {
            args: Prisma.ScrapingJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          deleteMany: {
            args: Prisma.ScrapingJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScrapingJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScrapingJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingJobPayload>
          }
          aggregate: {
            args: Prisma.ScrapingJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScrapingJob>
          }
          groupBy: {
            args: Prisma.ScrapingJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScrapingJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScrapingJobCountArgs<ExtArgs>
            result: $Utils.Optional<ScrapingJobCountAggregateOutputType> | number
          }
        }
      }
      PropertyRecord: {
        payload: Prisma.$PropertyRecordPayload<ExtArgs>
        fields: Prisma.PropertyRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          findFirst: {
            args: Prisma.PropertyRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          findMany: {
            args: Prisma.PropertyRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>[]
          }
          create: {
            args: Prisma.PropertyRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          createMany: {
            args: Prisma.PropertyRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>[]
          }
          delete: {
            args: Prisma.PropertyRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          update: {
            args: Prisma.PropertyRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          deleteMany: {
            args: Prisma.PropertyRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PropertyRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyRecordPayload>
          }
          aggregate: {
            args: Prisma.PropertyRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePropertyRecord>
          }
          groupBy: {
            args: Prisma.PropertyRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyRecordCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyRecordCountAggregateOutputType> | number
          }
        }
      }
      ScrapingSchedule: {
        payload: Prisma.$ScrapingSchedulePayload<ExtArgs>
        fields: Prisma.ScrapingScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScrapingScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapingScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          findFirst: {
            args: Prisma.ScrapingScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScrapingScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          findMany: {
            args: Prisma.ScrapingScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>[]
          }
          create: {
            args: Prisma.ScrapingScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          createMany: {
            args: Prisma.ScrapingScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScrapingScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>[]
          }
          delete: {
            args: Prisma.ScrapingScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          update: {
            args: Prisma.ScrapingScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScrapingScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScrapingScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScrapingScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapingSchedulePayload>
          }
          aggregate: {
            args: Prisma.ScrapingScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScrapingSchedule>
          }
          groupBy: {
            args: Prisma.ScrapingScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScrapingScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScrapingScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScrapingScheduleCountAggregateOutputType> | number
          }
        }
      }
      ScraperJob: {
        payload: Prisma.$ScraperJobPayload<ExtArgs>
        fields: Prisma.ScraperJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScraperJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScraperJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          findFirst: {
            args: Prisma.ScraperJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScraperJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          findMany: {
            args: Prisma.ScraperJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>[]
          }
          create: {
            args: Prisma.ScraperJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          createMany: {
            args: Prisma.ScraperJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScraperJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>[]
          }
          delete: {
            args: Prisma.ScraperJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          update: {
            args: Prisma.ScraperJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          deleteMany: {
            args: Prisma.ScraperJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScraperJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScraperJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperJobPayload>
          }
          aggregate: {
            args: Prisma.ScraperJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScraperJob>
          }
          groupBy: {
            args: Prisma.ScraperJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScraperJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScraperJobCountArgs<ExtArgs>
            result: $Utils.Optional<ScraperJobCountAggregateOutputType> | number
          }
        }
      }
      ScrapedProperty: {
        payload: Prisma.$ScrapedPropertyPayload<ExtArgs>
        fields: Prisma.ScrapedPropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScrapedPropertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapedPropertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          findFirst: {
            args: Prisma.ScrapedPropertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScrapedPropertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          findMany: {
            args: Prisma.ScrapedPropertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>[]
          }
          create: {
            args: Prisma.ScrapedPropertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          createMany: {
            args: Prisma.ScrapedPropertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScrapedPropertyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>[]
          }
          delete: {
            args: Prisma.ScrapedPropertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          update: {
            args: Prisma.ScrapedPropertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          deleteMany: {
            args: Prisma.ScrapedPropertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScrapedPropertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScrapedPropertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapedPropertyPayload>
          }
          aggregate: {
            args: Prisma.ScrapedPropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScrapedProperty>
          }
          groupBy: {
            args: Prisma.ScrapedPropertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScrapedPropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScrapedPropertyCountArgs<ExtArgs>
            result: $Utils.Optional<ScrapedPropertyCountAggregateOutputType> | number
          }
        }
      }
      WebhookSubscription: {
        payload: Prisma.$WebhookSubscriptionPayload<ExtArgs>
        fields: Prisma.WebhookSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.WebhookSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          findMany: {
            args: Prisma.WebhookSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>[]
          }
          create: {
            args: Prisma.WebhookSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          createMany: {
            args: Prisma.WebhookSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.WebhookSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          update: {
            args: Prisma.WebhookSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.WebhookSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.WebhookSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookSubscription>
          }
          groupBy: {
            args: Prisma.WebhookSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      WebhookDeliveryFailure: {
        payload: Prisma.$WebhookDeliveryFailurePayload<ExtArgs>
        fields: Prisma.WebhookDeliveryFailureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookDeliveryFailureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookDeliveryFailureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          findFirst: {
            args: Prisma.WebhookDeliveryFailureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookDeliveryFailureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          findMany: {
            args: Prisma.WebhookDeliveryFailureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>[]
          }
          create: {
            args: Prisma.WebhookDeliveryFailureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          createMany: {
            args: Prisma.WebhookDeliveryFailureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookDeliveryFailureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>[]
          }
          delete: {
            args: Prisma.WebhookDeliveryFailureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          update: {
            args: Prisma.WebhookDeliveryFailureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          deleteMany: {
            args: Prisma.WebhookDeliveryFailureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookDeliveryFailureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookDeliveryFailureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryFailurePayload>
          }
          aggregate: {
            args: Prisma.WebhookDeliveryFailureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookDeliveryFailure>
          }
          groupBy: {
            args: Prisma.WebhookDeliveryFailureGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookDeliveryFailureGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookDeliveryFailureCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookDeliveryFailureCountAggregateOutputType> | number
          }
        }
      }
      WebhookDeliveryLog: {
        payload: Prisma.$WebhookDeliveryLogPayload<ExtArgs>
        fields: Prisma.WebhookDeliveryLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookDeliveryLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookDeliveryLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          findFirst: {
            args: Prisma.WebhookDeliveryLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookDeliveryLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          findMany: {
            args: Prisma.WebhookDeliveryLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>[]
          }
          create: {
            args: Prisma.WebhookDeliveryLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          createMany: {
            args: Prisma.WebhookDeliveryLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookDeliveryLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>[]
          }
          delete: {
            args: Prisma.WebhookDeliveryLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          update: {
            args: Prisma.WebhookDeliveryLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          deleteMany: {
            args: Prisma.WebhookDeliveryLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookDeliveryLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookDeliveryLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookDeliveryLogPayload>
          }
          aggregate: {
            args: Prisma.WebhookDeliveryLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhookDeliveryLog>
          }
          groupBy: {
            args: Prisma.WebhookDeliveryLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookDeliveryLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookDeliveryLogCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookDeliveryLogCountAggregateOutputType> | number
          }
        }
      }
      MatchmakingJob: {
        payload: Prisma.$MatchmakingJobPayload<ExtArgs>
        fields: Prisma.MatchmakingJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchmakingJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchmakingJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          findFirst: {
            args: Prisma.MatchmakingJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchmakingJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          findMany: {
            args: Prisma.MatchmakingJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>[]
          }
          create: {
            args: Prisma.MatchmakingJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          createMany: {
            args: Prisma.MatchmakingJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchmakingJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>[]
          }
          delete: {
            args: Prisma.MatchmakingJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          update: {
            args: Prisma.MatchmakingJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          deleteMany: {
            args: Prisma.MatchmakingJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchmakingJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchmakingJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchmakingJobPayload>
          }
          aggregate: {
            args: Prisma.MatchmakingJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchmakingJob>
          }
          groupBy: {
            args: Prisma.MatchmakingJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchmakingJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchmakingJobCountArgs<ExtArgs>
            result: $Utils.Optional<MatchmakingJobCountAggregateOutputType> | number
          }
        }
      }
      CrmActivity: {
        payload: Prisma.$CrmActivityPayload<ExtArgs>
        fields: Prisma.CrmActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CrmActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CrmActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          findFirst: {
            args: Prisma.CrmActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CrmActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          findMany: {
            args: Prisma.CrmActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>[]
          }
          create: {
            args: Prisma.CrmActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          createMany: {
            args: Prisma.CrmActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CrmActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>[]
          }
          delete: {
            args: Prisma.CrmActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          update: {
            args: Prisma.CrmActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          deleteMany: {
            args: Prisma.CrmActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CrmActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CrmActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrmActivityPayload>
          }
          aggregate: {
            args: Prisma.CrmActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCrmActivity>
          }
          groupBy: {
            args: Prisma.CrmActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CrmActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CrmActivityCountArgs<ExtArgs>
            result: $Utils.Optional<CrmActivityCountAggregateOutputType> | number
          }
        }
      }
      CallTranscript: {
        payload: Prisma.$CallTranscriptPayload<ExtArgs>
        fields: Prisma.CallTranscriptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CallTranscriptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CallTranscriptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          findFirst: {
            args: Prisma.CallTranscriptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CallTranscriptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          findMany: {
            args: Prisma.CallTranscriptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>[]
          }
          create: {
            args: Prisma.CallTranscriptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          createMany: {
            args: Prisma.CallTranscriptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CallTranscriptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>[]
          }
          delete: {
            args: Prisma.CallTranscriptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          update: {
            args: Prisma.CallTranscriptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          deleteMany: {
            args: Prisma.CallTranscriptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CallTranscriptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CallTranscriptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallTranscriptPayload>
          }
          aggregate: {
            args: Prisma.CallTranscriptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCallTranscript>
          }
          groupBy: {
            args: Prisma.CallTranscriptGroupByArgs<ExtArgs>
            result: $Utils.Optional<CallTranscriptGroupByOutputType>[]
          }
          count: {
            args: Prisma.CallTranscriptCountArgs<ExtArgs>
            result: $Utils.Optional<CallTranscriptCountAggregateOutputType> | number
          }
        }
      }
      CallAnalysis: {
        payload: Prisma.$CallAnalysisPayload<ExtArgs>
        fields: Prisma.CallAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CallAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CallAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          findFirst: {
            args: Prisma.CallAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CallAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          findMany: {
            args: Prisma.CallAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>[]
          }
          create: {
            args: Prisma.CallAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          createMany: {
            args: Prisma.CallAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CallAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>[]
          }
          delete: {
            args: Prisma.CallAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          update: {
            args: Prisma.CallAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.CallAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CallAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CallAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallAnalysisPayload>
          }
          aggregate: {
            args: Prisma.CallAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCallAnalysis>
          }
          groupBy: {
            args: Prisma.CallAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<CallAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.CallAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<CallAnalysisCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ScrapingJobCountOutputType
   */

  export type ScrapingJobCountOutputType = {
    propertyRecords: number
  }

  export type ScrapingJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propertyRecords?: boolean | ScrapingJobCountOutputTypeCountPropertyRecordsArgs
  }

  // Custom InputTypes
  /**
   * ScrapingJobCountOutputType without action
   */
  export type ScrapingJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJobCountOutputType
     */
    select?: ScrapingJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScrapingJobCountOutputType without action
   */
  export type ScrapingJobCountOutputTypeCountPropertyRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyRecordWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ApiCostEntry
   */

  export type AggregateApiCostEntry = {
    _count: ApiCostEntryCountAggregateOutputType | null
    _avg: ApiCostEntryAvgAggregateOutputType | null
    _sum: ApiCostEntrySumAggregateOutputType | null
    _min: ApiCostEntryMinAggregateOutputType | null
    _max: ApiCostEntryMaxAggregateOutputType | null
  }

  export type ApiCostEntryAvgAggregateOutputType = {
    id: number | null
    cost: number | null
  }

  export type ApiCostEntrySumAggregateOutputType = {
    id: number | null
    cost: number | null
  }

  export type ApiCostEntryMinAggregateOutputType = {
    id: number | null
    apiType: string | null
    cost: number | null
    details: string | null
    createdAt: Date | null
  }

  export type ApiCostEntryMaxAggregateOutputType = {
    id: number | null
    apiType: string | null
    cost: number | null
    details: string | null
    createdAt: Date | null
  }

  export type ApiCostEntryCountAggregateOutputType = {
    id: number
    apiType: number
    cost: number
    details: number
    createdAt: number
    _all: number
  }


  export type ApiCostEntryAvgAggregateInputType = {
    id?: true
    cost?: true
  }

  export type ApiCostEntrySumAggregateInputType = {
    id?: true
    cost?: true
  }

  export type ApiCostEntryMinAggregateInputType = {
    id?: true
    apiType?: true
    cost?: true
    details?: true
    createdAt?: true
  }

  export type ApiCostEntryMaxAggregateInputType = {
    id?: true
    apiType?: true
    cost?: true
    details?: true
    createdAt?: true
  }

  export type ApiCostEntryCountAggregateInputType = {
    id?: true
    apiType?: true
    cost?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type ApiCostEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiCostEntry to aggregate.
     */
    where?: ApiCostEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiCostEntries to fetch.
     */
    orderBy?: ApiCostEntryOrderByWithRelationInput | ApiCostEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiCostEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiCostEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiCostEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiCostEntries
    **/
    _count?: true | ApiCostEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiCostEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiCostEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiCostEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiCostEntryMaxAggregateInputType
  }

  export type GetApiCostEntryAggregateType<T extends ApiCostEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateApiCostEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiCostEntry[P]>
      : GetScalarType<T[P], AggregateApiCostEntry[P]>
  }




  export type ApiCostEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiCostEntryWhereInput
    orderBy?: ApiCostEntryOrderByWithAggregationInput | ApiCostEntryOrderByWithAggregationInput[]
    by: ApiCostEntryScalarFieldEnum[] | ApiCostEntryScalarFieldEnum
    having?: ApiCostEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiCostEntryCountAggregateInputType | true
    _avg?: ApiCostEntryAvgAggregateInputType
    _sum?: ApiCostEntrySumAggregateInputType
    _min?: ApiCostEntryMinAggregateInputType
    _max?: ApiCostEntryMaxAggregateInputType
  }

  export type ApiCostEntryGroupByOutputType = {
    id: number
    apiType: string
    cost: number
    details: string | null
    createdAt: Date
    _count: ApiCostEntryCountAggregateOutputType | null
    _avg: ApiCostEntryAvgAggregateOutputType | null
    _sum: ApiCostEntrySumAggregateOutputType | null
    _min: ApiCostEntryMinAggregateOutputType | null
    _max: ApiCostEntryMaxAggregateOutputType | null
  }

  type GetApiCostEntryGroupByPayload<T extends ApiCostEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiCostEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiCostEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiCostEntryGroupByOutputType[P]>
            : GetScalarType<T[P], ApiCostEntryGroupByOutputType[P]>
        }
      >
    >


  export type ApiCostEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiType?: boolean
    cost?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["apiCostEntry"]>

  export type ApiCostEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiType?: boolean
    cost?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["apiCostEntry"]>

  export type ApiCostEntrySelectScalar = {
    id?: boolean
    apiType?: boolean
    cost?: boolean
    details?: boolean
    createdAt?: boolean
  }


  export type $ApiCostEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiCostEntry"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      apiType: string
      cost: number
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["apiCostEntry"]>
    composites: {}
  }

  type ApiCostEntryGetPayload<S extends boolean | null | undefined | ApiCostEntryDefaultArgs> = $Result.GetResult<Prisma.$ApiCostEntryPayload, S>

  type ApiCostEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApiCostEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApiCostEntryCountAggregateInputType | true
    }

  export interface ApiCostEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiCostEntry'], meta: { name: 'ApiCostEntry' } }
    /**
     * Find zero or one ApiCostEntry that matches the filter.
     * @param {ApiCostEntryFindUniqueArgs} args - Arguments to find a ApiCostEntry
     * @example
     * // Get one ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiCostEntryFindUniqueArgs>(args: SelectSubset<T, ApiCostEntryFindUniqueArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ApiCostEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApiCostEntryFindUniqueOrThrowArgs} args - Arguments to find a ApiCostEntry
     * @example
     * // Get one ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiCostEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiCostEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ApiCostEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryFindFirstArgs} args - Arguments to find a ApiCostEntry
     * @example
     * // Get one ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiCostEntryFindFirstArgs>(args?: SelectSubset<T, ApiCostEntryFindFirstArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ApiCostEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryFindFirstOrThrowArgs} args - Arguments to find a ApiCostEntry
     * @example
     * // Get one ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiCostEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiCostEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ApiCostEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiCostEntries
     * const apiCostEntries = await prisma.apiCostEntry.findMany()
     * 
     * // Get first 10 ApiCostEntries
     * const apiCostEntries = await prisma.apiCostEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiCostEntryWithIdOnly = await prisma.apiCostEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiCostEntryFindManyArgs>(args?: SelectSubset<T, ApiCostEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ApiCostEntry.
     * @param {ApiCostEntryCreateArgs} args - Arguments to create a ApiCostEntry.
     * @example
     * // Create one ApiCostEntry
     * const ApiCostEntry = await prisma.apiCostEntry.create({
     *   data: {
     *     // ... data to create a ApiCostEntry
     *   }
     * })
     * 
     */
    create<T extends ApiCostEntryCreateArgs>(args: SelectSubset<T, ApiCostEntryCreateArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ApiCostEntries.
     * @param {ApiCostEntryCreateManyArgs} args - Arguments to create many ApiCostEntries.
     * @example
     * // Create many ApiCostEntries
     * const apiCostEntry = await prisma.apiCostEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiCostEntryCreateManyArgs>(args?: SelectSubset<T, ApiCostEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiCostEntries and returns the data saved in the database.
     * @param {ApiCostEntryCreateManyAndReturnArgs} args - Arguments to create many ApiCostEntries.
     * @example
     * // Create many ApiCostEntries
     * const apiCostEntry = await prisma.apiCostEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiCostEntries and only return the `id`
     * const apiCostEntryWithIdOnly = await prisma.apiCostEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiCostEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiCostEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ApiCostEntry.
     * @param {ApiCostEntryDeleteArgs} args - Arguments to delete one ApiCostEntry.
     * @example
     * // Delete one ApiCostEntry
     * const ApiCostEntry = await prisma.apiCostEntry.delete({
     *   where: {
     *     // ... filter to delete one ApiCostEntry
     *   }
     * })
     * 
     */
    delete<T extends ApiCostEntryDeleteArgs>(args: SelectSubset<T, ApiCostEntryDeleteArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ApiCostEntry.
     * @param {ApiCostEntryUpdateArgs} args - Arguments to update one ApiCostEntry.
     * @example
     * // Update one ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiCostEntryUpdateArgs>(args: SelectSubset<T, ApiCostEntryUpdateArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ApiCostEntries.
     * @param {ApiCostEntryDeleteManyArgs} args - Arguments to filter ApiCostEntries to delete.
     * @example
     * // Delete a few ApiCostEntries
     * const { count } = await prisma.apiCostEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiCostEntryDeleteManyArgs>(args?: SelectSubset<T, ApiCostEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiCostEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiCostEntries
     * const apiCostEntry = await prisma.apiCostEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiCostEntryUpdateManyArgs>(args: SelectSubset<T, ApiCostEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiCostEntry.
     * @param {ApiCostEntryUpsertArgs} args - Arguments to update or create a ApiCostEntry.
     * @example
     * // Update or create a ApiCostEntry
     * const apiCostEntry = await prisma.apiCostEntry.upsert({
     *   create: {
     *     // ... data to create a ApiCostEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiCostEntry we want to update
     *   }
     * })
     */
    upsert<T extends ApiCostEntryUpsertArgs>(args: SelectSubset<T, ApiCostEntryUpsertArgs<ExtArgs>>): Prisma__ApiCostEntryClient<$Result.GetResult<Prisma.$ApiCostEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ApiCostEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryCountArgs} args - Arguments to filter ApiCostEntries to count.
     * @example
     * // Count the number of ApiCostEntries
     * const count = await prisma.apiCostEntry.count({
     *   where: {
     *     // ... the filter for the ApiCostEntries we want to count
     *   }
     * })
    **/
    count<T extends ApiCostEntryCountArgs>(
      args?: Subset<T, ApiCostEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiCostEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiCostEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiCostEntryAggregateArgs>(args: Subset<T, ApiCostEntryAggregateArgs>): Prisma.PrismaPromise<GetApiCostEntryAggregateType<T>>

    /**
     * Group by ApiCostEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiCostEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiCostEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiCostEntryGroupByArgs['orderBy'] }
        : { orderBy?: ApiCostEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiCostEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiCostEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiCostEntry model
   */
  readonly fields: ApiCostEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiCostEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiCostEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiCostEntry model
   */ 
  interface ApiCostEntryFieldRefs {
    readonly id: FieldRef<"ApiCostEntry", 'Int'>
    readonly apiType: FieldRef<"ApiCostEntry", 'String'>
    readonly cost: FieldRef<"ApiCostEntry", 'Float'>
    readonly details: FieldRef<"ApiCostEntry", 'String'>
    readonly createdAt: FieldRef<"ApiCostEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiCostEntry findUnique
   */
  export type ApiCostEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter, which ApiCostEntry to fetch.
     */
    where: ApiCostEntryWhereUniqueInput
  }

  /**
   * ApiCostEntry findUniqueOrThrow
   */
  export type ApiCostEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter, which ApiCostEntry to fetch.
     */
    where: ApiCostEntryWhereUniqueInput
  }

  /**
   * ApiCostEntry findFirst
   */
  export type ApiCostEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter, which ApiCostEntry to fetch.
     */
    where?: ApiCostEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiCostEntries to fetch.
     */
    orderBy?: ApiCostEntryOrderByWithRelationInput | ApiCostEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiCostEntries.
     */
    cursor?: ApiCostEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiCostEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiCostEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiCostEntries.
     */
    distinct?: ApiCostEntryScalarFieldEnum | ApiCostEntryScalarFieldEnum[]
  }

  /**
   * ApiCostEntry findFirstOrThrow
   */
  export type ApiCostEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter, which ApiCostEntry to fetch.
     */
    where?: ApiCostEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiCostEntries to fetch.
     */
    orderBy?: ApiCostEntryOrderByWithRelationInput | ApiCostEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiCostEntries.
     */
    cursor?: ApiCostEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiCostEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiCostEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiCostEntries.
     */
    distinct?: ApiCostEntryScalarFieldEnum | ApiCostEntryScalarFieldEnum[]
  }

  /**
   * ApiCostEntry findMany
   */
  export type ApiCostEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter, which ApiCostEntries to fetch.
     */
    where?: ApiCostEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiCostEntries to fetch.
     */
    orderBy?: ApiCostEntryOrderByWithRelationInput | ApiCostEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiCostEntries.
     */
    cursor?: ApiCostEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiCostEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiCostEntries.
     */
    skip?: number
    distinct?: ApiCostEntryScalarFieldEnum | ApiCostEntryScalarFieldEnum[]
  }

  /**
   * ApiCostEntry create
   */
  export type ApiCostEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * The data needed to create a ApiCostEntry.
     */
    data: XOR<ApiCostEntryCreateInput, ApiCostEntryUncheckedCreateInput>
  }

  /**
   * ApiCostEntry createMany
   */
  export type ApiCostEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiCostEntries.
     */
    data: ApiCostEntryCreateManyInput | ApiCostEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiCostEntry createManyAndReturn
   */
  export type ApiCostEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ApiCostEntries.
     */
    data: ApiCostEntryCreateManyInput | ApiCostEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiCostEntry update
   */
  export type ApiCostEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * The data needed to update a ApiCostEntry.
     */
    data: XOR<ApiCostEntryUpdateInput, ApiCostEntryUncheckedUpdateInput>
    /**
     * Choose, which ApiCostEntry to update.
     */
    where: ApiCostEntryWhereUniqueInput
  }

  /**
   * ApiCostEntry updateMany
   */
  export type ApiCostEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiCostEntries.
     */
    data: XOR<ApiCostEntryUpdateManyMutationInput, ApiCostEntryUncheckedUpdateManyInput>
    /**
     * Filter which ApiCostEntries to update
     */
    where?: ApiCostEntryWhereInput
  }

  /**
   * ApiCostEntry upsert
   */
  export type ApiCostEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * The filter to search for the ApiCostEntry to update in case it exists.
     */
    where: ApiCostEntryWhereUniqueInput
    /**
     * In case the ApiCostEntry found by the `where` argument doesn't exist, create a new ApiCostEntry with this data.
     */
    create: XOR<ApiCostEntryCreateInput, ApiCostEntryUncheckedCreateInput>
    /**
     * In case the ApiCostEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiCostEntryUpdateInput, ApiCostEntryUncheckedUpdateInput>
  }

  /**
   * ApiCostEntry delete
   */
  export type ApiCostEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
    /**
     * Filter which ApiCostEntry to delete.
     */
    where: ApiCostEntryWhereUniqueInput
  }

  /**
   * ApiCostEntry deleteMany
   */
  export type ApiCostEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiCostEntries to delete
     */
    where?: ApiCostEntryWhereInput
  }

  /**
   * ApiCostEntry without action
   */
  export type ApiCostEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiCostEntry
     */
    select?: ApiCostEntrySelect<ExtArgs> | null
  }


  /**
   * Model Lead
   */

  export type AggregateLead = {
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  export type LeadAvgAggregateOutputType = {
    motivation_score: number | null
    estimated_value: number | null
    equity: number | null
    condition_score: number | null
    tax_debt: number | null
    violations: number | null
    days_on_market: number | null
    lead_score: number | null
    aiScore: number | null
    feedback_good: number | null
    feedback_bad: number | null
    dnc_flag: number | null
    skip_trace_cost_cents: number | null
    ai_cost_cents: number | null
  }

  export type LeadSumAggregateOutputType = {
    motivation_score: number | null
    estimated_value: number | null
    equity: number | null
    condition_score: number | null
    tax_debt: number | null
    violations: number | null
    days_on_market: number | null
    lead_score: number | null
    aiScore: number | null
    feedback_good: number | null
    feedback_bad: number | null
    dnc_flag: number | null
    skip_trace_cost_cents: number | null
    ai_cost_cents: number | null
  }

  export type LeadMinAggregateOutputType = {
    id: string | null
    address: string | null
    owner_name: string | null
    phone: string | null
    email: string | null
    source_type: string | null
    source: string | null
    motivation_score: number | null
    estimated_value: number | null
    equity: number | null
    condition_score: number | null
    tax_debt: number | null
    violations: number | null
    is_probate: boolean | null
    is_vacant: boolean | null
    days_on_market: number | null
    lead_score: number | null
    aiScore: number | null
    feedback_good: number | null
    feedback_bad: number | null
    phones: string | null
    emails: string | null
    raw_data: string | null
    temperature_tag: string | null
    status: string | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    skip_traced_at: Date | null
    dnc_flag: number | null
    timezone: string | null
    quiet_hours_start: string | null
    quiet_hours_end: string | null
    activity_log_json: string | null
    skip_trace_provider: string | null
    skip_trace_cost_cents: number | null
    ai_cost_cents: number | null
    ai_scored_at: Date | null
  }

  export type LeadMaxAggregateOutputType = {
    id: string | null
    address: string | null
    owner_name: string | null
    phone: string | null
    email: string | null
    source_type: string | null
    source: string | null
    motivation_score: number | null
    estimated_value: number | null
    equity: number | null
    condition_score: number | null
    tax_debt: number | null
    violations: number | null
    is_probate: boolean | null
    is_vacant: boolean | null
    days_on_market: number | null
    lead_score: number | null
    aiScore: number | null
    feedback_good: number | null
    feedback_bad: number | null
    phones: string | null
    emails: string | null
    raw_data: string | null
    temperature_tag: string | null
    status: string | null
    notes: string | null
    created_at: Date | null
    updated_at: Date | null
    skip_traced_at: Date | null
    dnc_flag: number | null
    timezone: string | null
    quiet_hours_start: string | null
    quiet_hours_end: string | null
    activity_log_json: string | null
    skip_trace_provider: string | null
    skip_trace_cost_cents: number | null
    ai_cost_cents: number | null
    ai_scored_at: Date | null
  }

  export type LeadCountAggregateOutputType = {
    id: number
    address: number
    owner_name: number
    phone: number
    email: number
    source_type: number
    source: number
    motivation_score: number
    estimated_value: number
    equity: number
    condition_score: number
    tax_debt: number
    violations: number
    is_probate: number
    is_vacant: number
    days_on_market: number
    lead_score: number
    aiScore: number
    feedback_good: number
    feedback_bad: number
    phones: number
    emails: number
    raw_data: number
    temperature_tag: number
    status: number
    notes: number
    created_at: number
    updated_at: number
    skip_traced_at: number
    dnc_flag: number
    timezone: number
    quiet_hours_start: number
    quiet_hours_end: number
    activity_log_json: number
    skip_trace_provider: number
    skip_trace_cost_cents: number
    ai_cost_cents: number
    ai_scored_at: number
    _all: number
  }


  export type LeadAvgAggregateInputType = {
    motivation_score?: true
    estimated_value?: true
    equity?: true
    condition_score?: true
    tax_debt?: true
    violations?: true
    days_on_market?: true
    lead_score?: true
    aiScore?: true
    feedback_good?: true
    feedback_bad?: true
    dnc_flag?: true
    skip_trace_cost_cents?: true
    ai_cost_cents?: true
  }

  export type LeadSumAggregateInputType = {
    motivation_score?: true
    estimated_value?: true
    equity?: true
    condition_score?: true
    tax_debt?: true
    violations?: true
    days_on_market?: true
    lead_score?: true
    aiScore?: true
    feedback_good?: true
    feedback_bad?: true
    dnc_flag?: true
    skip_trace_cost_cents?: true
    ai_cost_cents?: true
  }

  export type LeadMinAggregateInputType = {
    id?: true
    address?: true
    owner_name?: true
    phone?: true
    email?: true
    source_type?: true
    source?: true
    motivation_score?: true
    estimated_value?: true
    equity?: true
    condition_score?: true
    tax_debt?: true
    violations?: true
    is_probate?: true
    is_vacant?: true
    days_on_market?: true
    lead_score?: true
    aiScore?: true
    feedback_good?: true
    feedback_bad?: true
    phones?: true
    emails?: true
    raw_data?: true
    temperature_tag?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
    skip_traced_at?: true
    dnc_flag?: true
    timezone?: true
    quiet_hours_start?: true
    quiet_hours_end?: true
    activity_log_json?: true
    skip_trace_provider?: true
    skip_trace_cost_cents?: true
    ai_cost_cents?: true
    ai_scored_at?: true
  }

  export type LeadMaxAggregateInputType = {
    id?: true
    address?: true
    owner_name?: true
    phone?: true
    email?: true
    source_type?: true
    source?: true
    motivation_score?: true
    estimated_value?: true
    equity?: true
    condition_score?: true
    tax_debt?: true
    violations?: true
    is_probate?: true
    is_vacant?: true
    days_on_market?: true
    lead_score?: true
    aiScore?: true
    feedback_good?: true
    feedback_bad?: true
    phones?: true
    emails?: true
    raw_data?: true
    temperature_tag?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
    skip_traced_at?: true
    dnc_flag?: true
    timezone?: true
    quiet_hours_start?: true
    quiet_hours_end?: true
    activity_log_json?: true
    skip_trace_provider?: true
    skip_trace_cost_cents?: true
    ai_cost_cents?: true
    ai_scored_at?: true
  }

  export type LeadCountAggregateInputType = {
    id?: true
    address?: true
    owner_name?: true
    phone?: true
    email?: true
    source_type?: true
    source?: true
    motivation_score?: true
    estimated_value?: true
    equity?: true
    condition_score?: true
    tax_debt?: true
    violations?: true
    is_probate?: true
    is_vacant?: true
    days_on_market?: true
    lead_score?: true
    aiScore?: true
    feedback_good?: true
    feedback_bad?: true
    phones?: true
    emails?: true
    raw_data?: true
    temperature_tag?: true
    status?: true
    notes?: true
    created_at?: true
    updated_at?: true
    skip_traced_at?: true
    dnc_flag?: true
    timezone?: true
    quiet_hours_start?: true
    quiet_hours_end?: true
    activity_log_json?: true
    skip_trace_provider?: true
    skip_trace_cost_cents?: true
    ai_cost_cents?: true
    ai_scored_at?: true
    _all?: true
  }

  export type LeadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lead to aggregate.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    _count?: true | LeadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadMaxAggregateInputType
  }

  export type GetLeadAggregateType<T extends LeadAggregateArgs> = {
        [P in keyof T & keyof AggregateLead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLead[P]>
      : GetScalarType<T[P], AggregateLead[P]>
  }




  export type LeadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithAggregationInput | LeadOrderByWithAggregationInput[]
    by: LeadScalarFieldEnum[] | LeadScalarFieldEnum
    having?: LeadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadCountAggregateInputType | true
    _avg?: LeadAvgAggregateInputType
    _sum?: LeadSumAggregateInputType
    _min?: LeadMinAggregateInputType
    _max?: LeadMaxAggregateInputType
  }

  export type LeadGroupByOutputType = {
    id: string
    address: string
    owner_name: string | null
    phone: string | null
    email: string | null
    source_type: string
    source: string
    motivation_score: number
    estimated_value: number | null
    equity: number | null
    condition_score: number
    tax_debt: number
    violations: number
    is_probate: boolean
    is_vacant: boolean
    days_on_market: number | null
    lead_score: number
    aiScore: number | null
    feedback_good: number
    feedback_bad: number
    phones: string
    emails: string
    raw_data: string | null
    temperature_tag: string
    status: string
    notes: string | null
    created_at: Date
    updated_at: Date
    skip_traced_at: Date | null
    dnc_flag: number
    timezone: string | null
    quiet_hours_start: string | null
    quiet_hours_end: string | null
    activity_log_json: string | null
    skip_trace_provider: string | null
    skip_trace_cost_cents: number
    ai_cost_cents: number
    ai_scored_at: Date | null
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  type GetLeadGroupByPayload<T extends LeadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadGroupByOutputType[P]>
            : GetScalarType<T[P], LeadGroupByOutputType[P]>
        }
      >
    >


  export type LeadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    owner_name?: boolean
    phone?: boolean
    email?: boolean
    source_type?: boolean
    source?: boolean
    motivation_score?: boolean
    estimated_value?: boolean
    equity?: boolean
    condition_score?: boolean
    tax_debt?: boolean
    violations?: boolean
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: boolean
    lead_score?: boolean
    aiScore?: boolean
    feedback_good?: boolean
    feedback_bad?: boolean
    phones?: boolean
    emails?: boolean
    raw_data?: boolean
    temperature_tag?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    skip_traced_at?: boolean
    dnc_flag?: boolean
    timezone?: boolean
    quiet_hours_start?: boolean
    quiet_hours_end?: boolean
    activity_log_json?: boolean
    skip_trace_provider?: boolean
    skip_trace_cost_cents?: boolean
    ai_cost_cents?: boolean
    ai_scored_at?: boolean
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    owner_name?: boolean
    phone?: boolean
    email?: boolean
    source_type?: boolean
    source?: boolean
    motivation_score?: boolean
    estimated_value?: boolean
    equity?: boolean
    condition_score?: boolean
    tax_debt?: boolean
    violations?: boolean
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: boolean
    lead_score?: boolean
    aiScore?: boolean
    feedback_good?: boolean
    feedback_bad?: boolean
    phones?: boolean
    emails?: boolean
    raw_data?: boolean
    temperature_tag?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    skip_traced_at?: boolean
    dnc_flag?: boolean
    timezone?: boolean
    quiet_hours_start?: boolean
    quiet_hours_end?: boolean
    activity_log_json?: boolean
    skip_trace_provider?: boolean
    skip_trace_cost_cents?: boolean
    ai_cost_cents?: boolean
    ai_scored_at?: boolean
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectScalar = {
    id?: boolean
    address?: boolean
    owner_name?: boolean
    phone?: boolean
    email?: boolean
    source_type?: boolean
    source?: boolean
    motivation_score?: boolean
    estimated_value?: boolean
    equity?: boolean
    condition_score?: boolean
    tax_debt?: boolean
    violations?: boolean
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: boolean
    lead_score?: boolean
    aiScore?: boolean
    feedback_good?: boolean
    feedback_bad?: boolean
    phones?: boolean
    emails?: boolean
    raw_data?: boolean
    temperature_tag?: boolean
    status?: boolean
    notes?: boolean
    created_at?: boolean
    updated_at?: boolean
    skip_traced_at?: boolean
    dnc_flag?: boolean
    timezone?: boolean
    quiet_hours_start?: boolean
    quiet_hours_end?: boolean
    activity_log_json?: boolean
    skip_trace_provider?: boolean
    skip_trace_cost_cents?: boolean
    ai_cost_cents?: boolean
    ai_scored_at?: boolean
  }


  export type $LeadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lead"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      owner_name: string | null
      phone: string | null
      email: string | null
      source_type: string
      source: string
      motivation_score: number
      estimated_value: number | null
      equity: number | null
      condition_score: number
      tax_debt: number
      violations: number
      is_probate: boolean
      is_vacant: boolean
      days_on_market: number | null
      lead_score: number
      aiScore: number | null
      feedback_good: number
      feedback_bad: number
      phones: string
      emails: string
      raw_data: string | null
      temperature_tag: string
      status: string
      notes: string | null
      created_at: Date
      updated_at: Date
      skip_traced_at: Date | null
      dnc_flag: number
      timezone: string | null
      quiet_hours_start: string | null
      quiet_hours_end: string | null
      activity_log_json: string | null
      skip_trace_provider: string | null
      skip_trace_cost_cents: number
      ai_cost_cents: number
      ai_scored_at: Date | null
    }, ExtArgs["result"]["lead"]>
    composites: {}
  }

  type LeadGetPayload<S extends boolean | null | undefined | LeadDefaultArgs> = $Result.GetResult<Prisma.$LeadPayload, S>

  type LeadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadCountAggregateInputType | true
    }

  export interface LeadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lead'], meta: { name: 'Lead' } }
    /**
     * Find zero or one Lead that matches the filter.
     * @param {LeadFindUniqueArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadFindUniqueArgs>(args: SelectSubset<T, LeadFindUniqueArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lead that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadFindUniqueOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadFindFirstArgs>(args?: SelectSubset<T, LeadFindFirstArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.lead.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.lead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadWithIdOnly = await prisma.lead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadFindManyArgs>(args?: SelectSubset<T, LeadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lead.
     * @param {LeadCreateArgs} args - Arguments to create a Lead.
     * @example
     * // Create one Lead
     * const Lead = await prisma.lead.create({
     *   data: {
     *     // ... data to create a Lead
     *   }
     * })
     * 
     */
    create<T extends LeadCreateArgs>(args: SelectSubset<T, LeadCreateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leads.
     * @param {LeadCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadCreateManyArgs>(args?: SelectSubset<T, LeadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leads and returns the data saved in the database.
     * @param {LeadCreateManyAndReturnArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Lead.
     * @param {LeadDeleteArgs} args - Arguments to delete one Lead.
     * @example
     * // Delete one Lead
     * const Lead = await prisma.lead.delete({
     *   where: {
     *     // ... filter to delete one Lead
     *   }
     * })
     * 
     */
    delete<T extends LeadDeleteArgs>(args: SelectSubset<T, LeadDeleteArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lead.
     * @param {LeadUpdateArgs} args - Arguments to update one Lead.
     * @example
     * // Update one Lead
     * const lead = await prisma.lead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadUpdateArgs>(args: SelectSubset<T, LeadUpdateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leads.
     * @param {LeadDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.lead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadDeleteManyArgs>(args?: SelectSubset<T, LeadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadUpdateManyArgs>(args: SelectSubset<T, LeadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lead.
     * @param {LeadUpsertArgs} args - Arguments to update or create a Lead.
     * @example
     * // Update or create a Lead
     * const lead = await prisma.lead.upsert({
     *   create: {
     *     // ... data to create a Lead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lead we want to update
     *   }
     * })
     */
    upsert<T extends LeadUpsertArgs>(args: SelectSubset<T, LeadUpsertArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.lead.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends LeadCountArgs>(
      args?: Subset<T, LeadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadAggregateArgs>(args: Subset<T, LeadAggregateArgs>): Prisma.PrismaPromise<GetLeadAggregateType<T>>

    /**
     * Group by Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadGroupByArgs['orderBy'] }
        : { orderBy?: LeadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lead model
   */
  readonly fields: LeadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lead model
   */ 
  interface LeadFieldRefs {
    readonly id: FieldRef<"Lead", 'String'>
    readonly address: FieldRef<"Lead", 'String'>
    readonly owner_name: FieldRef<"Lead", 'String'>
    readonly phone: FieldRef<"Lead", 'String'>
    readonly email: FieldRef<"Lead", 'String'>
    readonly source_type: FieldRef<"Lead", 'String'>
    readonly source: FieldRef<"Lead", 'String'>
    readonly motivation_score: FieldRef<"Lead", 'Int'>
    readonly estimated_value: FieldRef<"Lead", 'Float'>
    readonly equity: FieldRef<"Lead", 'Float'>
    readonly condition_score: FieldRef<"Lead", 'Int'>
    readonly tax_debt: FieldRef<"Lead", 'Float'>
    readonly violations: FieldRef<"Lead", 'Int'>
    readonly is_probate: FieldRef<"Lead", 'Boolean'>
    readonly is_vacant: FieldRef<"Lead", 'Boolean'>
    readonly days_on_market: FieldRef<"Lead", 'Int'>
    readonly lead_score: FieldRef<"Lead", 'Int'>
    readonly aiScore: FieldRef<"Lead", 'Int'>
    readonly feedback_good: FieldRef<"Lead", 'Int'>
    readonly feedback_bad: FieldRef<"Lead", 'Int'>
    readonly phones: FieldRef<"Lead", 'String'>
    readonly emails: FieldRef<"Lead", 'String'>
    readonly raw_data: FieldRef<"Lead", 'String'>
    readonly temperature_tag: FieldRef<"Lead", 'String'>
    readonly status: FieldRef<"Lead", 'String'>
    readonly notes: FieldRef<"Lead", 'String'>
    readonly created_at: FieldRef<"Lead", 'DateTime'>
    readonly updated_at: FieldRef<"Lead", 'DateTime'>
    readonly skip_traced_at: FieldRef<"Lead", 'DateTime'>
    readonly dnc_flag: FieldRef<"Lead", 'Int'>
    readonly timezone: FieldRef<"Lead", 'String'>
    readonly quiet_hours_start: FieldRef<"Lead", 'String'>
    readonly quiet_hours_end: FieldRef<"Lead", 'String'>
    readonly activity_log_json: FieldRef<"Lead", 'String'>
    readonly skip_trace_provider: FieldRef<"Lead", 'String'>
    readonly skip_trace_cost_cents: FieldRef<"Lead", 'Int'>
    readonly ai_cost_cents: FieldRef<"Lead", 'Int'>
    readonly ai_scored_at: FieldRef<"Lead", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lead findUnique
   */
  export type LeadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findUniqueOrThrow
   */
  export type LeadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findFirst
   */
  export type LeadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findFirstOrThrow
   */
  export type LeadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findMany
   */
  export type LeadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead create
   */
  export type LeadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * The data needed to create a Lead.
     */
    data: XOR<LeadCreateInput, LeadUncheckedCreateInput>
  }

  /**
   * Lead createMany
   */
  export type LeadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lead createManyAndReturn
   */
  export type LeadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lead update
   */
  export type LeadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * The data needed to update a Lead.
     */
    data: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
    /**
     * Choose, which Lead to update.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead updateMany
   */
  export type LeadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
  }

  /**
   * Lead upsert
   */
  export type LeadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * The filter to search for the Lead to update in case it exists.
     */
    where: LeadWhereUniqueInput
    /**
     * In case the Lead found by the `where` argument doesn't exist, create a new Lead with this data.
     */
    create: XOR<LeadCreateInput, LeadUncheckedCreateInput>
    /**
     * In case the Lead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
  }

  /**
   * Lead delete
   */
  export type LeadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Filter which Lead to delete.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead deleteMany
   */
  export type LeadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to delete
     */
    where?: LeadWhereInput
  }

  /**
   * Lead without action
   */
  export type LeadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
  }


  /**
   * Model ProbateCase
   */

  export type AggregateProbateCase = {
    _count: ProbateCaseCountAggregateOutputType | null
    _avg: ProbateCaseAvgAggregateOutputType | null
    _sum: ProbateCaseSumAggregateOutputType | null
    _min: ProbateCaseMinAggregateOutputType | null
    _max: ProbateCaseMaxAggregateOutputType | null
  }

  export type ProbateCaseAvgAggregateOutputType = {
    estimated_estate_value: number | null
    urgency_score: number | null
    deal_potential_score: number | null
  }

  export type ProbateCaseSumAggregateOutputType = {
    estimated_estate_value: number | null
    urgency_score: number | null
    deal_potential_score: number | null
  }

  export type ProbateCaseMinAggregateOutputType = {
    id: string | null
    case_number: string | null
    deceased_name: string | null
    filing_date: Date | null
    case_status: string | null
    county: string | null
    estimated_estate_value: number | null
    properties_json: string | null
    heirs_json: string | null
    urgency_score: number | null
    deal_potential_score: number | null
    next_hearing_date: Date | null
    attorney_name: string | null
    attorney_phone: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProbateCaseMaxAggregateOutputType = {
    id: string | null
    case_number: string | null
    deceased_name: string | null
    filing_date: Date | null
    case_status: string | null
    county: string | null
    estimated_estate_value: number | null
    properties_json: string | null
    heirs_json: string | null
    urgency_score: number | null
    deal_potential_score: number | null
    next_hearing_date: Date | null
    attorney_name: string | null
    attorney_phone: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProbateCaseCountAggregateOutputType = {
    id: number
    case_number: number
    deceased_name: number
    filing_date: number
    case_status: number
    county: number
    estimated_estate_value: number
    properties_json: number
    heirs_json: number
    urgency_score: number
    deal_potential_score: number
    next_hearing_date: number
    attorney_name: number
    attorney_phone: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProbateCaseAvgAggregateInputType = {
    estimated_estate_value?: true
    urgency_score?: true
    deal_potential_score?: true
  }

  export type ProbateCaseSumAggregateInputType = {
    estimated_estate_value?: true
    urgency_score?: true
    deal_potential_score?: true
  }

  export type ProbateCaseMinAggregateInputType = {
    id?: true
    case_number?: true
    deceased_name?: true
    filing_date?: true
    case_status?: true
    county?: true
    estimated_estate_value?: true
    properties_json?: true
    heirs_json?: true
    urgency_score?: true
    deal_potential_score?: true
    next_hearing_date?: true
    attorney_name?: true
    attorney_phone?: true
    created_at?: true
    updated_at?: true
  }

  export type ProbateCaseMaxAggregateInputType = {
    id?: true
    case_number?: true
    deceased_name?: true
    filing_date?: true
    case_status?: true
    county?: true
    estimated_estate_value?: true
    properties_json?: true
    heirs_json?: true
    urgency_score?: true
    deal_potential_score?: true
    next_hearing_date?: true
    attorney_name?: true
    attorney_phone?: true
    created_at?: true
    updated_at?: true
  }

  export type ProbateCaseCountAggregateInputType = {
    id?: true
    case_number?: true
    deceased_name?: true
    filing_date?: true
    case_status?: true
    county?: true
    estimated_estate_value?: true
    properties_json?: true
    heirs_json?: true
    urgency_score?: true
    deal_potential_score?: true
    next_hearing_date?: true
    attorney_name?: true
    attorney_phone?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProbateCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProbateCase to aggregate.
     */
    where?: ProbateCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProbateCases to fetch.
     */
    orderBy?: ProbateCaseOrderByWithRelationInput | ProbateCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProbateCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProbateCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProbateCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProbateCases
    **/
    _count?: true | ProbateCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProbateCaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProbateCaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProbateCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProbateCaseMaxAggregateInputType
  }

  export type GetProbateCaseAggregateType<T extends ProbateCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateProbateCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProbateCase[P]>
      : GetScalarType<T[P], AggregateProbateCase[P]>
  }




  export type ProbateCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProbateCaseWhereInput
    orderBy?: ProbateCaseOrderByWithAggregationInput | ProbateCaseOrderByWithAggregationInput[]
    by: ProbateCaseScalarFieldEnum[] | ProbateCaseScalarFieldEnum
    having?: ProbateCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProbateCaseCountAggregateInputType | true
    _avg?: ProbateCaseAvgAggregateInputType
    _sum?: ProbateCaseSumAggregateInputType
    _min?: ProbateCaseMinAggregateInputType
    _max?: ProbateCaseMaxAggregateInputType
  }

  export type ProbateCaseGroupByOutputType = {
    id: string
    case_number: string
    deceased_name: string
    filing_date: Date
    case_status: string
    county: string
    estimated_estate_value: number | null
    properties_json: string | null
    heirs_json: string | null
    urgency_score: number
    deal_potential_score: number
    next_hearing_date: Date | null
    attorney_name: string | null
    attorney_phone: string | null
    created_at: Date
    updated_at: Date
    _count: ProbateCaseCountAggregateOutputType | null
    _avg: ProbateCaseAvgAggregateOutputType | null
    _sum: ProbateCaseSumAggregateOutputType | null
    _min: ProbateCaseMinAggregateOutputType | null
    _max: ProbateCaseMaxAggregateOutputType | null
  }

  type GetProbateCaseGroupByPayload<T extends ProbateCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProbateCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProbateCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProbateCaseGroupByOutputType[P]>
            : GetScalarType<T[P], ProbateCaseGroupByOutputType[P]>
        }
      >
    >


  export type ProbateCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    case_number?: boolean
    deceased_name?: boolean
    filing_date?: boolean
    case_status?: boolean
    county?: boolean
    estimated_estate_value?: boolean
    properties_json?: boolean
    heirs_json?: boolean
    urgency_score?: boolean
    deal_potential_score?: boolean
    next_hearing_date?: boolean
    attorney_name?: boolean
    attorney_phone?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["probateCase"]>

  export type ProbateCaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    case_number?: boolean
    deceased_name?: boolean
    filing_date?: boolean
    case_status?: boolean
    county?: boolean
    estimated_estate_value?: boolean
    properties_json?: boolean
    heirs_json?: boolean
    urgency_score?: boolean
    deal_potential_score?: boolean
    next_hearing_date?: boolean
    attorney_name?: boolean
    attorney_phone?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["probateCase"]>

  export type ProbateCaseSelectScalar = {
    id?: boolean
    case_number?: boolean
    deceased_name?: boolean
    filing_date?: boolean
    case_status?: boolean
    county?: boolean
    estimated_estate_value?: boolean
    properties_json?: boolean
    heirs_json?: boolean
    urgency_score?: boolean
    deal_potential_score?: boolean
    next_hearing_date?: boolean
    attorney_name?: boolean
    attorney_phone?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $ProbateCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProbateCase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      case_number: string
      deceased_name: string
      filing_date: Date
      case_status: string
      county: string
      estimated_estate_value: number | null
      properties_json: string | null
      heirs_json: string | null
      urgency_score: number
      deal_potential_score: number
      next_hearing_date: Date | null
      attorney_name: string | null
      attorney_phone: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["probateCase"]>
    composites: {}
  }

  type ProbateCaseGetPayload<S extends boolean | null | undefined | ProbateCaseDefaultArgs> = $Result.GetResult<Prisma.$ProbateCasePayload, S>

  type ProbateCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProbateCaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProbateCaseCountAggregateInputType | true
    }

  export interface ProbateCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProbateCase'], meta: { name: 'ProbateCase' } }
    /**
     * Find zero or one ProbateCase that matches the filter.
     * @param {ProbateCaseFindUniqueArgs} args - Arguments to find a ProbateCase
     * @example
     * // Get one ProbateCase
     * const probateCase = await prisma.probateCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProbateCaseFindUniqueArgs>(args: SelectSubset<T, ProbateCaseFindUniqueArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProbateCase that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProbateCaseFindUniqueOrThrowArgs} args - Arguments to find a ProbateCase
     * @example
     * // Get one ProbateCase
     * const probateCase = await prisma.probateCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProbateCaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ProbateCaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProbateCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseFindFirstArgs} args - Arguments to find a ProbateCase
     * @example
     * // Get one ProbateCase
     * const probateCase = await prisma.probateCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProbateCaseFindFirstArgs>(args?: SelectSubset<T, ProbateCaseFindFirstArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProbateCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseFindFirstOrThrowArgs} args - Arguments to find a ProbateCase
     * @example
     * // Get one ProbateCase
     * const probateCase = await prisma.probateCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProbateCaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ProbateCaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProbateCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProbateCases
     * const probateCases = await prisma.probateCase.findMany()
     * 
     * // Get first 10 ProbateCases
     * const probateCases = await prisma.probateCase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const probateCaseWithIdOnly = await prisma.probateCase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProbateCaseFindManyArgs>(args?: SelectSubset<T, ProbateCaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProbateCase.
     * @param {ProbateCaseCreateArgs} args - Arguments to create a ProbateCase.
     * @example
     * // Create one ProbateCase
     * const ProbateCase = await prisma.probateCase.create({
     *   data: {
     *     // ... data to create a ProbateCase
     *   }
     * })
     * 
     */
    create<T extends ProbateCaseCreateArgs>(args: SelectSubset<T, ProbateCaseCreateArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProbateCases.
     * @param {ProbateCaseCreateManyArgs} args - Arguments to create many ProbateCases.
     * @example
     * // Create many ProbateCases
     * const probateCase = await prisma.probateCase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProbateCaseCreateManyArgs>(args?: SelectSubset<T, ProbateCaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProbateCases and returns the data saved in the database.
     * @param {ProbateCaseCreateManyAndReturnArgs} args - Arguments to create many ProbateCases.
     * @example
     * // Create many ProbateCases
     * const probateCase = await prisma.probateCase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProbateCases and only return the `id`
     * const probateCaseWithIdOnly = await prisma.probateCase.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProbateCaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ProbateCaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProbateCase.
     * @param {ProbateCaseDeleteArgs} args - Arguments to delete one ProbateCase.
     * @example
     * // Delete one ProbateCase
     * const ProbateCase = await prisma.probateCase.delete({
     *   where: {
     *     // ... filter to delete one ProbateCase
     *   }
     * })
     * 
     */
    delete<T extends ProbateCaseDeleteArgs>(args: SelectSubset<T, ProbateCaseDeleteArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProbateCase.
     * @param {ProbateCaseUpdateArgs} args - Arguments to update one ProbateCase.
     * @example
     * // Update one ProbateCase
     * const probateCase = await prisma.probateCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProbateCaseUpdateArgs>(args: SelectSubset<T, ProbateCaseUpdateArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProbateCases.
     * @param {ProbateCaseDeleteManyArgs} args - Arguments to filter ProbateCases to delete.
     * @example
     * // Delete a few ProbateCases
     * const { count } = await prisma.probateCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProbateCaseDeleteManyArgs>(args?: SelectSubset<T, ProbateCaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProbateCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProbateCases
     * const probateCase = await prisma.probateCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProbateCaseUpdateManyArgs>(args: SelectSubset<T, ProbateCaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProbateCase.
     * @param {ProbateCaseUpsertArgs} args - Arguments to update or create a ProbateCase.
     * @example
     * // Update or create a ProbateCase
     * const probateCase = await prisma.probateCase.upsert({
     *   create: {
     *     // ... data to create a ProbateCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProbateCase we want to update
     *   }
     * })
     */
    upsert<T extends ProbateCaseUpsertArgs>(args: SelectSubset<T, ProbateCaseUpsertArgs<ExtArgs>>): Prisma__ProbateCaseClient<$Result.GetResult<Prisma.$ProbateCasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProbateCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseCountArgs} args - Arguments to filter ProbateCases to count.
     * @example
     * // Count the number of ProbateCases
     * const count = await prisma.probateCase.count({
     *   where: {
     *     // ... the filter for the ProbateCases we want to count
     *   }
     * })
    **/
    count<T extends ProbateCaseCountArgs>(
      args?: Subset<T, ProbateCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProbateCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProbateCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProbateCaseAggregateArgs>(args: Subset<T, ProbateCaseAggregateArgs>): Prisma.PrismaPromise<GetProbateCaseAggregateType<T>>

    /**
     * Group by ProbateCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProbateCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProbateCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProbateCaseGroupByArgs['orderBy'] }
        : { orderBy?: ProbateCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProbateCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProbateCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProbateCase model
   */
  readonly fields: ProbateCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProbateCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProbateCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProbateCase model
   */ 
  interface ProbateCaseFieldRefs {
    readonly id: FieldRef<"ProbateCase", 'String'>
    readonly case_number: FieldRef<"ProbateCase", 'String'>
    readonly deceased_name: FieldRef<"ProbateCase", 'String'>
    readonly filing_date: FieldRef<"ProbateCase", 'DateTime'>
    readonly case_status: FieldRef<"ProbateCase", 'String'>
    readonly county: FieldRef<"ProbateCase", 'String'>
    readonly estimated_estate_value: FieldRef<"ProbateCase", 'Float'>
    readonly properties_json: FieldRef<"ProbateCase", 'String'>
    readonly heirs_json: FieldRef<"ProbateCase", 'String'>
    readonly urgency_score: FieldRef<"ProbateCase", 'Int'>
    readonly deal_potential_score: FieldRef<"ProbateCase", 'Int'>
    readonly next_hearing_date: FieldRef<"ProbateCase", 'DateTime'>
    readonly attorney_name: FieldRef<"ProbateCase", 'String'>
    readonly attorney_phone: FieldRef<"ProbateCase", 'String'>
    readonly created_at: FieldRef<"ProbateCase", 'DateTime'>
    readonly updated_at: FieldRef<"ProbateCase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProbateCase findUnique
   */
  export type ProbateCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter, which ProbateCase to fetch.
     */
    where: ProbateCaseWhereUniqueInput
  }

  /**
   * ProbateCase findUniqueOrThrow
   */
  export type ProbateCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter, which ProbateCase to fetch.
     */
    where: ProbateCaseWhereUniqueInput
  }

  /**
   * ProbateCase findFirst
   */
  export type ProbateCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter, which ProbateCase to fetch.
     */
    where?: ProbateCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProbateCases to fetch.
     */
    orderBy?: ProbateCaseOrderByWithRelationInput | ProbateCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProbateCases.
     */
    cursor?: ProbateCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProbateCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProbateCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProbateCases.
     */
    distinct?: ProbateCaseScalarFieldEnum | ProbateCaseScalarFieldEnum[]
  }

  /**
   * ProbateCase findFirstOrThrow
   */
  export type ProbateCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter, which ProbateCase to fetch.
     */
    where?: ProbateCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProbateCases to fetch.
     */
    orderBy?: ProbateCaseOrderByWithRelationInput | ProbateCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProbateCases.
     */
    cursor?: ProbateCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProbateCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProbateCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProbateCases.
     */
    distinct?: ProbateCaseScalarFieldEnum | ProbateCaseScalarFieldEnum[]
  }

  /**
   * ProbateCase findMany
   */
  export type ProbateCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter, which ProbateCases to fetch.
     */
    where?: ProbateCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProbateCases to fetch.
     */
    orderBy?: ProbateCaseOrderByWithRelationInput | ProbateCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProbateCases.
     */
    cursor?: ProbateCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProbateCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProbateCases.
     */
    skip?: number
    distinct?: ProbateCaseScalarFieldEnum | ProbateCaseScalarFieldEnum[]
  }

  /**
   * ProbateCase create
   */
  export type ProbateCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * The data needed to create a ProbateCase.
     */
    data: XOR<ProbateCaseCreateInput, ProbateCaseUncheckedCreateInput>
  }

  /**
   * ProbateCase createMany
   */
  export type ProbateCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProbateCases.
     */
    data: ProbateCaseCreateManyInput | ProbateCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProbateCase createManyAndReturn
   */
  export type ProbateCaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProbateCases.
     */
    data: ProbateCaseCreateManyInput | ProbateCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProbateCase update
   */
  export type ProbateCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * The data needed to update a ProbateCase.
     */
    data: XOR<ProbateCaseUpdateInput, ProbateCaseUncheckedUpdateInput>
    /**
     * Choose, which ProbateCase to update.
     */
    where: ProbateCaseWhereUniqueInput
  }

  /**
   * ProbateCase updateMany
   */
  export type ProbateCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProbateCases.
     */
    data: XOR<ProbateCaseUpdateManyMutationInput, ProbateCaseUncheckedUpdateManyInput>
    /**
     * Filter which ProbateCases to update
     */
    where?: ProbateCaseWhereInput
  }

  /**
   * ProbateCase upsert
   */
  export type ProbateCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * The filter to search for the ProbateCase to update in case it exists.
     */
    where: ProbateCaseWhereUniqueInput
    /**
     * In case the ProbateCase found by the `where` argument doesn't exist, create a new ProbateCase with this data.
     */
    create: XOR<ProbateCaseCreateInput, ProbateCaseUncheckedCreateInput>
    /**
     * In case the ProbateCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProbateCaseUpdateInput, ProbateCaseUncheckedUpdateInput>
  }

  /**
   * ProbateCase delete
   */
  export type ProbateCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
    /**
     * Filter which ProbateCase to delete.
     */
    where: ProbateCaseWhereUniqueInput
  }

  /**
   * ProbateCase deleteMany
   */
  export type ProbateCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProbateCases to delete
     */
    where?: ProbateCaseWhereInput
  }

  /**
   * ProbateCase without action
   */
  export type ProbateCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProbateCase
     */
    select?: ProbateCaseSelect<ExtArgs> | null
  }


  /**
   * Model PropertyViolation
   */

  export type AggregatePropertyViolation = {
    _count: PropertyViolationCountAggregateOutputType | null
    _avg: PropertyViolationAvgAggregateOutputType | null
    _sum: PropertyViolationSumAggregateOutputType | null
    _min: PropertyViolationMinAggregateOutputType | null
    _max: PropertyViolationMaxAggregateOutputType | null
  }

  export type PropertyViolationAvgAggregateOutputType = {
    severity_score: number | null
    financial_burden: number | null
    deal_potential: number | null
  }

  export type PropertyViolationSumAggregateOutputType = {
    severity_score: number | null
    financial_burden: number | null
    deal_potential: number | null
  }

  export type PropertyViolationMinAggregateOutputType = {
    id: string | null
    property_address: string | null
    violation_type: string | null
    severity_score: number | null
    repeat_offender: boolean | null
    financial_burden: number | null
    compliance_deadline: Date | null
    enforcement_stage: string | null
    deal_potential: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PropertyViolationMaxAggregateOutputType = {
    id: string | null
    property_address: string | null
    violation_type: string | null
    severity_score: number | null
    repeat_offender: boolean | null
    financial_burden: number | null
    compliance_deadline: Date | null
    enforcement_stage: string | null
    deal_potential: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PropertyViolationCountAggregateOutputType = {
    id: number
    property_address: number
    violation_type: number
    severity_score: number
    repeat_offender: number
    financial_burden: number
    compliance_deadline: number
    enforcement_stage: number
    deal_potential: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PropertyViolationAvgAggregateInputType = {
    severity_score?: true
    financial_burden?: true
    deal_potential?: true
  }

  export type PropertyViolationSumAggregateInputType = {
    severity_score?: true
    financial_burden?: true
    deal_potential?: true
  }

  export type PropertyViolationMinAggregateInputType = {
    id?: true
    property_address?: true
    violation_type?: true
    severity_score?: true
    repeat_offender?: true
    financial_burden?: true
    compliance_deadline?: true
    enforcement_stage?: true
    deal_potential?: true
    created_at?: true
    updated_at?: true
  }

  export type PropertyViolationMaxAggregateInputType = {
    id?: true
    property_address?: true
    violation_type?: true
    severity_score?: true
    repeat_offender?: true
    financial_burden?: true
    compliance_deadline?: true
    enforcement_stage?: true
    deal_potential?: true
    created_at?: true
    updated_at?: true
  }

  export type PropertyViolationCountAggregateInputType = {
    id?: true
    property_address?: true
    violation_type?: true
    severity_score?: true
    repeat_offender?: true
    financial_burden?: true
    compliance_deadline?: true
    enforcement_stage?: true
    deal_potential?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PropertyViolationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyViolation to aggregate.
     */
    where?: PropertyViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyViolations to fetch.
     */
    orderBy?: PropertyViolationOrderByWithRelationInput | PropertyViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyViolations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyViolations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PropertyViolations
    **/
    _count?: true | PropertyViolationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyViolationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertyViolationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyViolationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyViolationMaxAggregateInputType
  }

  export type GetPropertyViolationAggregateType<T extends PropertyViolationAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyViolation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyViolation[P]>
      : GetScalarType<T[P], AggregatePropertyViolation[P]>
  }




  export type PropertyViolationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyViolationWhereInput
    orderBy?: PropertyViolationOrderByWithAggregationInput | PropertyViolationOrderByWithAggregationInput[]
    by: PropertyViolationScalarFieldEnum[] | PropertyViolationScalarFieldEnum
    having?: PropertyViolationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyViolationCountAggregateInputType | true
    _avg?: PropertyViolationAvgAggregateInputType
    _sum?: PropertyViolationSumAggregateInputType
    _min?: PropertyViolationMinAggregateInputType
    _max?: PropertyViolationMaxAggregateInputType
  }

  export type PropertyViolationGroupByOutputType = {
    id: string
    property_address: string
    violation_type: string
    severity_score: number
    repeat_offender: boolean
    financial_burden: number
    compliance_deadline: Date
    enforcement_stage: string
    deal_potential: number
    created_at: Date
    updated_at: Date
    _count: PropertyViolationCountAggregateOutputType | null
    _avg: PropertyViolationAvgAggregateOutputType | null
    _sum: PropertyViolationSumAggregateOutputType | null
    _min: PropertyViolationMinAggregateOutputType | null
    _max: PropertyViolationMaxAggregateOutputType | null
  }

  type GetPropertyViolationGroupByPayload<T extends PropertyViolationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyViolationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyViolationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyViolationGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyViolationGroupByOutputType[P]>
        }
      >
    >


  export type PropertyViolationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    property_address?: boolean
    violation_type?: boolean
    severity_score?: boolean
    repeat_offender?: boolean
    financial_burden?: boolean
    compliance_deadline?: boolean
    enforcement_stage?: boolean
    deal_potential?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["propertyViolation"]>

  export type PropertyViolationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    property_address?: boolean
    violation_type?: boolean
    severity_score?: boolean
    repeat_offender?: boolean
    financial_burden?: boolean
    compliance_deadline?: boolean
    enforcement_stage?: boolean
    deal_potential?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["propertyViolation"]>

  export type PropertyViolationSelectScalar = {
    id?: boolean
    property_address?: boolean
    violation_type?: boolean
    severity_score?: boolean
    repeat_offender?: boolean
    financial_burden?: boolean
    compliance_deadline?: boolean
    enforcement_stage?: boolean
    deal_potential?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $PropertyViolationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PropertyViolation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      property_address: string
      violation_type: string
      severity_score: number
      repeat_offender: boolean
      financial_burden: number
      compliance_deadline: Date
      enforcement_stage: string
      deal_potential: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["propertyViolation"]>
    composites: {}
  }

  type PropertyViolationGetPayload<S extends boolean | null | undefined | PropertyViolationDefaultArgs> = $Result.GetResult<Prisma.$PropertyViolationPayload, S>

  type PropertyViolationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyViolationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyViolationCountAggregateInputType | true
    }

  export interface PropertyViolationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PropertyViolation'], meta: { name: 'PropertyViolation' } }
    /**
     * Find zero or one PropertyViolation that matches the filter.
     * @param {PropertyViolationFindUniqueArgs} args - Arguments to find a PropertyViolation
     * @example
     * // Get one PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PropertyViolationFindUniqueArgs>(args: SelectSubset<T, PropertyViolationFindUniqueArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PropertyViolation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyViolationFindUniqueOrThrowArgs} args - Arguments to find a PropertyViolation
     * @example
     * // Get one PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PropertyViolationFindUniqueOrThrowArgs>(args: SelectSubset<T, PropertyViolationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PropertyViolation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationFindFirstArgs} args - Arguments to find a PropertyViolation
     * @example
     * // Get one PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PropertyViolationFindFirstArgs>(args?: SelectSubset<T, PropertyViolationFindFirstArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PropertyViolation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationFindFirstOrThrowArgs} args - Arguments to find a PropertyViolation
     * @example
     * // Get one PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PropertyViolationFindFirstOrThrowArgs>(args?: SelectSubset<T, PropertyViolationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PropertyViolations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropertyViolations
     * const propertyViolations = await prisma.propertyViolation.findMany()
     * 
     * // Get first 10 PropertyViolations
     * const propertyViolations = await prisma.propertyViolation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyViolationWithIdOnly = await prisma.propertyViolation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PropertyViolationFindManyArgs>(args?: SelectSubset<T, PropertyViolationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PropertyViolation.
     * @param {PropertyViolationCreateArgs} args - Arguments to create a PropertyViolation.
     * @example
     * // Create one PropertyViolation
     * const PropertyViolation = await prisma.propertyViolation.create({
     *   data: {
     *     // ... data to create a PropertyViolation
     *   }
     * })
     * 
     */
    create<T extends PropertyViolationCreateArgs>(args: SelectSubset<T, PropertyViolationCreateArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PropertyViolations.
     * @param {PropertyViolationCreateManyArgs} args - Arguments to create many PropertyViolations.
     * @example
     * // Create many PropertyViolations
     * const propertyViolation = await prisma.propertyViolation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PropertyViolationCreateManyArgs>(args?: SelectSubset<T, PropertyViolationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PropertyViolations and returns the data saved in the database.
     * @param {PropertyViolationCreateManyAndReturnArgs} args - Arguments to create many PropertyViolations.
     * @example
     * // Create many PropertyViolations
     * const propertyViolation = await prisma.propertyViolation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PropertyViolations and only return the `id`
     * const propertyViolationWithIdOnly = await prisma.propertyViolation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PropertyViolationCreateManyAndReturnArgs>(args?: SelectSubset<T, PropertyViolationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PropertyViolation.
     * @param {PropertyViolationDeleteArgs} args - Arguments to delete one PropertyViolation.
     * @example
     * // Delete one PropertyViolation
     * const PropertyViolation = await prisma.propertyViolation.delete({
     *   where: {
     *     // ... filter to delete one PropertyViolation
     *   }
     * })
     * 
     */
    delete<T extends PropertyViolationDeleteArgs>(args: SelectSubset<T, PropertyViolationDeleteArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PropertyViolation.
     * @param {PropertyViolationUpdateArgs} args - Arguments to update one PropertyViolation.
     * @example
     * // Update one PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PropertyViolationUpdateArgs>(args: SelectSubset<T, PropertyViolationUpdateArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PropertyViolations.
     * @param {PropertyViolationDeleteManyArgs} args - Arguments to filter PropertyViolations to delete.
     * @example
     * // Delete a few PropertyViolations
     * const { count } = await prisma.propertyViolation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PropertyViolationDeleteManyArgs>(args?: SelectSubset<T, PropertyViolationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropertyViolations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropertyViolations
     * const propertyViolation = await prisma.propertyViolation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PropertyViolationUpdateManyArgs>(args: SelectSubset<T, PropertyViolationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PropertyViolation.
     * @param {PropertyViolationUpsertArgs} args - Arguments to update or create a PropertyViolation.
     * @example
     * // Update or create a PropertyViolation
     * const propertyViolation = await prisma.propertyViolation.upsert({
     *   create: {
     *     // ... data to create a PropertyViolation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropertyViolation we want to update
     *   }
     * })
     */
    upsert<T extends PropertyViolationUpsertArgs>(args: SelectSubset<T, PropertyViolationUpsertArgs<ExtArgs>>): Prisma__PropertyViolationClient<$Result.GetResult<Prisma.$PropertyViolationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PropertyViolations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationCountArgs} args - Arguments to filter PropertyViolations to count.
     * @example
     * // Count the number of PropertyViolations
     * const count = await prisma.propertyViolation.count({
     *   where: {
     *     // ... the filter for the PropertyViolations we want to count
     *   }
     * })
    **/
    count<T extends PropertyViolationCountArgs>(
      args?: Subset<T, PropertyViolationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyViolationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropertyViolation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyViolationAggregateArgs>(args: Subset<T, PropertyViolationAggregateArgs>): Prisma.PrismaPromise<GetPropertyViolationAggregateType<T>>

    /**
     * Group by PropertyViolation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyViolationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyViolationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyViolationGroupByArgs['orderBy'] }
        : { orderBy?: PropertyViolationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyViolationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyViolationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PropertyViolation model
   */
  readonly fields: PropertyViolationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PropertyViolation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyViolationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PropertyViolation model
   */ 
  interface PropertyViolationFieldRefs {
    readonly id: FieldRef<"PropertyViolation", 'String'>
    readonly property_address: FieldRef<"PropertyViolation", 'String'>
    readonly violation_type: FieldRef<"PropertyViolation", 'String'>
    readonly severity_score: FieldRef<"PropertyViolation", 'Int'>
    readonly repeat_offender: FieldRef<"PropertyViolation", 'Boolean'>
    readonly financial_burden: FieldRef<"PropertyViolation", 'Float'>
    readonly compliance_deadline: FieldRef<"PropertyViolation", 'DateTime'>
    readonly enforcement_stage: FieldRef<"PropertyViolation", 'String'>
    readonly deal_potential: FieldRef<"PropertyViolation", 'Int'>
    readonly created_at: FieldRef<"PropertyViolation", 'DateTime'>
    readonly updated_at: FieldRef<"PropertyViolation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PropertyViolation findUnique
   */
  export type PropertyViolationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter, which PropertyViolation to fetch.
     */
    where: PropertyViolationWhereUniqueInput
  }

  /**
   * PropertyViolation findUniqueOrThrow
   */
  export type PropertyViolationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter, which PropertyViolation to fetch.
     */
    where: PropertyViolationWhereUniqueInput
  }

  /**
   * PropertyViolation findFirst
   */
  export type PropertyViolationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter, which PropertyViolation to fetch.
     */
    where?: PropertyViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyViolations to fetch.
     */
    orderBy?: PropertyViolationOrderByWithRelationInput | PropertyViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyViolations.
     */
    cursor?: PropertyViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyViolations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyViolations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyViolations.
     */
    distinct?: PropertyViolationScalarFieldEnum | PropertyViolationScalarFieldEnum[]
  }

  /**
   * PropertyViolation findFirstOrThrow
   */
  export type PropertyViolationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter, which PropertyViolation to fetch.
     */
    where?: PropertyViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyViolations to fetch.
     */
    orderBy?: PropertyViolationOrderByWithRelationInput | PropertyViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyViolations.
     */
    cursor?: PropertyViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyViolations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyViolations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyViolations.
     */
    distinct?: PropertyViolationScalarFieldEnum | PropertyViolationScalarFieldEnum[]
  }

  /**
   * PropertyViolation findMany
   */
  export type PropertyViolationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter, which PropertyViolations to fetch.
     */
    where?: PropertyViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyViolations to fetch.
     */
    orderBy?: PropertyViolationOrderByWithRelationInput | PropertyViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PropertyViolations.
     */
    cursor?: PropertyViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyViolations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyViolations.
     */
    skip?: number
    distinct?: PropertyViolationScalarFieldEnum | PropertyViolationScalarFieldEnum[]
  }

  /**
   * PropertyViolation create
   */
  export type PropertyViolationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * The data needed to create a PropertyViolation.
     */
    data: XOR<PropertyViolationCreateInput, PropertyViolationUncheckedCreateInput>
  }

  /**
   * PropertyViolation createMany
   */
  export type PropertyViolationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PropertyViolations.
     */
    data: PropertyViolationCreateManyInput | PropertyViolationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PropertyViolation createManyAndReturn
   */
  export type PropertyViolationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PropertyViolations.
     */
    data: PropertyViolationCreateManyInput | PropertyViolationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PropertyViolation update
   */
  export type PropertyViolationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * The data needed to update a PropertyViolation.
     */
    data: XOR<PropertyViolationUpdateInput, PropertyViolationUncheckedUpdateInput>
    /**
     * Choose, which PropertyViolation to update.
     */
    where: PropertyViolationWhereUniqueInput
  }

  /**
   * PropertyViolation updateMany
   */
  export type PropertyViolationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PropertyViolations.
     */
    data: XOR<PropertyViolationUpdateManyMutationInput, PropertyViolationUncheckedUpdateManyInput>
    /**
     * Filter which PropertyViolations to update
     */
    where?: PropertyViolationWhereInput
  }

  /**
   * PropertyViolation upsert
   */
  export type PropertyViolationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * The filter to search for the PropertyViolation to update in case it exists.
     */
    where: PropertyViolationWhereUniqueInput
    /**
     * In case the PropertyViolation found by the `where` argument doesn't exist, create a new PropertyViolation with this data.
     */
    create: XOR<PropertyViolationCreateInput, PropertyViolationUncheckedCreateInput>
    /**
     * In case the PropertyViolation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyViolationUpdateInput, PropertyViolationUncheckedUpdateInput>
  }

  /**
   * PropertyViolation delete
   */
  export type PropertyViolationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
    /**
     * Filter which PropertyViolation to delete.
     */
    where: PropertyViolationWhereUniqueInput
  }

  /**
   * PropertyViolation deleteMany
   */
  export type PropertyViolationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyViolations to delete
     */
    where?: PropertyViolationWhereInput
  }

  /**
   * PropertyViolation without action
   */
  export type PropertyViolationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyViolation
     */
    select?: PropertyViolationSelect<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    target_count: number | null
    sent_count: number | null
    response_rate: number | null
  }

  export type CampaignSumAggregateOutputType = {
    target_count: number | null
    sent_count: number | null
    response_rate: number | null
  }

  export type CampaignMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    status: string | null
    target_count: number | null
    sent_count: number | null
    response_rate: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    status: string | null
    target_count: number | null
    sent_count: number | null
    response_rate: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    name: number
    type: number
    status: number
    target_count: number
    sent_count: number
    response_rate: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    target_count?: true
    sent_count?: true
    response_rate?: true
  }

  export type CampaignSumAggregateInputType = {
    target_count?: true
    sent_count?: true
    response_rate?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    status?: true
    target_count?: true
    sent_count?: true
    response_rate?: true
    created_at?: true
    updated_at?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    status?: true
    target_count?: true
    sent_count?: true
    response_rate?: true
    created_at?: true
    updated_at?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    status?: true
    target_count?: true
    sent_count?: true
    response_rate?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: string
    name: string
    type: string
    status: string
    target_count: number
    sent_count: number
    response_rate: number
    created_at: Date
    updated_at: Date
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    status?: boolean
    target_count?: boolean
    sent_count?: boolean
    response_rate?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    status?: boolean
    target_count?: boolean
    sent_count?: boolean
    response_rate?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    status?: boolean
    target_count?: boolean
    sent_count?: boolean
    response_rate?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      status: string
      target_count: number
      sent_count: number
      response_rate: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */ 
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'String'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly type: FieldRef<"Campaign", 'String'>
    readonly status: FieldRef<"Campaign", 'String'>
    readonly target_count: FieldRef<"Campaign", 'Int'>
    readonly sent_count: FieldRef<"Campaign", 'Int'>
    readonly response_rate: FieldRef<"Campaign", 'Float'>
    readonly created_at: FieldRef<"Campaign", 'DateTime'>
    readonly updated_at: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    lead_id: string | null
    method: string | null
    status: string | null
    notes: string | null
    scheduled_at: Date | null
    completed_at: Date | null
    created_at: Date | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    lead_id: string | null
    method: string | null
    status: string | null
    notes: string | null
    scheduled_at: Date | null
    completed_at: Date | null
    created_at: Date | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    lead_id: number
    method: number
    status: number
    notes: number
    scheduled_at: number
    completed_at: number
    created_at: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    lead_id?: true
    method?: true
    status?: true
    notes?: true
    scheduled_at?: true
    completed_at?: true
    created_at?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    lead_id?: true
    method?: true
    status?: true
    notes?: true
    scheduled_at?: true
    completed_at?: true
    created_at?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    lead_id?: true
    method?: true
    status?: true
    notes?: true
    scheduled_at?: true
    completed_at?: true
    created_at?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    lead_id: string | null
    method: string
    status: string
    notes: string | null
    scheduled_at: Date | null
    completed_at: Date | null
    created_at: Date
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    method?: boolean
    status?: boolean
    notes?: boolean
    scheduled_at?: boolean
    completed_at?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    method?: boolean
    status?: boolean
    notes?: boolean
    scheduled_at?: boolean
    completed_at?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    lead_id?: boolean
    method?: boolean
    status?: boolean
    notes?: boolean
    scheduled_at?: boolean
    completed_at?: boolean
    created_at?: boolean
  }


  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lead_id: string | null
      method: string
      status: string
      notes: string | null
      scheduled_at: Date | null
      completed_at: Date | null
      created_at: Date
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly lead_id: FieldRef<"Contact", 'String'>
    readonly method: FieldRef<"Contact", 'String'>
    readonly status: FieldRef<"Contact", 'String'>
    readonly notes: FieldRef<"Contact", 'String'>
    readonly scheduled_at: FieldRef<"Contact", 'DateTime'>
    readonly completed_at: FieldRef<"Contact", 'DateTime'>
    readonly created_at: FieldRef<"Contact", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
  }


  /**
   * Model DealAnalysis
   */

  export type AggregateDealAnalysis = {
    _count: DealAnalysisCountAggregateOutputType | null
    _avg: DealAnalysisAvgAggregateOutputType | null
    _sum: DealAnalysisSumAggregateOutputType | null
    _min: DealAnalysisMinAggregateOutputType | null
    _max: DealAnalysisMaxAggregateOutputType | null
  }

  export type DealAnalysisAvgAggregateOutputType = {
    arv: number | null
    budget: number | null
    total_investment: number | null
    net_profit: number | null
    roi_pct: number | null
    risk_score: number | null
  }

  export type DealAnalysisSumAggregateOutputType = {
    arv: number | null
    budget: number | null
    total_investment: number | null
    net_profit: number | null
    roi_pct: number | null
    risk_score: number | null
  }

  export type DealAnalysisMinAggregateOutputType = {
    id: string | null
    lead_id: string | null
    analysis_json: string | null
    arv: number | null
    budget: number | null
    total_investment: number | null
    net_profit: number | null
    roi_pct: number | null
    risk_score: number | null
    recommendation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DealAnalysisMaxAggregateOutputType = {
    id: string | null
    lead_id: string | null
    analysis_json: string | null
    arv: number | null
    budget: number | null
    total_investment: number | null
    net_profit: number | null
    roi_pct: number | null
    risk_score: number | null
    recommendation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DealAnalysisCountAggregateOutputType = {
    id: number
    lead_id: number
    analysis_json: number
    arv: number
    budget: number
    total_investment: number
    net_profit: number
    roi_pct: number
    risk_score: number
    recommendation: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DealAnalysisAvgAggregateInputType = {
    arv?: true
    budget?: true
    total_investment?: true
    net_profit?: true
    roi_pct?: true
    risk_score?: true
  }

  export type DealAnalysisSumAggregateInputType = {
    arv?: true
    budget?: true
    total_investment?: true
    net_profit?: true
    roi_pct?: true
    risk_score?: true
  }

  export type DealAnalysisMinAggregateInputType = {
    id?: true
    lead_id?: true
    analysis_json?: true
    arv?: true
    budget?: true
    total_investment?: true
    net_profit?: true
    roi_pct?: true
    risk_score?: true
    recommendation?: true
    created_at?: true
    updated_at?: true
  }

  export type DealAnalysisMaxAggregateInputType = {
    id?: true
    lead_id?: true
    analysis_json?: true
    arv?: true
    budget?: true
    total_investment?: true
    net_profit?: true
    roi_pct?: true
    risk_score?: true
    recommendation?: true
    created_at?: true
    updated_at?: true
  }

  export type DealAnalysisCountAggregateInputType = {
    id?: true
    lead_id?: true
    analysis_json?: true
    arv?: true
    budget?: true
    total_investment?: true
    net_profit?: true
    roi_pct?: true
    risk_score?: true
    recommendation?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DealAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealAnalysis to aggregate.
     */
    where?: DealAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealAnalyses to fetch.
     */
    orderBy?: DealAnalysisOrderByWithRelationInput | DealAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DealAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DealAnalyses
    **/
    _count?: true | DealAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DealAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DealAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealAnalysisMaxAggregateInputType
  }

  export type GetDealAnalysisAggregateType<T extends DealAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateDealAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDealAnalysis[P]>
      : GetScalarType<T[P], AggregateDealAnalysis[P]>
  }




  export type DealAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealAnalysisWhereInput
    orderBy?: DealAnalysisOrderByWithAggregationInput | DealAnalysisOrderByWithAggregationInput[]
    by: DealAnalysisScalarFieldEnum[] | DealAnalysisScalarFieldEnum
    having?: DealAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealAnalysisCountAggregateInputType | true
    _avg?: DealAnalysisAvgAggregateInputType
    _sum?: DealAnalysisSumAggregateInputType
    _min?: DealAnalysisMinAggregateInputType
    _max?: DealAnalysisMaxAggregateInputType
  }

  export type DealAnalysisGroupByOutputType = {
    id: string
    lead_id: string
    analysis_json: string
    arv: number | null
    budget: number | null
    total_investment: number | null
    net_profit: number | null
    roi_pct: number | null
    risk_score: number | null
    recommendation: string | null
    created_at: Date
    updated_at: Date
    _count: DealAnalysisCountAggregateOutputType | null
    _avg: DealAnalysisAvgAggregateOutputType | null
    _sum: DealAnalysisSumAggregateOutputType | null
    _min: DealAnalysisMinAggregateOutputType | null
    _max: DealAnalysisMaxAggregateOutputType | null
  }

  type GetDealAnalysisGroupByPayload<T extends DealAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DealAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], DealAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type DealAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    analysis_json?: boolean
    arv?: boolean
    budget?: boolean
    total_investment?: boolean
    net_profit?: boolean
    roi_pct?: boolean
    risk_score?: boolean
    recommendation?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["dealAnalysis"]>

  export type DealAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    analysis_json?: boolean
    arv?: boolean
    budget?: boolean
    total_investment?: boolean
    net_profit?: boolean
    roi_pct?: boolean
    risk_score?: boolean
    recommendation?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["dealAnalysis"]>

  export type DealAnalysisSelectScalar = {
    id?: boolean
    lead_id?: boolean
    analysis_json?: boolean
    arv?: boolean
    budget?: boolean
    total_investment?: boolean
    net_profit?: boolean
    roi_pct?: boolean
    risk_score?: boolean
    recommendation?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type $DealAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DealAnalysis"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lead_id: string
      analysis_json: string
      arv: number | null
      budget: number | null
      total_investment: number | null
      net_profit: number | null
      roi_pct: number | null
      risk_score: number | null
      recommendation: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["dealAnalysis"]>
    composites: {}
  }

  type DealAnalysisGetPayload<S extends boolean | null | undefined | DealAnalysisDefaultArgs> = $Result.GetResult<Prisma.$DealAnalysisPayload, S>

  type DealAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DealAnalysisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DealAnalysisCountAggregateInputType | true
    }

  export interface DealAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DealAnalysis'], meta: { name: 'DealAnalysis' } }
    /**
     * Find zero or one DealAnalysis that matches the filter.
     * @param {DealAnalysisFindUniqueArgs} args - Arguments to find a DealAnalysis
     * @example
     * // Get one DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DealAnalysisFindUniqueArgs>(args: SelectSubset<T, DealAnalysisFindUniqueArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DealAnalysis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DealAnalysisFindUniqueOrThrowArgs} args - Arguments to find a DealAnalysis
     * @example
     * // Get one DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DealAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, DealAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DealAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisFindFirstArgs} args - Arguments to find a DealAnalysis
     * @example
     * // Get one DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DealAnalysisFindFirstArgs>(args?: SelectSubset<T, DealAnalysisFindFirstArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DealAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisFindFirstOrThrowArgs} args - Arguments to find a DealAnalysis
     * @example
     * // Get one DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DealAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, DealAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DealAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DealAnalyses
     * const dealAnalyses = await prisma.dealAnalysis.findMany()
     * 
     * // Get first 10 DealAnalyses
     * const dealAnalyses = await prisma.dealAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealAnalysisWithIdOnly = await prisma.dealAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DealAnalysisFindManyArgs>(args?: SelectSubset<T, DealAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DealAnalysis.
     * @param {DealAnalysisCreateArgs} args - Arguments to create a DealAnalysis.
     * @example
     * // Create one DealAnalysis
     * const DealAnalysis = await prisma.dealAnalysis.create({
     *   data: {
     *     // ... data to create a DealAnalysis
     *   }
     * })
     * 
     */
    create<T extends DealAnalysisCreateArgs>(args: SelectSubset<T, DealAnalysisCreateArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DealAnalyses.
     * @param {DealAnalysisCreateManyArgs} args - Arguments to create many DealAnalyses.
     * @example
     * // Create many DealAnalyses
     * const dealAnalysis = await prisma.dealAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DealAnalysisCreateManyArgs>(args?: SelectSubset<T, DealAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DealAnalyses and returns the data saved in the database.
     * @param {DealAnalysisCreateManyAndReturnArgs} args - Arguments to create many DealAnalyses.
     * @example
     * // Create many DealAnalyses
     * const dealAnalysis = await prisma.dealAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DealAnalyses and only return the `id`
     * const dealAnalysisWithIdOnly = await prisma.dealAnalysis.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DealAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, DealAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DealAnalysis.
     * @param {DealAnalysisDeleteArgs} args - Arguments to delete one DealAnalysis.
     * @example
     * // Delete one DealAnalysis
     * const DealAnalysis = await prisma.dealAnalysis.delete({
     *   where: {
     *     // ... filter to delete one DealAnalysis
     *   }
     * })
     * 
     */
    delete<T extends DealAnalysisDeleteArgs>(args: SelectSubset<T, DealAnalysisDeleteArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DealAnalysis.
     * @param {DealAnalysisUpdateArgs} args - Arguments to update one DealAnalysis.
     * @example
     * // Update one DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DealAnalysisUpdateArgs>(args: SelectSubset<T, DealAnalysisUpdateArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DealAnalyses.
     * @param {DealAnalysisDeleteManyArgs} args - Arguments to filter DealAnalyses to delete.
     * @example
     * // Delete a few DealAnalyses
     * const { count } = await prisma.dealAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DealAnalysisDeleteManyArgs>(args?: SelectSubset<T, DealAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DealAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DealAnalyses
     * const dealAnalysis = await prisma.dealAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DealAnalysisUpdateManyArgs>(args: SelectSubset<T, DealAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DealAnalysis.
     * @param {DealAnalysisUpsertArgs} args - Arguments to update or create a DealAnalysis.
     * @example
     * // Update or create a DealAnalysis
     * const dealAnalysis = await prisma.dealAnalysis.upsert({
     *   create: {
     *     // ... data to create a DealAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DealAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends DealAnalysisUpsertArgs>(args: SelectSubset<T, DealAnalysisUpsertArgs<ExtArgs>>): Prisma__DealAnalysisClient<$Result.GetResult<Prisma.$DealAnalysisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DealAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisCountArgs} args - Arguments to filter DealAnalyses to count.
     * @example
     * // Count the number of DealAnalyses
     * const count = await prisma.dealAnalysis.count({
     *   where: {
     *     // ... the filter for the DealAnalyses we want to count
     *   }
     * })
    **/
    count<T extends DealAnalysisCountArgs>(
      args?: Subset<T, DealAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DealAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealAnalysisAggregateArgs>(args: Subset<T, DealAnalysisAggregateArgs>): Prisma.PrismaPromise<GetDealAnalysisAggregateType<T>>

    /**
     * Group by DealAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DealAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DealAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: DealAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DealAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DealAnalysis model
   */
  readonly fields: DealAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DealAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DealAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DealAnalysis model
   */ 
  interface DealAnalysisFieldRefs {
    readonly id: FieldRef<"DealAnalysis", 'String'>
    readonly lead_id: FieldRef<"DealAnalysis", 'String'>
    readonly analysis_json: FieldRef<"DealAnalysis", 'String'>
    readonly arv: FieldRef<"DealAnalysis", 'Float'>
    readonly budget: FieldRef<"DealAnalysis", 'Float'>
    readonly total_investment: FieldRef<"DealAnalysis", 'Float'>
    readonly net_profit: FieldRef<"DealAnalysis", 'Float'>
    readonly roi_pct: FieldRef<"DealAnalysis", 'Float'>
    readonly risk_score: FieldRef<"DealAnalysis", 'Int'>
    readonly recommendation: FieldRef<"DealAnalysis", 'String'>
    readonly created_at: FieldRef<"DealAnalysis", 'DateTime'>
    readonly updated_at: FieldRef<"DealAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DealAnalysis findUnique
   */
  export type DealAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which DealAnalysis to fetch.
     */
    where: DealAnalysisWhereUniqueInput
  }

  /**
   * DealAnalysis findUniqueOrThrow
   */
  export type DealAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which DealAnalysis to fetch.
     */
    where: DealAnalysisWhereUniqueInput
  }

  /**
   * DealAnalysis findFirst
   */
  export type DealAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which DealAnalysis to fetch.
     */
    where?: DealAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealAnalyses to fetch.
     */
    orderBy?: DealAnalysisOrderByWithRelationInput | DealAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealAnalyses.
     */
    cursor?: DealAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealAnalyses.
     */
    distinct?: DealAnalysisScalarFieldEnum | DealAnalysisScalarFieldEnum[]
  }

  /**
   * DealAnalysis findFirstOrThrow
   */
  export type DealAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which DealAnalysis to fetch.
     */
    where?: DealAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealAnalyses to fetch.
     */
    orderBy?: DealAnalysisOrderByWithRelationInput | DealAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealAnalyses.
     */
    cursor?: DealAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealAnalyses.
     */
    distinct?: DealAnalysisScalarFieldEnum | DealAnalysisScalarFieldEnum[]
  }

  /**
   * DealAnalysis findMany
   */
  export type DealAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which DealAnalyses to fetch.
     */
    where?: DealAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealAnalyses to fetch.
     */
    orderBy?: DealAnalysisOrderByWithRelationInput | DealAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DealAnalyses.
     */
    cursor?: DealAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealAnalyses.
     */
    skip?: number
    distinct?: DealAnalysisScalarFieldEnum | DealAnalysisScalarFieldEnum[]
  }

  /**
   * DealAnalysis create
   */
  export type DealAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * The data needed to create a DealAnalysis.
     */
    data: XOR<DealAnalysisCreateInput, DealAnalysisUncheckedCreateInput>
  }

  /**
   * DealAnalysis createMany
   */
  export type DealAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DealAnalyses.
     */
    data: DealAnalysisCreateManyInput | DealAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DealAnalysis createManyAndReturn
   */
  export type DealAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DealAnalyses.
     */
    data: DealAnalysisCreateManyInput | DealAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DealAnalysis update
   */
  export type DealAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * The data needed to update a DealAnalysis.
     */
    data: XOR<DealAnalysisUpdateInput, DealAnalysisUncheckedUpdateInput>
    /**
     * Choose, which DealAnalysis to update.
     */
    where: DealAnalysisWhereUniqueInput
  }

  /**
   * DealAnalysis updateMany
   */
  export type DealAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DealAnalyses.
     */
    data: XOR<DealAnalysisUpdateManyMutationInput, DealAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which DealAnalyses to update
     */
    where?: DealAnalysisWhereInput
  }

  /**
   * DealAnalysis upsert
   */
  export type DealAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * The filter to search for the DealAnalysis to update in case it exists.
     */
    where: DealAnalysisWhereUniqueInput
    /**
     * In case the DealAnalysis found by the `where` argument doesn't exist, create a new DealAnalysis with this data.
     */
    create: XOR<DealAnalysisCreateInput, DealAnalysisUncheckedCreateInput>
    /**
     * In case the DealAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DealAnalysisUpdateInput, DealAnalysisUncheckedUpdateInput>
  }

  /**
   * DealAnalysis delete
   */
  export type DealAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
    /**
     * Filter which DealAnalysis to delete.
     */
    where: DealAnalysisWhereUniqueInput
  }

  /**
   * DealAnalysis deleteMany
   */
  export type DealAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealAnalyses to delete
     */
    where?: DealAnalysisWhereInput
  }

  /**
   * DealAnalysis without action
   */
  export type DealAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealAnalysis
     */
    select?: DealAnalysisSelect<ExtArgs> | null
  }


  /**
   * Model ScrapingJob
   */

  export type AggregateScrapingJob = {
    _count: ScrapingJobCountAggregateOutputType | null
    _avg: ScrapingJobAvgAggregateOutputType | null
    _sum: ScrapingJobSumAggregateOutputType | null
    _min: ScrapingJobMinAggregateOutputType | null
    _max: ScrapingJobMaxAggregateOutputType | null
  }

  export type ScrapingJobAvgAggregateOutputType = {
    resultsCount: number | null
  }

  export type ScrapingJobSumAggregateOutputType = {
    resultsCount: number | null
  }

  export type ScrapingJobMinAggregateOutputType = {
    id: string | null
    source: string | null
    status: string | null
    config: string | null
    startedAt: Date | null
    completedAt: Date | null
    logs: string | null
    resultsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingJobMaxAggregateOutputType = {
    id: string | null
    source: string | null
    status: string | null
    config: string | null
    startedAt: Date | null
    completedAt: Date | null
    logs: string | null
    resultsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingJobCountAggregateOutputType = {
    id: number
    source: number
    status: number
    config: number
    startedAt: number
    completedAt: number
    logs: number
    resultsCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScrapingJobAvgAggregateInputType = {
    resultsCount?: true
  }

  export type ScrapingJobSumAggregateInputType = {
    resultsCount?: true
  }

  export type ScrapingJobMinAggregateInputType = {
    id?: true
    source?: true
    status?: true
    config?: true
    startedAt?: true
    completedAt?: true
    logs?: true
    resultsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingJobMaxAggregateInputType = {
    id?: true
    source?: true
    status?: true
    config?: true
    startedAt?: true
    completedAt?: true
    logs?: true
    resultsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingJobCountAggregateInputType = {
    id?: true
    source?: true
    status?: true
    config?: true
    startedAt?: true
    completedAt?: true
    logs?: true
    resultsCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScrapingJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingJob to aggregate.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapingJobs
    **/
    _count?: true | ScrapingJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScrapingJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScrapingJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapingJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapingJobMaxAggregateInputType
  }

  export type GetScrapingJobAggregateType<T extends ScrapingJobAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapingJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapingJob[P]>
      : GetScalarType<T[P], AggregateScrapingJob[P]>
  }




  export type ScrapingJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapingJobWhereInput
    orderBy?: ScrapingJobOrderByWithAggregationInput | ScrapingJobOrderByWithAggregationInput[]
    by: ScrapingJobScalarFieldEnum[] | ScrapingJobScalarFieldEnum
    having?: ScrapingJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapingJobCountAggregateInputType | true
    _avg?: ScrapingJobAvgAggregateInputType
    _sum?: ScrapingJobSumAggregateInputType
    _min?: ScrapingJobMinAggregateInputType
    _max?: ScrapingJobMaxAggregateInputType
  }

  export type ScrapingJobGroupByOutputType = {
    id: string
    source: string
    status: string
    config: string
    startedAt: Date
    completedAt: Date | null
    logs: string | null
    resultsCount: number
    createdAt: Date
    updatedAt: Date
    _count: ScrapingJobCountAggregateOutputType | null
    _avg: ScrapingJobAvgAggregateOutputType | null
    _sum: ScrapingJobSumAggregateOutputType | null
    _min: ScrapingJobMinAggregateOutputType | null
    _max: ScrapingJobMaxAggregateOutputType | null
  }

  type GetScrapingJobGroupByPayload<T extends ScrapingJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScrapingJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapingJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapingJobGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapingJobGroupByOutputType[P]>
        }
      >
    >


  export type ScrapingJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    status?: boolean
    config?: boolean
    startedAt?: boolean
    completedAt?: boolean
    logs?: boolean
    resultsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    propertyRecords?: boolean | ScrapingJob$propertyRecordsArgs<ExtArgs>
    _count?: boolean | ScrapingJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scrapingJob"]>

  export type ScrapingJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    status?: boolean
    config?: boolean
    startedAt?: boolean
    completedAt?: boolean
    logs?: boolean
    resultsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scrapingJob"]>

  export type ScrapingJobSelectScalar = {
    id?: boolean
    source?: boolean
    status?: boolean
    config?: boolean
    startedAt?: boolean
    completedAt?: boolean
    logs?: boolean
    resultsCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScrapingJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propertyRecords?: boolean | ScrapingJob$propertyRecordsArgs<ExtArgs>
    _count?: boolean | ScrapingJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScrapingJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ScrapingJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScrapingJob"
    objects: {
      propertyRecords: Prisma.$PropertyRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: string
      status: string
      config: string
      startedAt: Date
      completedAt: Date | null
      logs: string | null
      resultsCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scrapingJob"]>
    composites: {}
  }

  type ScrapingJobGetPayload<S extends boolean | null | undefined | ScrapingJobDefaultArgs> = $Result.GetResult<Prisma.$ScrapingJobPayload, S>

  type ScrapingJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScrapingJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScrapingJobCountAggregateInputType | true
    }

  export interface ScrapingJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapingJob'], meta: { name: 'ScrapingJob' } }
    /**
     * Find zero or one ScrapingJob that matches the filter.
     * @param {ScrapingJobFindUniqueArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScrapingJobFindUniqueArgs>(args: SelectSubset<T, ScrapingJobFindUniqueArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScrapingJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScrapingJobFindUniqueOrThrowArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScrapingJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ScrapingJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScrapingJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindFirstArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScrapingJobFindFirstArgs>(args?: SelectSubset<T, ScrapingJobFindFirstArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScrapingJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindFirstOrThrowArgs} args - Arguments to find a ScrapingJob
     * @example
     * // Get one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScrapingJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ScrapingJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScrapingJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapingJobs
     * const scrapingJobs = await prisma.scrapingJob.findMany()
     * 
     * // Get first 10 ScrapingJobs
     * const scrapingJobs = await prisma.scrapingJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapingJobWithIdOnly = await prisma.scrapingJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScrapingJobFindManyArgs>(args?: SelectSubset<T, ScrapingJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScrapingJob.
     * @param {ScrapingJobCreateArgs} args - Arguments to create a ScrapingJob.
     * @example
     * // Create one ScrapingJob
     * const ScrapingJob = await prisma.scrapingJob.create({
     *   data: {
     *     // ... data to create a ScrapingJob
     *   }
     * })
     * 
     */
    create<T extends ScrapingJobCreateArgs>(args: SelectSubset<T, ScrapingJobCreateArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScrapingJobs.
     * @param {ScrapingJobCreateManyArgs} args - Arguments to create many ScrapingJobs.
     * @example
     * // Create many ScrapingJobs
     * const scrapingJob = await prisma.scrapingJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScrapingJobCreateManyArgs>(args?: SelectSubset<T, ScrapingJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScrapingJobs and returns the data saved in the database.
     * @param {ScrapingJobCreateManyAndReturnArgs} args - Arguments to create many ScrapingJobs.
     * @example
     * // Create many ScrapingJobs
     * const scrapingJob = await prisma.scrapingJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScrapingJobs and only return the `id`
     * const scrapingJobWithIdOnly = await prisma.scrapingJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScrapingJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ScrapingJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScrapingJob.
     * @param {ScrapingJobDeleteArgs} args - Arguments to delete one ScrapingJob.
     * @example
     * // Delete one ScrapingJob
     * const ScrapingJob = await prisma.scrapingJob.delete({
     *   where: {
     *     // ... filter to delete one ScrapingJob
     *   }
     * })
     * 
     */
    delete<T extends ScrapingJobDeleteArgs>(args: SelectSubset<T, ScrapingJobDeleteArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScrapingJob.
     * @param {ScrapingJobUpdateArgs} args - Arguments to update one ScrapingJob.
     * @example
     * // Update one ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScrapingJobUpdateArgs>(args: SelectSubset<T, ScrapingJobUpdateArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScrapingJobs.
     * @param {ScrapingJobDeleteManyArgs} args - Arguments to filter ScrapingJobs to delete.
     * @example
     * // Delete a few ScrapingJobs
     * const { count } = await prisma.scrapingJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScrapingJobDeleteManyArgs>(args?: SelectSubset<T, ScrapingJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapingJobs
     * const scrapingJob = await prisma.scrapingJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScrapingJobUpdateManyArgs>(args: SelectSubset<T, ScrapingJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScrapingJob.
     * @param {ScrapingJobUpsertArgs} args - Arguments to update or create a ScrapingJob.
     * @example
     * // Update or create a ScrapingJob
     * const scrapingJob = await prisma.scrapingJob.upsert({
     *   create: {
     *     // ... data to create a ScrapingJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapingJob we want to update
     *   }
     * })
     */
    upsert<T extends ScrapingJobUpsertArgs>(args: SelectSubset<T, ScrapingJobUpsertArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScrapingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobCountArgs} args - Arguments to filter ScrapingJobs to count.
     * @example
     * // Count the number of ScrapingJobs
     * const count = await prisma.scrapingJob.count({
     *   where: {
     *     // ... the filter for the ScrapingJobs we want to count
     *   }
     * })
    **/
    count<T extends ScrapingJobCountArgs>(
      args?: Subset<T, ScrapingJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapingJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapingJobAggregateArgs>(args: Subset<T, ScrapingJobAggregateArgs>): Prisma.PrismaPromise<GetScrapingJobAggregateType<T>>

    /**
     * Group by ScrapingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapingJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapingJobGroupByArgs['orderBy'] }
        : { orderBy?: ScrapingJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapingJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapingJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScrapingJob model
   */
  readonly fields: ScrapingJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapingJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScrapingJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    propertyRecords<T extends ScrapingJob$propertyRecordsArgs<ExtArgs> = {}>(args?: Subset<T, ScrapingJob$propertyRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScrapingJob model
   */ 
  interface ScrapingJobFieldRefs {
    readonly id: FieldRef<"ScrapingJob", 'String'>
    readonly source: FieldRef<"ScrapingJob", 'String'>
    readonly status: FieldRef<"ScrapingJob", 'String'>
    readonly config: FieldRef<"ScrapingJob", 'String'>
    readonly startedAt: FieldRef<"ScrapingJob", 'DateTime'>
    readonly completedAt: FieldRef<"ScrapingJob", 'DateTime'>
    readonly logs: FieldRef<"ScrapingJob", 'String'>
    readonly resultsCount: FieldRef<"ScrapingJob", 'Int'>
    readonly createdAt: FieldRef<"ScrapingJob", 'DateTime'>
    readonly updatedAt: FieldRef<"ScrapingJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScrapingJob findUnique
   */
  export type ScrapingJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob findUniqueOrThrow
   */
  export type ScrapingJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob findFirst
   */
  export type ScrapingJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingJobs.
     */
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob findFirstOrThrow
   */
  export type ScrapingJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJob to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingJobs.
     */
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob findMany
   */
  export type ScrapingJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapingJobs to fetch.
     */
    where?: ScrapingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingJobs to fetch.
     */
    orderBy?: ScrapingJobOrderByWithRelationInput | ScrapingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapingJobs.
     */
    cursor?: ScrapingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingJobs.
     */
    skip?: number
    distinct?: ScrapingJobScalarFieldEnum | ScrapingJobScalarFieldEnum[]
  }

  /**
   * ScrapingJob create
   */
  export type ScrapingJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ScrapingJob.
     */
    data: XOR<ScrapingJobCreateInput, ScrapingJobUncheckedCreateInput>
  }

  /**
   * ScrapingJob createMany
   */
  export type ScrapingJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapingJobs.
     */
    data: ScrapingJobCreateManyInput | ScrapingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapingJob createManyAndReturn
   */
  export type ScrapingJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScrapingJobs.
     */
    data: ScrapingJobCreateManyInput | ScrapingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapingJob update
   */
  export type ScrapingJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ScrapingJob.
     */
    data: XOR<ScrapingJobUpdateInput, ScrapingJobUncheckedUpdateInput>
    /**
     * Choose, which ScrapingJob to update.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob updateMany
   */
  export type ScrapingJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapingJobs.
     */
    data: XOR<ScrapingJobUpdateManyMutationInput, ScrapingJobUncheckedUpdateManyInput>
    /**
     * Filter which ScrapingJobs to update
     */
    where?: ScrapingJobWhereInput
  }

  /**
   * ScrapingJob upsert
   */
  export type ScrapingJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ScrapingJob to update in case it exists.
     */
    where: ScrapingJobWhereUniqueInput
    /**
     * In case the ScrapingJob found by the `where` argument doesn't exist, create a new ScrapingJob with this data.
     */
    create: XOR<ScrapingJobCreateInput, ScrapingJobUncheckedCreateInput>
    /**
     * In case the ScrapingJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapingJobUpdateInput, ScrapingJobUncheckedUpdateInput>
  }

  /**
   * ScrapingJob delete
   */
  export type ScrapingJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    /**
     * Filter which ScrapingJob to delete.
     */
    where: ScrapingJobWhereUniqueInput
  }

  /**
   * ScrapingJob deleteMany
   */
  export type ScrapingJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingJobs to delete
     */
    where?: ScrapingJobWhereInput
  }

  /**
   * ScrapingJob.propertyRecords
   */
  export type ScrapingJob$propertyRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    where?: PropertyRecordWhereInput
    orderBy?: PropertyRecordOrderByWithRelationInput | PropertyRecordOrderByWithRelationInput[]
    cursor?: PropertyRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyRecordScalarFieldEnum | PropertyRecordScalarFieldEnum[]
  }

  /**
   * ScrapingJob without action
   */
  export type ScrapingJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
  }


  /**
   * Model PropertyRecord
   */

  export type AggregatePropertyRecord = {
    _count: PropertyRecordCountAggregateOutputType | null
    _min: PropertyRecordMinAggregateOutputType | null
    _max: PropertyRecordMaxAggregateOutputType | null
  }

  export type PropertyRecordMinAggregateOutputType = {
    id: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    source: string | null
    rawData: string | null
    processed: boolean | null
    scrapingJobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyRecordMaxAggregateOutputType = {
    id: string | null
    address: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    source: string | null
    rawData: string | null
    processed: boolean | null
    scrapingJobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyRecordCountAggregateOutputType = {
    id: number
    address: number
    city: number
    state: number
    zipCode: number
    source: number
    rawData: number
    processed: number
    scrapingJobId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PropertyRecordMinAggregateInputType = {
    id?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    source?: true
    rawData?: true
    processed?: true
    scrapingJobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyRecordMaxAggregateInputType = {
    id?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    source?: true
    rawData?: true
    processed?: true
    scrapingJobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyRecordCountAggregateInputType = {
    id?: true
    address?: true
    city?: true
    state?: true
    zipCode?: true
    source?: true
    rawData?: true
    processed?: true
    scrapingJobId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PropertyRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyRecord to aggregate.
     */
    where?: PropertyRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyRecords to fetch.
     */
    orderBy?: PropertyRecordOrderByWithRelationInput | PropertyRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PropertyRecords
    **/
    _count?: true | PropertyRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyRecordMaxAggregateInputType
  }

  export type GetPropertyRecordAggregateType<T extends PropertyRecordAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyRecord[P]>
      : GetScalarType<T[P], AggregatePropertyRecord[P]>
  }




  export type PropertyRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyRecordWhereInput
    orderBy?: PropertyRecordOrderByWithAggregationInput | PropertyRecordOrderByWithAggregationInput[]
    by: PropertyRecordScalarFieldEnum[] | PropertyRecordScalarFieldEnum
    having?: PropertyRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyRecordCountAggregateInputType | true
    _min?: PropertyRecordMinAggregateInputType
    _max?: PropertyRecordMaxAggregateInputType
  }

  export type PropertyRecordGroupByOutputType = {
    id: string
    address: string
    city: string | null
    state: string | null
    zipCode: string | null
    source: string
    rawData: string
    processed: boolean
    scrapingJobId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PropertyRecordCountAggregateOutputType | null
    _min: PropertyRecordMinAggregateOutputType | null
    _max: PropertyRecordMaxAggregateOutputType | null
  }

  type GetPropertyRecordGroupByPayload<T extends PropertyRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyRecordGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyRecordGroupByOutputType[P]>
        }
      >
    >


  export type PropertyRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    source?: boolean
    rawData?: boolean
    processed?: boolean
    scrapingJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scrapingJob?: boolean | PropertyRecord$scrapingJobArgs<ExtArgs>
  }, ExtArgs["result"]["propertyRecord"]>

  export type PropertyRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    source?: boolean
    rawData?: boolean
    processed?: boolean
    scrapingJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scrapingJob?: boolean | PropertyRecord$scrapingJobArgs<ExtArgs>
  }, ExtArgs["result"]["propertyRecord"]>

  export type PropertyRecordSelectScalar = {
    id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    source?: boolean
    rawData?: boolean
    processed?: boolean
    scrapingJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PropertyRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scrapingJob?: boolean | PropertyRecord$scrapingJobArgs<ExtArgs>
  }
  export type PropertyRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scrapingJob?: boolean | PropertyRecord$scrapingJobArgs<ExtArgs>
  }

  export type $PropertyRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PropertyRecord"
    objects: {
      scrapingJob: Prisma.$ScrapingJobPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      city: string | null
      state: string | null
      zipCode: string | null
      source: string
      rawData: string
      processed: boolean
      scrapingJobId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["propertyRecord"]>
    composites: {}
  }

  type PropertyRecordGetPayload<S extends boolean | null | undefined | PropertyRecordDefaultArgs> = $Result.GetResult<Prisma.$PropertyRecordPayload, S>

  type PropertyRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyRecordCountAggregateInputType | true
    }

  export interface PropertyRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PropertyRecord'], meta: { name: 'PropertyRecord' } }
    /**
     * Find zero or one PropertyRecord that matches the filter.
     * @param {PropertyRecordFindUniqueArgs} args - Arguments to find a PropertyRecord
     * @example
     * // Get one PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PropertyRecordFindUniqueArgs>(args: SelectSubset<T, PropertyRecordFindUniqueArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PropertyRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyRecordFindUniqueOrThrowArgs} args - Arguments to find a PropertyRecord
     * @example
     * // Get one PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PropertyRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, PropertyRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PropertyRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordFindFirstArgs} args - Arguments to find a PropertyRecord
     * @example
     * // Get one PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PropertyRecordFindFirstArgs>(args?: SelectSubset<T, PropertyRecordFindFirstArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PropertyRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordFindFirstOrThrowArgs} args - Arguments to find a PropertyRecord
     * @example
     * // Get one PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PropertyRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, PropertyRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PropertyRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropertyRecords
     * const propertyRecords = await prisma.propertyRecord.findMany()
     * 
     * // Get first 10 PropertyRecords
     * const propertyRecords = await prisma.propertyRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyRecordWithIdOnly = await prisma.propertyRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PropertyRecordFindManyArgs>(args?: SelectSubset<T, PropertyRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PropertyRecord.
     * @param {PropertyRecordCreateArgs} args - Arguments to create a PropertyRecord.
     * @example
     * // Create one PropertyRecord
     * const PropertyRecord = await prisma.propertyRecord.create({
     *   data: {
     *     // ... data to create a PropertyRecord
     *   }
     * })
     * 
     */
    create<T extends PropertyRecordCreateArgs>(args: SelectSubset<T, PropertyRecordCreateArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PropertyRecords.
     * @param {PropertyRecordCreateManyArgs} args - Arguments to create many PropertyRecords.
     * @example
     * // Create many PropertyRecords
     * const propertyRecord = await prisma.propertyRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PropertyRecordCreateManyArgs>(args?: SelectSubset<T, PropertyRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PropertyRecords and returns the data saved in the database.
     * @param {PropertyRecordCreateManyAndReturnArgs} args - Arguments to create many PropertyRecords.
     * @example
     * // Create many PropertyRecords
     * const propertyRecord = await prisma.propertyRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PropertyRecords and only return the `id`
     * const propertyRecordWithIdOnly = await prisma.propertyRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PropertyRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, PropertyRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PropertyRecord.
     * @param {PropertyRecordDeleteArgs} args - Arguments to delete one PropertyRecord.
     * @example
     * // Delete one PropertyRecord
     * const PropertyRecord = await prisma.propertyRecord.delete({
     *   where: {
     *     // ... filter to delete one PropertyRecord
     *   }
     * })
     * 
     */
    delete<T extends PropertyRecordDeleteArgs>(args: SelectSubset<T, PropertyRecordDeleteArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PropertyRecord.
     * @param {PropertyRecordUpdateArgs} args - Arguments to update one PropertyRecord.
     * @example
     * // Update one PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PropertyRecordUpdateArgs>(args: SelectSubset<T, PropertyRecordUpdateArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PropertyRecords.
     * @param {PropertyRecordDeleteManyArgs} args - Arguments to filter PropertyRecords to delete.
     * @example
     * // Delete a few PropertyRecords
     * const { count } = await prisma.propertyRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PropertyRecordDeleteManyArgs>(args?: SelectSubset<T, PropertyRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropertyRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropertyRecords
     * const propertyRecord = await prisma.propertyRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PropertyRecordUpdateManyArgs>(args: SelectSubset<T, PropertyRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PropertyRecord.
     * @param {PropertyRecordUpsertArgs} args - Arguments to update or create a PropertyRecord.
     * @example
     * // Update or create a PropertyRecord
     * const propertyRecord = await prisma.propertyRecord.upsert({
     *   create: {
     *     // ... data to create a PropertyRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropertyRecord we want to update
     *   }
     * })
     */
    upsert<T extends PropertyRecordUpsertArgs>(args: SelectSubset<T, PropertyRecordUpsertArgs<ExtArgs>>): Prisma__PropertyRecordClient<$Result.GetResult<Prisma.$PropertyRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PropertyRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordCountArgs} args - Arguments to filter PropertyRecords to count.
     * @example
     * // Count the number of PropertyRecords
     * const count = await prisma.propertyRecord.count({
     *   where: {
     *     // ... the filter for the PropertyRecords we want to count
     *   }
     * })
    **/
    count<T extends PropertyRecordCountArgs>(
      args?: Subset<T, PropertyRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropertyRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyRecordAggregateArgs>(args: Subset<T, PropertyRecordAggregateArgs>): Prisma.PrismaPromise<GetPropertyRecordAggregateType<T>>

    /**
     * Group by PropertyRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyRecordGroupByArgs['orderBy'] }
        : { orderBy?: PropertyRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PropertyRecord model
   */
  readonly fields: PropertyRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PropertyRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scrapingJob<T extends PropertyRecord$scrapingJobArgs<ExtArgs> = {}>(args?: Subset<T, PropertyRecord$scrapingJobArgs<ExtArgs>>): Prisma__ScrapingJobClient<$Result.GetResult<Prisma.$ScrapingJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PropertyRecord model
   */ 
  interface PropertyRecordFieldRefs {
    readonly id: FieldRef<"PropertyRecord", 'String'>
    readonly address: FieldRef<"PropertyRecord", 'String'>
    readonly city: FieldRef<"PropertyRecord", 'String'>
    readonly state: FieldRef<"PropertyRecord", 'String'>
    readonly zipCode: FieldRef<"PropertyRecord", 'String'>
    readonly source: FieldRef<"PropertyRecord", 'String'>
    readonly rawData: FieldRef<"PropertyRecord", 'String'>
    readonly processed: FieldRef<"PropertyRecord", 'Boolean'>
    readonly scrapingJobId: FieldRef<"PropertyRecord", 'String'>
    readonly createdAt: FieldRef<"PropertyRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"PropertyRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PropertyRecord findUnique
   */
  export type PropertyRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter, which PropertyRecord to fetch.
     */
    where: PropertyRecordWhereUniqueInput
  }

  /**
   * PropertyRecord findUniqueOrThrow
   */
  export type PropertyRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter, which PropertyRecord to fetch.
     */
    where: PropertyRecordWhereUniqueInput
  }

  /**
   * PropertyRecord findFirst
   */
  export type PropertyRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter, which PropertyRecord to fetch.
     */
    where?: PropertyRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyRecords to fetch.
     */
    orderBy?: PropertyRecordOrderByWithRelationInput | PropertyRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyRecords.
     */
    cursor?: PropertyRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyRecords.
     */
    distinct?: PropertyRecordScalarFieldEnum | PropertyRecordScalarFieldEnum[]
  }

  /**
   * PropertyRecord findFirstOrThrow
   */
  export type PropertyRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter, which PropertyRecord to fetch.
     */
    where?: PropertyRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyRecords to fetch.
     */
    orderBy?: PropertyRecordOrderByWithRelationInput | PropertyRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyRecords.
     */
    cursor?: PropertyRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyRecords.
     */
    distinct?: PropertyRecordScalarFieldEnum | PropertyRecordScalarFieldEnum[]
  }

  /**
   * PropertyRecord findMany
   */
  export type PropertyRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter, which PropertyRecords to fetch.
     */
    where?: PropertyRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyRecords to fetch.
     */
    orderBy?: PropertyRecordOrderByWithRelationInput | PropertyRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PropertyRecords.
     */
    cursor?: PropertyRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyRecords.
     */
    skip?: number
    distinct?: PropertyRecordScalarFieldEnum | PropertyRecordScalarFieldEnum[]
  }

  /**
   * PropertyRecord create
   */
  export type PropertyRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a PropertyRecord.
     */
    data: XOR<PropertyRecordCreateInput, PropertyRecordUncheckedCreateInput>
  }

  /**
   * PropertyRecord createMany
   */
  export type PropertyRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PropertyRecords.
     */
    data: PropertyRecordCreateManyInput | PropertyRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PropertyRecord createManyAndReturn
   */
  export type PropertyRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PropertyRecords.
     */
    data: PropertyRecordCreateManyInput | PropertyRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PropertyRecord update
   */
  export type PropertyRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a PropertyRecord.
     */
    data: XOR<PropertyRecordUpdateInput, PropertyRecordUncheckedUpdateInput>
    /**
     * Choose, which PropertyRecord to update.
     */
    where: PropertyRecordWhereUniqueInput
  }

  /**
   * PropertyRecord updateMany
   */
  export type PropertyRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PropertyRecords.
     */
    data: XOR<PropertyRecordUpdateManyMutationInput, PropertyRecordUncheckedUpdateManyInput>
    /**
     * Filter which PropertyRecords to update
     */
    where?: PropertyRecordWhereInput
  }

  /**
   * PropertyRecord upsert
   */
  export type PropertyRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the PropertyRecord to update in case it exists.
     */
    where: PropertyRecordWhereUniqueInput
    /**
     * In case the PropertyRecord found by the `where` argument doesn't exist, create a new PropertyRecord with this data.
     */
    create: XOR<PropertyRecordCreateInput, PropertyRecordUncheckedCreateInput>
    /**
     * In case the PropertyRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyRecordUpdateInput, PropertyRecordUncheckedUpdateInput>
  }

  /**
   * PropertyRecord delete
   */
  export type PropertyRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
    /**
     * Filter which PropertyRecord to delete.
     */
    where: PropertyRecordWhereUniqueInput
  }

  /**
   * PropertyRecord deleteMany
   */
  export type PropertyRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyRecords to delete
     */
    where?: PropertyRecordWhereInput
  }

  /**
   * PropertyRecord.scrapingJob
   */
  export type PropertyRecord$scrapingJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingJob
     */
    select?: ScrapingJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapingJobInclude<ExtArgs> | null
    where?: ScrapingJobWhereInput
  }

  /**
   * PropertyRecord without action
   */
  export type PropertyRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyRecord
     */
    select?: PropertyRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyRecordInclude<ExtArgs> | null
  }


  /**
   * Model ScrapingSchedule
   */

  export type AggregateScrapingSchedule = {
    _count: ScrapingScheduleCountAggregateOutputType | null
    _min: ScrapingScheduleMinAggregateOutputType | null
    _max: ScrapingScheduleMaxAggregateOutputType | null
  }

  export type ScrapingScheduleMinAggregateOutputType = {
    id: string | null
    enabled: boolean | null
    frequency: string | null
    time: string | null
    day: string | null
    sources: string | null
    zipCodes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingScheduleMaxAggregateOutputType = {
    id: string | null
    enabled: boolean | null
    frequency: string | null
    time: string | null
    day: string | null
    sources: string | null
    zipCodes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapingScheduleCountAggregateOutputType = {
    id: number
    enabled: number
    frequency: number
    time: number
    day: number
    sources: number
    zipCodes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScrapingScheduleMinAggregateInputType = {
    id?: true
    enabled?: true
    frequency?: true
    time?: true
    day?: true
    sources?: true
    zipCodes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingScheduleMaxAggregateInputType = {
    id?: true
    enabled?: true
    frequency?: true
    time?: true
    day?: true
    sources?: true
    zipCodes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapingScheduleCountAggregateInputType = {
    id?: true
    enabled?: true
    frequency?: true
    time?: true
    day?: true
    sources?: true
    zipCodes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScrapingScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingSchedule to aggregate.
     */
    where?: ScrapingScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingSchedules to fetch.
     */
    orderBy?: ScrapingScheduleOrderByWithRelationInput | ScrapingScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapingScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapingSchedules
    **/
    _count?: true | ScrapingScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapingScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapingScheduleMaxAggregateInputType
  }

  export type GetScrapingScheduleAggregateType<T extends ScrapingScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapingSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapingSchedule[P]>
      : GetScalarType<T[P], AggregateScrapingSchedule[P]>
  }




  export type ScrapingScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapingScheduleWhereInput
    orderBy?: ScrapingScheduleOrderByWithAggregationInput | ScrapingScheduleOrderByWithAggregationInput[]
    by: ScrapingScheduleScalarFieldEnum[] | ScrapingScheduleScalarFieldEnum
    having?: ScrapingScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapingScheduleCountAggregateInputType | true
    _min?: ScrapingScheduleMinAggregateInputType
    _max?: ScrapingScheduleMaxAggregateInputType
  }

  export type ScrapingScheduleGroupByOutputType = {
    id: string
    enabled: boolean
    frequency: string | null
    time: string | null
    day: string | null
    sources: string
    zipCodes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ScrapingScheduleCountAggregateOutputType | null
    _min: ScrapingScheduleMinAggregateOutputType | null
    _max: ScrapingScheduleMaxAggregateOutputType | null
  }

  type GetScrapingScheduleGroupByPayload<T extends ScrapingScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScrapingScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapingScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapingScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapingScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScrapingScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enabled?: boolean
    frequency?: boolean
    time?: boolean
    day?: boolean
    sources?: boolean
    zipCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scrapingSchedule"]>

  export type ScrapingScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enabled?: boolean
    frequency?: boolean
    time?: boolean
    day?: boolean
    sources?: boolean
    zipCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scrapingSchedule"]>

  export type ScrapingScheduleSelectScalar = {
    id?: boolean
    enabled?: boolean
    frequency?: boolean
    time?: boolean
    day?: boolean
    sources?: boolean
    zipCodes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ScrapingSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScrapingSchedule"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      enabled: boolean
      frequency: string | null
      time: string | null
      day: string | null
      sources: string
      zipCodes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scrapingSchedule"]>
    composites: {}
  }

  type ScrapingScheduleGetPayload<S extends boolean | null | undefined | ScrapingScheduleDefaultArgs> = $Result.GetResult<Prisma.$ScrapingSchedulePayload, S>

  type ScrapingScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScrapingScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScrapingScheduleCountAggregateInputType | true
    }

  export interface ScrapingScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapingSchedule'], meta: { name: 'ScrapingSchedule' } }
    /**
     * Find zero or one ScrapingSchedule that matches the filter.
     * @param {ScrapingScheduleFindUniqueArgs} args - Arguments to find a ScrapingSchedule
     * @example
     * // Get one ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScrapingScheduleFindUniqueArgs>(args: SelectSubset<T, ScrapingScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScrapingSchedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScrapingScheduleFindUniqueOrThrowArgs} args - Arguments to find a ScrapingSchedule
     * @example
     * // Get one ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScrapingScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScrapingScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScrapingSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleFindFirstArgs} args - Arguments to find a ScrapingSchedule
     * @example
     * // Get one ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScrapingScheduleFindFirstArgs>(args?: SelectSubset<T, ScrapingScheduleFindFirstArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScrapingSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleFindFirstOrThrowArgs} args - Arguments to find a ScrapingSchedule
     * @example
     * // Get one ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScrapingScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScrapingScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScrapingSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapingSchedules
     * const scrapingSchedules = await prisma.scrapingSchedule.findMany()
     * 
     * // Get first 10 ScrapingSchedules
     * const scrapingSchedules = await prisma.scrapingSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapingScheduleWithIdOnly = await prisma.scrapingSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScrapingScheduleFindManyArgs>(args?: SelectSubset<T, ScrapingScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScrapingSchedule.
     * @param {ScrapingScheduleCreateArgs} args - Arguments to create a ScrapingSchedule.
     * @example
     * // Create one ScrapingSchedule
     * const ScrapingSchedule = await prisma.scrapingSchedule.create({
     *   data: {
     *     // ... data to create a ScrapingSchedule
     *   }
     * })
     * 
     */
    create<T extends ScrapingScheduleCreateArgs>(args: SelectSubset<T, ScrapingScheduleCreateArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScrapingSchedules.
     * @param {ScrapingScheduleCreateManyArgs} args - Arguments to create many ScrapingSchedules.
     * @example
     * // Create many ScrapingSchedules
     * const scrapingSchedule = await prisma.scrapingSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScrapingScheduleCreateManyArgs>(args?: SelectSubset<T, ScrapingScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScrapingSchedules and returns the data saved in the database.
     * @param {ScrapingScheduleCreateManyAndReturnArgs} args - Arguments to create many ScrapingSchedules.
     * @example
     * // Create many ScrapingSchedules
     * const scrapingSchedule = await prisma.scrapingSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScrapingSchedules and only return the `id`
     * const scrapingScheduleWithIdOnly = await prisma.scrapingSchedule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScrapingScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScrapingScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScrapingSchedule.
     * @param {ScrapingScheduleDeleteArgs} args - Arguments to delete one ScrapingSchedule.
     * @example
     * // Delete one ScrapingSchedule
     * const ScrapingSchedule = await prisma.scrapingSchedule.delete({
     *   where: {
     *     // ... filter to delete one ScrapingSchedule
     *   }
     * })
     * 
     */
    delete<T extends ScrapingScheduleDeleteArgs>(args: SelectSubset<T, ScrapingScheduleDeleteArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScrapingSchedule.
     * @param {ScrapingScheduleUpdateArgs} args - Arguments to update one ScrapingSchedule.
     * @example
     * // Update one ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScrapingScheduleUpdateArgs>(args: SelectSubset<T, ScrapingScheduleUpdateArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScrapingSchedules.
     * @param {ScrapingScheduleDeleteManyArgs} args - Arguments to filter ScrapingSchedules to delete.
     * @example
     * // Delete a few ScrapingSchedules
     * const { count } = await prisma.scrapingSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScrapingScheduleDeleteManyArgs>(args?: SelectSubset<T, ScrapingScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapingSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapingSchedules
     * const scrapingSchedule = await prisma.scrapingSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScrapingScheduleUpdateManyArgs>(args: SelectSubset<T, ScrapingScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScrapingSchedule.
     * @param {ScrapingScheduleUpsertArgs} args - Arguments to update or create a ScrapingSchedule.
     * @example
     * // Update or create a ScrapingSchedule
     * const scrapingSchedule = await prisma.scrapingSchedule.upsert({
     *   create: {
     *     // ... data to create a ScrapingSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapingSchedule we want to update
     *   }
     * })
     */
    upsert<T extends ScrapingScheduleUpsertArgs>(args: SelectSubset<T, ScrapingScheduleUpsertArgs<ExtArgs>>): Prisma__ScrapingScheduleClient<$Result.GetResult<Prisma.$ScrapingSchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScrapingSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleCountArgs} args - Arguments to filter ScrapingSchedules to count.
     * @example
     * // Count the number of ScrapingSchedules
     * const count = await prisma.scrapingSchedule.count({
     *   where: {
     *     // ... the filter for the ScrapingSchedules we want to count
     *   }
     * })
    **/
    count<T extends ScrapingScheduleCountArgs>(
      args?: Subset<T, ScrapingScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapingScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapingSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapingScheduleAggregateArgs>(args: Subset<T, ScrapingScheduleAggregateArgs>): Prisma.PrismaPromise<GetScrapingScheduleAggregateType<T>>

    /**
     * Group by ScrapingSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapingScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapingScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapingScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScrapingScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapingScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapingScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScrapingSchedule model
   */
  readonly fields: ScrapingScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapingSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScrapingScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScrapingSchedule model
   */ 
  interface ScrapingScheduleFieldRefs {
    readonly id: FieldRef<"ScrapingSchedule", 'String'>
    readonly enabled: FieldRef<"ScrapingSchedule", 'Boolean'>
    readonly frequency: FieldRef<"ScrapingSchedule", 'String'>
    readonly time: FieldRef<"ScrapingSchedule", 'String'>
    readonly day: FieldRef<"ScrapingSchedule", 'String'>
    readonly sources: FieldRef<"ScrapingSchedule", 'String'>
    readonly zipCodes: FieldRef<"ScrapingSchedule", 'String'>
    readonly createdAt: FieldRef<"ScrapingSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"ScrapingSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScrapingSchedule findUnique
   */
  export type ScrapingScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter, which ScrapingSchedule to fetch.
     */
    where: ScrapingScheduleWhereUniqueInput
  }

  /**
   * ScrapingSchedule findUniqueOrThrow
   */
  export type ScrapingScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter, which ScrapingSchedule to fetch.
     */
    where: ScrapingScheduleWhereUniqueInput
  }

  /**
   * ScrapingSchedule findFirst
   */
  export type ScrapingScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter, which ScrapingSchedule to fetch.
     */
    where?: ScrapingScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingSchedules to fetch.
     */
    orderBy?: ScrapingScheduleOrderByWithRelationInput | ScrapingScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingSchedules.
     */
    cursor?: ScrapingScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingSchedules.
     */
    distinct?: ScrapingScheduleScalarFieldEnum | ScrapingScheduleScalarFieldEnum[]
  }

  /**
   * ScrapingSchedule findFirstOrThrow
   */
  export type ScrapingScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter, which ScrapingSchedule to fetch.
     */
    where?: ScrapingScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingSchedules to fetch.
     */
    orderBy?: ScrapingScheduleOrderByWithRelationInput | ScrapingScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapingSchedules.
     */
    cursor?: ScrapingScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapingSchedules.
     */
    distinct?: ScrapingScheduleScalarFieldEnum | ScrapingScheduleScalarFieldEnum[]
  }

  /**
   * ScrapingSchedule findMany
   */
  export type ScrapingScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter, which ScrapingSchedules to fetch.
     */
    where?: ScrapingScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapingSchedules to fetch.
     */
    orderBy?: ScrapingScheduleOrderByWithRelationInput | ScrapingScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapingSchedules.
     */
    cursor?: ScrapingScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapingSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapingSchedules.
     */
    skip?: number
    distinct?: ScrapingScheduleScalarFieldEnum | ScrapingScheduleScalarFieldEnum[]
  }

  /**
   * ScrapingSchedule create
   */
  export type ScrapingScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * The data needed to create a ScrapingSchedule.
     */
    data: XOR<ScrapingScheduleCreateInput, ScrapingScheduleUncheckedCreateInput>
  }

  /**
   * ScrapingSchedule createMany
   */
  export type ScrapingScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapingSchedules.
     */
    data: ScrapingScheduleCreateManyInput | ScrapingScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapingSchedule createManyAndReturn
   */
  export type ScrapingScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScrapingSchedules.
     */
    data: ScrapingScheduleCreateManyInput | ScrapingScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapingSchedule update
   */
  export type ScrapingScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * The data needed to update a ScrapingSchedule.
     */
    data: XOR<ScrapingScheduleUpdateInput, ScrapingScheduleUncheckedUpdateInput>
    /**
     * Choose, which ScrapingSchedule to update.
     */
    where: ScrapingScheduleWhereUniqueInput
  }

  /**
   * ScrapingSchedule updateMany
   */
  export type ScrapingScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapingSchedules.
     */
    data: XOR<ScrapingScheduleUpdateManyMutationInput, ScrapingScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ScrapingSchedules to update
     */
    where?: ScrapingScheduleWhereInput
  }

  /**
   * ScrapingSchedule upsert
   */
  export type ScrapingScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * The filter to search for the ScrapingSchedule to update in case it exists.
     */
    where: ScrapingScheduleWhereUniqueInput
    /**
     * In case the ScrapingSchedule found by the `where` argument doesn't exist, create a new ScrapingSchedule with this data.
     */
    create: XOR<ScrapingScheduleCreateInput, ScrapingScheduleUncheckedCreateInput>
    /**
     * In case the ScrapingSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapingScheduleUpdateInput, ScrapingScheduleUncheckedUpdateInput>
  }

  /**
   * ScrapingSchedule delete
   */
  export type ScrapingScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
    /**
     * Filter which ScrapingSchedule to delete.
     */
    where: ScrapingScheduleWhereUniqueInput
  }

  /**
   * ScrapingSchedule deleteMany
   */
  export type ScrapingScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapingSchedules to delete
     */
    where?: ScrapingScheduleWhereInput
  }

  /**
   * ScrapingSchedule without action
   */
  export type ScrapingScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapingSchedule
     */
    select?: ScrapingScheduleSelect<ExtArgs> | null
  }


  /**
   * Model ScraperJob
   */

  export type AggregateScraperJob = {
    _count: ScraperJobCountAggregateOutputType | null
    _avg: ScraperJobAvgAggregateOutputType | null
    _sum: ScraperJobSumAggregateOutputType | null
    _min: ScraperJobMinAggregateOutputType | null
    _max: ScraperJobMaxAggregateOutputType | null
  }

  export type ScraperJobAvgAggregateOutputType = {
    attempt: number | null
  }

  export type ScraperJobSumAggregateOutputType = {
    attempt: number | null
  }

  export type ScraperJobMinAggregateOutputType = {
    id: string | null
    source: $Enums.ScraperSource | null
    status: $Enums.JobStatus | null
    startedAt: Date | null
    finishedAt: Date | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
    attempt: number | null
  }

  export type ScraperJobMaxAggregateOutputType = {
    id: string | null
    source: $Enums.ScraperSource | null
    status: $Enums.JobStatus | null
    startedAt: Date | null
    finishedAt: Date | null
    error: string | null
    createdAt: Date | null
    updatedAt: Date | null
    attempt: number | null
  }

  export type ScraperJobCountAggregateOutputType = {
    id: number
    source: number
    inputPayload: number
    resultPayload: number
    status: number
    startedAt: number
    finishedAt: number
    error: number
    createdAt: number
    updatedAt: number
    attempt: number
    previousErrors: number
    _all: number
  }


  export type ScraperJobAvgAggregateInputType = {
    attempt?: true
  }

  export type ScraperJobSumAggregateInputType = {
    attempt?: true
  }

  export type ScraperJobMinAggregateInputType = {
    id?: true
    source?: true
    status?: true
    startedAt?: true
    finishedAt?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    attempt?: true
  }

  export type ScraperJobMaxAggregateInputType = {
    id?: true
    source?: true
    status?: true
    startedAt?: true
    finishedAt?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    attempt?: true
  }

  export type ScraperJobCountAggregateInputType = {
    id?: true
    source?: true
    inputPayload?: true
    resultPayload?: true
    status?: true
    startedAt?: true
    finishedAt?: true
    error?: true
    createdAt?: true
    updatedAt?: true
    attempt?: true
    previousErrors?: true
    _all?: true
  }

  export type ScraperJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperJob to aggregate.
     */
    where?: ScraperJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperJobs to fetch.
     */
    orderBy?: ScraperJobOrderByWithRelationInput | ScraperJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScraperJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScraperJobs
    **/
    _count?: true | ScraperJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScraperJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScraperJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScraperJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScraperJobMaxAggregateInputType
  }

  export type GetScraperJobAggregateType<T extends ScraperJobAggregateArgs> = {
        [P in keyof T & keyof AggregateScraperJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScraperJob[P]>
      : GetScalarType<T[P], AggregateScraperJob[P]>
  }




  export type ScraperJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScraperJobWhereInput
    orderBy?: ScraperJobOrderByWithAggregationInput | ScraperJobOrderByWithAggregationInput[]
    by: ScraperJobScalarFieldEnum[] | ScraperJobScalarFieldEnum
    having?: ScraperJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScraperJobCountAggregateInputType | true
    _avg?: ScraperJobAvgAggregateInputType
    _sum?: ScraperJobSumAggregateInputType
    _min?: ScraperJobMinAggregateInputType
    _max?: ScraperJobMaxAggregateInputType
  }

  export type ScraperJobGroupByOutputType = {
    id: string
    source: $Enums.ScraperSource
    inputPayload: JsonValue
    resultPayload: JsonValue | null
    status: $Enums.JobStatus
    startedAt: Date | null
    finishedAt: Date | null
    error: string | null
    createdAt: Date
    updatedAt: Date
    attempt: number
    previousErrors: JsonValue
    _count: ScraperJobCountAggregateOutputType | null
    _avg: ScraperJobAvgAggregateOutputType | null
    _sum: ScraperJobSumAggregateOutputType | null
    _min: ScraperJobMinAggregateOutputType | null
    _max: ScraperJobMaxAggregateOutputType | null
  }

  type GetScraperJobGroupByPayload<T extends ScraperJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScraperJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScraperJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScraperJobGroupByOutputType[P]>
            : GetScalarType<T[P], ScraperJobGroupByOutputType[P]>
        }
      >
    >


  export type ScraperJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    inputPayload?: boolean
    resultPayload?: boolean
    status?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attempt?: boolean
    previousErrors?: boolean
  }, ExtArgs["result"]["scraperJob"]>

  export type ScraperJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    inputPayload?: boolean
    resultPayload?: boolean
    status?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attempt?: boolean
    previousErrors?: boolean
  }, ExtArgs["result"]["scraperJob"]>

  export type ScraperJobSelectScalar = {
    id?: boolean
    source?: boolean
    inputPayload?: boolean
    resultPayload?: boolean
    status?: boolean
    startedAt?: boolean
    finishedAt?: boolean
    error?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attempt?: boolean
    previousErrors?: boolean
  }


  export type $ScraperJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScraperJob"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: $Enums.ScraperSource
      inputPayload: Prisma.JsonValue
      resultPayload: Prisma.JsonValue | null
      status: $Enums.JobStatus
      startedAt: Date | null
      finishedAt: Date | null
      error: string | null
      createdAt: Date
      updatedAt: Date
      attempt: number
      previousErrors: Prisma.JsonValue
    }, ExtArgs["result"]["scraperJob"]>
    composites: {}
  }

  type ScraperJobGetPayload<S extends boolean | null | undefined | ScraperJobDefaultArgs> = $Result.GetResult<Prisma.$ScraperJobPayload, S>

  type ScraperJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScraperJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScraperJobCountAggregateInputType | true
    }

  export interface ScraperJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScraperJob'], meta: { name: 'ScraperJob' } }
    /**
     * Find zero or one ScraperJob that matches the filter.
     * @param {ScraperJobFindUniqueArgs} args - Arguments to find a ScraperJob
     * @example
     * // Get one ScraperJob
     * const scraperJob = await prisma.scraperJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScraperJobFindUniqueArgs>(args: SelectSubset<T, ScraperJobFindUniqueArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScraperJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScraperJobFindUniqueOrThrowArgs} args - Arguments to find a ScraperJob
     * @example
     * // Get one ScraperJob
     * const scraperJob = await prisma.scraperJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScraperJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ScraperJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScraperJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobFindFirstArgs} args - Arguments to find a ScraperJob
     * @example
     * // Get one ScraperJob
     * const scraperJob = await prisma.scraperJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScraperJobFindFirstArgs>(args?: SelectSubset<T, ScraperJobFindFirstArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScraperJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobFindFirstOrThrowArgs} args - Arguments to find a ScraperJob
     * @example
     * // Get one ScraperJob
     * const scraperJob = await prisma.scraperJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScraperJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ScraperJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScraperJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScraperJobs
     * const scraperJobs = await prisma.scraperJob.findMany()
     * 
     * // Get first 10 ScraperJobs
     * const scraperJobs = await prisma.scraperJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scraperJobWithIdOnly = await prisma.scraperJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScraperJobFindManyArgs>(args?: SelectSubset<T, ScraperJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScraperJob.
     * @param {ScraperJobCreateArgs} args - Arguments to create a ScraperJob.
     * @example
     * // Create one ScraperJob
     * const ScraperJob = await prisma.scraperJob.create({
     *   data: {
     *     // ... data to create a ScraperJob
     *   }
     * })
     * 
     */
    create<T extends ScraperJobCreateArgs>(args: SelectSubset<T, ScraperJobCreateArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScraperJobs.
     * @param {ScraperJobCreateManyArgs} args - Arguments to create many ScraperJobs.
     * @example
     * // Create many ScraperJobs
     * const scraperJob = await prisma.scraperJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScraperJobCreateManyArgs>(args?: SelectSubset<T, ScraperJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScraperJobs and returns the data saved in the database.
     * @param {ScraperJobCreateManyAndReturnArgs} args - Arguments to create many ScraperJobs.
     * @example
     * // Create many ScraperJobs
     * const scraperJob = await prisma.scraperJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScraperJobs and only return the `id`
     * const scraperJobWithIdOnly = await prisma.scraperJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScraperJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ScraperJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScraperJob.
     * @param {ScraperJobDeleteArgs} args - Arguments to delete one ScraperJob.
     * @example
     * // Delete one ScraperJob
     * const ScraperJob = await prisma.scraperJob.delete({
     *   where: {
     *     // ... filter to delete one ScraperJob
     *   }
     * })
     * 
     */
    delete<T extends ScraperJobDeleteArgs>(args: SelectSubset<T, ScraperJobDeleteArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScraperJob.
     * @param {ScraperJobUpdateArgs} args - Arguments to update one ScraperJob.
     * @example
     * // Update one ScraperJob
     * const scraperJob = await prisma.scraperJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScraperJobUpdateArgs>(args: SelectSubset<T, ScraperJobUpdateArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScraperJobs.
     * @param {ScraperJobDeleteManyArgs} args - Arguments to filter ScraperJobs to delete.
     * @example
     * // Delete a few ScraperJobs
     * const { count } = await prisma.scraperJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScraperJobDeleteManyArgs>(args?: SelectSubset<T, ScraperJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScraperJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScraperJobs
     * const scraperJob = await prisma.scraperJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScraperJobUpdateManyArgs>(args: SelectSubset<T, ScraperJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScraperJob.
     * @param {ScraperJobUpsertArgs} args - Arguments to update or create a ScraperJob.
     * @example
     * // Update or create a ScraperJob
     * const scraperJob = await prisma.scraperJob.upsert({
     *   create: {
     *     // ... data to create a ScraperJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScraperJob we want to update
     *   }
     * })
     */
    upsert<T extends ScraperJobUpsertArgs>(args: SelectSubset<T, ScraperJobUpsertArgs<ExtArgs>>): Prisma__ScraperJobClient<$Result.GetResult<Prisma.$ScraperJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScraperJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobCountArgs} args - Arguments to filter ScraperJobs to count.
     * @example
     * // Count the number of ScraperJobs
     * const count = await prisma.scraperJob.count({
     *   where: {
     *     // ... the filter for the ScraperJobs we want to count
     *   }
     * })
    **/
    count<T extends ScraperJobCountArgs>(
      args?: Subset<T, ScraperJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScraperJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScraperJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScraperJobAggregateArgs>(args: Subset<T, ScraperJobAggregateArgs>): Prisma.PrismaPromise<GetScraperJobAggregateType<T>>

    /**
     * Group by ScraperJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScraperJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScraperJobGroupByArgs['orderBy'] }
        : { orderBy?: ScraperJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScraperJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScraperJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScraperJob model
   */
  readonly fields: ScraperJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScraperJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScraperJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScraperJob model
   */ 
  interface ScraperJobFieldRefs {
    readonly id: FieldRef<"ScraperJob", 'String'>
    readonly source: FieldRef<"ScraperJob", 'ScraperSource'>
    readonly inputPayload: FieldRef<"ScraperJob", 'Json'>
    readonly resultPayload: FieldRef<"ScraperJob", 'Json'>
    readonly status: FieldRef<"ScraperJob", 'JobStatus'>
    readonly startedAt: FieldRef<"ScraperJob", 'DateTime'>
    readonly finishedAt: FieldRef<"ScraperJob", 'DateTime'>
    readonly error: FieldRef<"ScraperJob", 'String'>
    readonly createdAt: FieldRef<"ScraperJob", 'DateTime'>
    readonly updatedAt: FieldRef<"ScraperJob", 'DateTime'>
    readonly attempt: FieldRef<"ScraperJob", 'Int'>
    readonly previousErrors: FieldRef<"ScraperJob", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ScraperJob findUnique
   */
  export type ScraperJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter, which ScraperJob to fetch.
     */
    where: ScraperJobWhereUniqueInput
  }

  /**
   * ScraperJob findUniqueOrThrow
   */
  export type ScraperJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter, which ScraperJob to fetch.
     */
    where: ScraperJobWhereUniqueInput
  }

  /**
   * ScraperJob findFirst
   */
  export type ScraperJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter, which ScraperJob to fetch.
     */
    where?: ScraperJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperJobs to fetch.
     */
    orderBy?: ScraperJobOrderByWithRelationInput | ScraperJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperJobs.
     */
    cursor?: ScraperJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperJobs.
     */
    distinct?: ScraperJobScalarFieldEnum | ScraperJobScalarFieldEnum[]
  }

  /**
   * ScraperJob findFirstOrThrow
   */
  export type ScraperJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter, which ScraperJob to fetch.
     */
    where?: ScraperJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperJobs to fetch.
     */
    orderBy?: ScraperJobOrderByWithRelationInput | ScraperJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperJobs.
     */
    cursor?: ScraperJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperJobs.
     */
    distinct?: ScraperJobScalarFieldEnum | ScraperJobScalarFieldEnum[]
  }

  /**
   * ScraperJob findMany
   */
  export type ScraperJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter, which ScraperJobs to fetch.
     */
    where?: ScraperJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperJobs to fetch.
     */
    orderBy?: ScraperJobOrderByWithRelationInput | ScraperJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScraperJobs.
     */
    cursor?: ScraperJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperJobs.
     */
    skip?: number
    distinct?: ScraperJobScalarFieldEnum | ScraperJobScalarFieldEnum[]
  }

  /**
   * ScraperJob create
   */
  export type ScraperJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * The data needed to create a ScraperJob.
     */
    data: XOR<ScraperJobCreateInput, ScraperJobUncheckedCreateInput>
  }

  /**
   * ScraperJob createMany
   */
  export type ScraperJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScraperJobs.
     */
    data: ScraperJobCreateManyInput | ScraperJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScraperJob createManyAndReturn
   */
  export type ScraperJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScraperJobs.
     */
    data: ScraperJobCreateManyInput | ScraperJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScraperJob update
   */
  export type ScraperJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * The data needed to update a ScraperJob.
     */
    data: XOR<ScraperJobUpdateInput, ScraperJobUncheckedUpdateInput>
    /**
     * Choose, which ScraperJob to update.
     */
    where: ScraperJobWhereUniqueInput
  }

  /**
   * ScraperJob updateMany
   */
  export type ScraperJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScraperJobs.
     */
    data: XOR<ScraperJobUpdateManyMutationInput, ScraperJobUncheckedUpdateManyInput>
    /**
     * Filter which ScraperJobs to update
     */
    where?: ScraperJobWhereInput
  }

  /**
   * ScraperJob upsert
   */
  export type ScraperJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * The filter to search for the ScraperJob to update in case it exists.
     */
    where: ScraperJobWhereUniqueInput
    /**
     * In case the ScraperJob found by the `where` argument doesn't exist, create a new ScraperJob with this data.
     */
    create: XOR<ScraperJobCreateInput, ScraperJobUncheckedCreateInput>
    /**
     * In case the ScraperJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScraperJobUpdateInput, ScraperJobUncheckedUpdateInput>
  }

  /**
   * ScraperJob delete
   */
  export type ScraperJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
    /**
     * Filter which ScraperJob to delete.
     */
    where: ScraperJobWhereUniqueInput
  }

  /**
   * ScraperJob deleteMany
   */
  export type ScraperJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperJobs to delete
     */
    where?: ScraperJobWhereInput
  }

  /**
   * ScraperJob without action
   */
  export type ScraperJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperJob
     */
    select?: ScraperJobSelect<ExtArgs> | null
  }


  /**
   * Model ScrapedProperty
   */

  export type AggregateScrapedProperty = {
    _count: ScrapedPropertyCountAggregateOutputType | null
    _avg: ScrapedPropertyAvgAggregateOutputType | null
    _sum: ScrapedPropertySumAggregateOutputType | null
    _min: ScrapedPropertyMinAggregateOutputType | null
    _max: ScrapedPropertyMaxAggregateOutputType | null
  }

  export type ScrapedPropertyAvgAggregateOutputType = {
    price: number | null
    beds: number | null
    sqft: number | null
    investmentScore: number | null
  }

  export type ScrapedPropertySumAggregateOutputType = {
    price: number | null
    beds: number | null
    sqft: number | null
    investmentScore: number | null
  }

  export type ScrapedPropertyMinAggregateOutputType = {
    id: string | null
    source: $Enums.ScraperSource | null
    zip: string | null
    address: string | null
    price: number | null
    beds: number | null
    sqft: number | null
    propertyType: string | null
    link: string | null
    imageUrl: string | null
    investmentScore: number | null
    condition: $Enums.PropertyCondition | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapedPropertyMaxAggregateOutputType = {
    id: string | null
    source: $Enums.ScraperSource | null
    zip: string | null
    address: string | null
    price: number | null
    beds: number | null
    sqft: number | null
    propertyType: string | null
    link: string | null
    imageUrl: string | null
    investmentScore: number | null
    condition: $Enums.PropertyCondition | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScrapedPropertyCountAggregateOutputType = {
    id: number
    source: number
    zip: number
    address: number
    price: number
    beds: number
    sqft: number
    propertyType: number
    link: number
    imageUrl: number
    data: number
    enrichmentTags: number
    investmentScore: number
    condition: number
    reasons: number
    tagReasons: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScrapedPropertyAvgAggregateInputType = {
    price?: true
    beds?: true
    sqft?: true
    investmentScore?: true
  }

  export type ScrapedPropertySumAggregateInputType = {
    price?: true
    beds?: true
    sqft?: true
    investmentScore?: true
  }

  export type ScrapedPropertyMinAggregateInputType = {
    id?: true
    source?: true
    zip?: true
    address?: true
    price?: true
    beds?: true
    sqft?: true
    propertyType?: true
    link?: true
    imageUrl?: true
    investmentScore?: true
    condition?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapedPropertyMaxAggregateInputType = {
    id?: true
    source?: true
    zip?: true
    address?: true
    price?: true
    beds?: true
    sqft?: true
    propertyType?: true
    link?: true
    imageUrl?: true
    investmentScore?: true
    condition?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScrapedPropertyCountAggregateInputType = {
    id?: true
    source?: true
    zip?: true
    address?: true
    price?: true
    beds?: true
    sqft?: true
    propertyType?: true
    link?: true
    imageUrl?: true
    data?: true
    enrichmentTags?: true
    investmentScore?: true
    condition?: true
    reasons?: true
    tagReasons?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScrapedPropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapedProperty to aggregate.
     */
    where?: ScrapedPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedProperties to fetch.
     */
    orderBy?: ScrapedPropertyOrderByWithRelationInput | ScrapedPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapedPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapedProperties
    **/
    _count?: true | ScrapedPropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScrapedPropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScrapedPropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapedPropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapedPropertyMaxAggregateInputType
  }

  export type GetScrapedPropertyAggregateType<T extends ScrapedPropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapedProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapedProperty[P]>
      : GetScalarType<T[P], AggregateScrapedProperty[P]>
  }




  export type ScrapedPropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapedPropertyWhereInput
    orderBy?: ScrapedPropertyOrderByWithAggregationInput | ScrapedPropertyOrderByWithAggregationInput[]
    by: ScrapedPropertyScalarFieldEnum[] | ScrapedPropertyScalarFieldEnum
    having?: ScrapedPropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapedPropertyCountAggregateInputType | true
    _avg?: ScrapedPropertyAvgAggregateInputType
    _sum?: ScrapedPropertySumAggregateInputType
    _min?: ScrapedPropertyMinAggregateInputType
    _max?: ScrapedPropertyMaxAggregateInputType
  }

  export type ScrapedPropertyGroupByOutputType = {
    id: string
    source: $Enums.ScraperSource
    zip: string
    address: string
    price: number | null
    beds: number | null
    sqft: number | null
    propertyType: string | null
    link: string | null
    imageUrl: string | null
    data: JsonValue | null
    enrichmentTags: string[]
    investmentScore: number | null
    condition: $Enums.PropertyCondition | null
    reasons: string[]
    tagReasons: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ScrapedPropertyCountAggregateOutputType | null
    _avg: ScrapedPropertyAvgAggregateOutputType | null
    _sum: ScrapedPropertySumAggregateOutputType | null
    _min: ScrapedPropertyMinAggregateOutputType | null
    _max: ScrapedPropertyMaxAggregateOutputType | null
  }

  type GetScrapedPropertyGroupByPayload<T extends ScrapedPropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScrapedPropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapedPropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapedPropertyGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapedPropertyGroupByOutputType[P]>
        }
      >
    >


  export type ScrapedPropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    zip?: boolean
    address?: boolean
    price?: boolean
    beds?: boolean
    sqft?: boolean
    propertyType?: boolean
    link?: boolean
    imageUrl?: boolean
    data?: boolean
    enrichmentTags?: boolean
    investmentScore?: boolean
    condition?: boolean
    reasons?: boolean
    tagReasons?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scrapedProperty"]>

  export type ScrapedPropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    zip?: boolean
    address?: boolean
    price?: boolean
    beds?: boolean
    sqft?: boolean
    propertyType?: boolean
    link?: boolean
    imageUrl?: boolean
    data?: boolean
    enrichmentTags?: boolean
    investmentScore?: boolean
    condition?: boolean
    reasons?: boolean
    tagReasons?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["scrapedProperty"]>

  export type ScrapedPropertySelectScalar = {
    id?: boolean
    source?: boolean
    zip?: boolean
    address?: boolean
    price?: boolean
    beds?: boolean
    sqft?: boolean
    propertyType?: boolean
    link?: boolean
    imageUrl?: boolean
    data?: boolean
    enrichmentTags?: boolean
    investmentScore?: boolean
    condition?: boolean
    reasons?: boolean
    tagReasons?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ScrapedPropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScrapedProperty"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: $Enums.ScraperSource
      zip: string
      address: string
      price: number | null
      beds: number | null
      sqft: number | null
      propertyType: string | null
      link: string | null
      imageUrl: string | null
      data: Prisma.JsonValue | null
      enrichmentTags: string[]
      investmentScore: number | null
      condition: $Enums.PropertyCondition | null
      reasons: string[]
      tagReasons: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scrapedProperty"]>
    composites: {}
  }

  type ScrapedPropertyGetPayload<S extends boolean | null | undefined | ScrapedPropertyDefaultArgs> = $Result.GetResult<Prisma.$ScrapedPropertyPayload, S>

  type ScrapedPropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScrapedPropertyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScrapedPropertyCountAggregateInputType | true
    }

  export interface ScrapedPropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapedProperty'], meta: { name: 'ScrapedProperty' } }
    /**
     * Find zero or one ScrapedProperty that matches the filter.
     * @param {ScrapedPropertyFindUniqueArgs} args - Arguments to find a ScrapedProperty
     * @example
     * // Get one ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScrapedPropertyFindUniqueArgs>(args: SelectSubset<T, ScrapedPropertyFindUniqueArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScrapedProperty that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScrapedPropertyFindUniqueOrThrowArgs} args - Arguments to find a ScrapedProperty
     * @example
     * // Get one ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScrapedPropertyFindUniqueOrThrowArgs>(args: SelectSubset<T, ScrapedPropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScrapedProperty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyFindFirstArgs} args - Arguments to find a ScrapedProperty
     * @example
     * // Get one ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScrapedPropertyFindFirstArgs>(args?: SelectSubset<T, ScrapedPropertyFindFirstArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScrapedProperty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyFindFirstOrThrowArgs} args - Arguments to find a ScrapedProperty
     * @example
     * // Get one ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScrapedPropertyFindFirstOrThrowArgs>(args?: SelectSubset<T, ScrapedPropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScrapedProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapedProperties
     * const scrapedProperties = await prisma.scrapedProperty.findMany()
     * 
     * // Get first 10 ScrapedProperties
     * const scrapedProperties = await prisma.scrapedProperty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapedPropertyWithIdOnly = await prisma.scrapedProperty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScrapedPropertyFindManyArgs>(args?: SelectSubset<T, ScrapedPropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScrapedProperty.
     * @param {ScrapedPropertyCreateArgs} args - Arguments to create a ScrapedProperty.
     * @example
     * // Create one ScrapedProperty
     * const ScrapedProperty = await prisma.scrapedProperty.create({
     *   data: {
     *     // ... data to create a ScrapedProperty
     *   }
     * })
     * 
     */
    create<T extends ScrapedPropertyCreateArgs>(args: SelectSubset<T, ScrapedPropertyCreateArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScrapedProperties.
     * @param {ScrapedPropertyCreateManyArgs} args - Arguments to create many ScrapedProperties.
     * @example
     * // Create many ScrapedProperties
     * const scrapedProperty = await prisma.scrapedProperty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScrapedPropertyCreateManyArgs>(args?: SelectSubset<T, ScrapedPropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScrapedProperties and returns the data saved in the database.
     * @param {ScrapedPropertyCreateManyAndReturnArgs} args - Arguments to create many ScrapedProperties.
     * @example
     * // Create many ScrapedProperties
     * const scrapedProperty = await prisma.scrapedProperty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScrapedProperties and only return the `id`
     * const scrapedPropertyWithIdOnly = await prisma.scrapedProperty.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScrapedPropertyCreateManyAndReturnArgs>(args?: SelectSubset<T, ScrapedPropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScrapedProperty.
     * @param {ScrapedPropertyDeleteArgs} args - Arguments to delete one ScrapedProperty.
     * @example
     * // Delete one ScrapedProperty
     * const ScrapedProperty = await prisma.scrapedProperty.delete({
     *   where: {
     *     // ... filter to delete one ScrapedProperty
     *   }
     * })
     * 
     */
    delete<T extends ScrapedPropertyDeleteArgs>(args: SelectSubset<T, ScrapedPropertyDeleteArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScrapedProperty.
     * @param {ScrapedPropertyUpdateArgs} args - Arguments to update one ScrapedProperty.
     * @example
     * // Update one ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScrapedPropertyUpdateArgs>(args: SelectSubset<T, ScrapedPropertyUpdateArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScrapedProperties.
     * @param {ScrapedPropertyDeleteManyArgs} args - Arguments to filter ScrapedProperties to delete.
     * @example
     * // Delete a few ScrapedProperties
     * const { count } = await prisma.scrapedProperty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScrapedPropertyDeleteManyArgs>(args?: SelectSubset<T, ScrapedPropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapedProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapedProperties
     * const scrapedProperty = await prisma.scrapedProperty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScrapedPropertyUpdateManyArgs>(args: SelectSubset<T, ScrapedPropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScrapedProperty.
     * @param {ScrapedPropertyUpsertArgs} args - Arguments to update or create a ScrapedProperty.
     * @example
     * // Update or create a ScrapedProperty
     * const scrapedProperty = await prisma.scrapedProperty.upsert({
     *   create: {
     *     // ... data to create a ScrapedProperty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapedProperty we want to update
     *   }
     * })
     */
    upsert<T extends ScrapedPropertyUpsertArgs>(args: SelectSubset<T, ScrapedPropertyUpsertArgs<ExtArgs>>): Prisma__ScrapedPropertyClient<$Result.GetResult<Prisma.$ScrapedPropertyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScrapedProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyCountArgs} args - Arguments to filter ScrapedProperties to count.
     * @example
     * // Count the number of ScrapedProperties
     * const count = await prisma.scrapedProperty.count({
     *   where: {
     *     // ... the filter for the ScrapedProperties we want to count
     *   }
     * })
    **/
    count<T extends ScrapedPropertyCountArgs>(
      args?: Subset<T, ScrapedPropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapedPropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapedProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapedPropertyAggregateArgs>(args: Subset<T, ScrapedPropertyAggregateArgs>): Prisma.PrismaPromise<GetScrapedPropertyAggregateType<T>>

    /**
     * Group by ScrapedProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapedPropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapedPropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapedPropertyGroupByArgs['orderBy'] }
        : { orderBy?: ScrapedPropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapedPropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapedPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScrapedProperty model
   */
  readonly fields: ScrapedPropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapedProperty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScrapedPropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScrapedProperty model
   */ 
  interface ScrapedPropertyFieldRefs {
    readonly id: FieldRef<"ScrapedProperty", 'String'>
    readonly source: FieldRef<"ScrapedProperty", 'ScraperSource'>
    readonly zip: FieldRef<"ScrapedProperty", 'String'>
    readonly address: FieldRef<"ScrapedProperty", 'String'>
    readonly price: FieldRef<"ScrapedProperty", 'Int'>
    readonly beds: FieldRef<"ScrapedProperty", 'Int'>
    readonly sqft: FieldRef<"ScrapedProperty", 'Int'>
    readonly propertyType: FieldRef<"ScrapedProperty", 'String'>
    readonly link: FieldRef<"ScrapedProperty", 'String'>
    readonly imageUrl: FieldRef<"ScrapedProperty", 'String'>
    readonly data: FieldRef<"ScrapedProperty", 'Json'>
    readonly enrichmentTags: FieldRef<"ScrapedProperty", 'String[]'>
    readonly investmentScore: FieldRef<"ScrapedProperty", 'Int'>
    readonly condition: FieldRef<"ScrapedProperty", 'PropertyCondition'>
    readonly reasons: FieldRef<"ScrapedProperty", 'String[]'>
    readonly tagReasons: FieldRef<"ScrapedProperty", 'Json'>
    readonly createdAt: FieldRef<"ScrapedProperty", 'DateTime'>
    readonly updatedAt: FieldRef<"ScrapedProperty", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScrapedProperty findUnique
   */
  export type ScrapedPropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter, which ScrapedProperty to fetch.
     */
    where: ScrapedPropertyWhereUniqueInput
  }

  /**
   * ScrapedProperty findUniqueOrThrow
   */
  export type ScrapedPropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter, which ScrapedProperty to fetch.
     */
    where: ScrapedPropertyWhereUniqueInput
  }

  /**
   * ScrapedProperty findFirst
   */
  export type ScrapedPropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter, which ScrapedProperty to fetch.
     */
    where?: ScrapedPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedProperties to fetch.
     */
    orderBy?: ScrapedPropertyOrderByWithRelationInput | ScrapedPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapedProperties.
     */
    cursor?: ScrapedPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapedProperties.
     */
    distinct?: ScrapedPropertyScalarFieldEnum | ScrapedPropertyScalarFieldEnum[]
  }

  /**
   * ScrapedProperty findFirstOrThrow
   */
  export type ScrapedPropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter, which ScrapedProperty to fetch.
     */
    where?: ScrapedPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedProperties to fetch.
     */
    orderBy?: ScrapedPropertyOrderByWithRelationInput | ScrapedPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapedProperties.
     */
    cursor?: ScrapedPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapedProperties.
     */
    distinct?: ScrapedPropertyScalarFieldEnum | ScrapedPropertyScalarFieldEnum[]
  }

  /**
   * ScrapedProperty findMany
   */
  export type ScrapedPropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter, which ScrapedProperties to fetch.
     */
    where?: ScrapedPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapedProperties to fetch.
     */
    orderBy?: ScrapedPropertyOrderByWithRelationInput | ScrapedPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapedProperties.
     */
    cursor?: ScrapedPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapedProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapedProperties.
     */
    skip?: number
    distinct?: ScrapedPropertyScalarFieldEnum | ScrapedPropertyScalarFieldEnum[]
  }

  /**
   * ScrapedProperty create
   */
  export type ScrapedPropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * The data needed to create a ScrapedProperty.
     */
    data: XOR<ScrapedPropertyCreateInput, ScrapedPropertyUncheckedCreateInput>
  }

  /**
   * ScrapedProperty createMany
   */
  export type ScrapedPropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapedProperties.
     */
    data: ScrapedPropertyCreateManyInput | ScrapedPropertyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapedProperty createManyAndReturn
   */
  export type ScrapedPropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScrapedProperties.
     */
    data: ScrapedPropertyCreateManyInput | ScrapedPropertyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapedProperty update
   */
  export type ScrapedPropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * The data needed to update a ScrapedProperty.
     */
    data: XOR<ScrapedPropertyUpdateInput, ScrapedPropertyUncheckedUpdateInput>
    /**
     * Choose, which ScrapedProperty to update.
     */
    where: ScrapedPropertyWhereUniqueInput
  }

  /**
   * ScrapedProperty updateMany
   */
  export type ScrapedPropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapedProperties.
     */
    data: XOR<ScrapedPropertyUpdateManyMutationInput, ScrapedPropertyUncheckedUpdateManyInput>
    /**
     * Filter which ScrapedProperties to update
     */
    where?: ScrapedPropertyWhereInput
  }

  /**
   * ScrapedProperty upsert
   */
  export type ScrapedPropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * The filter to search for the ScrapedProperty to update in case it exists.
     */
    where: ScrapedPropertyWhereUniqueInput
    /**
     * In case the ScrapedProperty found by the `where` argument doesn't exist, create a new ScrapedProperty with this data.
     */
    create: XOR<ScrapedPropertyCreateInput, ScrapedPropertyUncheckedCreateInput>
    /**
     * In case the ScrapedProperty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapedPropertyUpdateInput, ScrapedPropertyUncheckedUpdateInput>
  }

  /**
   * ScrapedProperty delete
   */
  export type ScrapedPropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
    /**
     * Filter which ScrapedProperty to delete.
     */
    where: ScrapedPropertyWhereUniqueInput
  }

  /**
   * ScrapedProperty deleteMany
   */
  export type ScrapedPropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapedProperties to delete
     */
    where?: ScrapedPropertyWhereInput
  }

  /**
   * ScrapedProperty without action
   */
  export type ScrapedPropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapedProperty
     */
    select?: ScrapedPropertySelect<ExtArgs> | null
  }


  /**
   * Model WebhookSubscription
   */

  export type AggregateWebhookSubscription = {
    _count: WebhookSubscriptionCountAggregateOutputType | null
    _min: WebhookSubscriptionMinAggregateOutputType | null
    _max: WebhookSubscriptionMaxAggregateOutputType | null
  }

  export type WebhookSubscriptionMinAggregateOutputType = {
    id: string | null
    targetUrl: string | null
    isActive: boolean | null
    signingSecret: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebhookSubscriptionMaxAggregateOutputType = {
    id: string | null
    targetUrl: string | null
    isActive: boolean | null
    signingSecret: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebhookSubscriptionCountAggregateOutputType = {
    id: number
    targetUrl: number
    eventTypes: number
    isActive: number
    signingSecret: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WebhookSubscriptionMinAggregateInputType = {
    id?: true
    targetUrl?: true
    isActive?: true
    signingSecret?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebhookSubscriptionMaxAggregateInputType = {
    id?: true
    targetUrl?: true
    isActive?: true
    signingSecret?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebhookSubscriptionCountAggregateInputType = {
    id?: true
    targetUrl?: true
    eventTypes?: true
    isActive?: true
    signingSecret?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WebhookSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookSubscription to aggregate.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookSubscriptions
    **/
    _count?: true | WebhookSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookSubscriptionMaxAggregateInputType
  }

  export type GetWebhookSubscriptionAggregateType<T extends WebhookSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookSubscription[P]>
      : GetScalarType<T[P], AggregateWebhookSubscription[P]>
  }




  export type WebhookSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookSubscriptionWhereInput
    orderBy?: WebhookSubscriptionOrderByWithAggregationInput | WebhookSubscriptionOrderByWithAggregationInput[]
    by: WebhookSubscriptionScalarFieldEnum[] | WebhookSubscriptionScalarFieldEnum
    having?: WebhookSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookSubscriptionCountAggregateInputType | true
    _min?: WebhookSubscriptionMinAggregateInputType
    _max?: WebhookSubscriptionMaxAggregateInputType
  }

  export type WebhookSubscriptionGroupByOutputType = {
    id: string
    targetUrl: string
    eventTypes: string[]
    isActive: boolean
    signingSecret: string
    createdAt: Date
    updatedAt: Date
    _count: WebhookSubscriptionCountAggregateOutputType | null
    _min: WebhookSubscriptionMinAggregateOutputType | null
    _max: WebhookSubscriptionMaxAggregateOutputType | null
  }

  type GetWebhookSubscriptionGroupByPayload<T extends WebhookSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type WebhookSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUrl?: boolean
    eventTypes?: boolean
    isActive?: boolean
    signingSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webhookSubscription"]>

  export type WebhookSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    targetUrl?: boolean
    eventTypes?: boolean
    isActive?: boolean
    signingSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webhookSubscription"]>

  export type WebhookSubscriptionSelectScalar = {
    id?: boolean
    targetUrl?: boolean
    eventTypes?: boolean
    isActive?: boolean
    signingSecret?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $WebhookSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookSubscription"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      targetUrl: string
      eventTypes: string[]
      isActive: boolean
      signingSecret: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["webhookSubscription"]>
    composites: {}
  }

  type WebhookSubscriptionGetPayload<S extends boolean | null | undefined | WebhookSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$WebhookSubscriptionPayload, S>

  type WebhookSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookSubscriptionCountAggregateInputType | true
    }

  export interface WebhookSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookSubscription'], meta: { name: 'WebhookSubscription' } }
    /**
     * Find zero or one WebhookSubscription that matches the filter.
     * @param {WebhookSubscriptionFindUniqueArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookSubscriptionFindUniqueArgs>(args: SelectSubset<T, WebhookSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WebhookSubscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WebhookSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindFirstArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookSubscriptionFindFirstArgs>(args?: SelectSubset<T, WebhookSubscriptionFindFirstArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WebhookSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindFirstOrThrowArgs} args - Arguments to find a WebhookSubscription
     * @example
     * // Get one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WebhookSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookSubscriptions
     * const webhookSubscriptions = await prisma.webhookSubscription.findMany()
     * 
     * // Get first 10 WebhookSubscriptions
     * const webhookSubscriptions = await prisma.webhookSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookSubscriptionWithIdOnly = await prisma.webhookSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookSubscriptionFindManyArgs>(args?: SelectSubset<T, WebhookSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WebhookSubscription.
     * @param {WebhookSubscriptionCreateArgs} args - Arguments to create a WebhookSubscription.
     * @example
     * // Create one WebhookSubscription
     * const WebhookSubscription = await prisma.webhookSubscription.create({
     *   data: {
     *     // ... data to create a WebhookSubscription
     *   }
     * })
     * 
     */
    create<T extends WebhookSubscriptionCreateArgs>(args: SelectSubset<T, WebhookSubscriptionCreateArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WebhookSubscriptions.
     * @param {WebhookSubscriptionCreateManyArgs} args - Arguments to create many WebhookSubscriptions.
     * @example
     * // Create many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookSubscriptionCreateManyArgs>(args?: SelectSubset<T, WebhookSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookSubscriptions and returns the data saved in the database.
     * @param {WebhookSubscriptionCreateManyAndReturnArgs} args - Arguments to create many WebhookSubscriptions.
     * @example
     * // Create many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookSubscriptions and only return the `id`
     * const webhookSubscriptionWithIdOnly = await prisma.webhookSubscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WebhookSubscription.
     * @param {WebhookSubscriptionDeleteArgs} args - Arguments to delete one WebhookSubscription.
     * @example
     * // Delete one WebhookSubscription
     * const WebhookSubscription = await prisma.webhookSubscription.delete({
     *   where: {
     *     // ... filter to delete one WebhookSubscription
     *   }
     * })
     * 
     */
    delete<T extends WebhookSubscriptionDeleteArgs>(args: SelectSubset<T, WebhookSubscriptionDeleteArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WebhookSubscription.
     * @param {WebhookSubscriptionUpdateArgs} args - Arguments to update one WebhookSubscription.
     * @example
     * // Update one WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookSubscriptionUpdateArgs>(args: SelectSubset<T, WebhookSubscriptionUpdateArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WebhookSubscriptions.
     * @param {WebhookSubscriptionDeleteManyArgs} args - Arguments to filter WebhookSubscriptions to delete.
     * @example
     * // Delete a few WebhookSubscriptions
     * const { count } = await prisma.webhookSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookSubscriptionDeleteManyArgs>(args?: SelectSubset<T, WebhookSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookSubscriptions
     * const webhookSubscription = await prisma.webhookSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookSubscriptionUpdateManyArgs>(args: SelectSubset<T, WebhookSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebhookSubscription.
     * @param {WebhookSubscriptionUpsertArgs} args - Arguments to update or create a WebhookSubscription.
     * @example
     * // Update or create a WebhookSubscription
     * const webhookSubscription = await prisma.webhookSubscription.upsert({
     *   create: {
     *     // ... data to create a WebhookSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookSubscription we want to update
     *   }
     * })
     */
    upsert<T extends WebhookSubscriptionUpsertArgs>(args: SelectSubset<T, WebhookSubscriptionUpsertArgs<ExtArgs>>): Prisma__WebhookSubscriptionClient<$Result.GetResult<Prisma.$WebhookSubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WebhookSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionCountArgs} args - Arguments to filter WebhookSubscriptions to count.
     * @example
     * // Count the number of WebhookSubscriptions
     * const count = await prisma.webhookSubscription.count({
     *   where: {
     *     // ... the filter for the WebhookSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends WebhookSubscriptionCountArgs>(
      args?: Subset<T, WebhookSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookSubscriptionAggregateArgs>(args: Subset<T, WebhookSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetWebhookSubscriptionAggregateType<T>>

    /**
     * Group by WebhookSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: WebhookSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookSubscription model
   */
  readonly fields: WebhookSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookSubscription model
   */ 
  interface WebhookSubscriptionFieldRefs {
    readonly id: FieldRef<"WebhookSubscription", 'String'>
    readonly targetUrl: FieldRef<"WebhookSubscription", 'String'>
    readonly eventTypes: FieldRef<"WebhookSubscription", 'String[]'>
    readonly isActive: FieldRef<"WebhookSubscription", 'Boolean'>
    readonly signingSecret: FieldRef<"WebhookSubscription", 'String'>
    readonly createdAt: FieldRef<"WebhookSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"WebhookSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebhookSubscription findUnique
   */
  export type WebhookSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription findUniqueOrThrow
   */
  export type WebhookSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription findFirst
   */
  export type WebhookSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookSubscriptions.
     */
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription findFirstOrThrow
   */
  export type WebhookSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter, which WebhookSubscription to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookSubscriptions.
     */
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription findMany
   */
  export type WebhookSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter, which WebhookSubscriptions to fetch.
     */
    where?: WebhookSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookSubscriptions to fetch.
     */
    orderBy?: WebhookSubscriptionOrderByWithRelationInput | WebhookSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookSubscriptions.
     */
    cursor?: WebhookSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookSubscriptions.
     */
    skip?: number
    distinct?: WebhookSubscriptionScalarFieldEnum | WebhookSubscriptionScalarFieldEnum[]
  }

  /**
   * WebhookSubscription create
   */
  export type WebhookSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * The data needed to create a WebhookSubscription.
     */
    data: XOR<WebhookSubscriptionCreateInput, WebhookSubscriptionUncheckedCreateInput>
  }

  /**
   * WebhookSubscription createMany
   */
  export type WebhookSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookSubscriptions.
     */
    data: WebhookSubscriptionCreateManyInput | WebhookSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookSubscription createManyAndReturn
   */
  export type WebhookSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WebhookSubscriptions.
     */
    data: WebhookSubscriptionCreateManyInput | WebhookSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookSubscription update
   */
  export type WebhookSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * The data needed to update a WebhookSubscription.
     */
    data: XOR<WebhookSubscriptionUpdateInput, WebhookSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which WebhookSubscription to update.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription updateMany
   */
  export type WebhookSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookSubscriptions.
     */
    data: XOR<WebhookSubscriptionUpdateManyMutationInput, WebhookSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which WebhookSubscriptions to update
     */
    where?: WebhookSubscriptionWhereInput
  }

  /**
   * WebhookSubscription upsert
   */
  export type WebhookSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * The filter to search for the WebhookSubscription to update in case it exists.
     */
    where: WebhookSubscriptionWhereUniqueInput
    /**
     * In case the WebhookSubscription found by the `where` argument doesn't exist, create a new WebhookSubscription with this data.
     */
    create: XOR<WebhookSubscriptionCreateInput, WebhookSubscriptionUncheckedCreateInput>
    /**
     * In case the WebhookSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookSubscriptionUpdateInput, WebhookSubscriptionUncheckedUpdateInput>
  }

  /**
   * WebhookSubscription delete
   */
  export type WebhookSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
    /**
     * Filter which WebhookSubscription to delete.
     */
    where: WebhookSubscriptionWhereUniqueInput
  }

  /**
   * WebhookSubscription deleteMany
   */
  export type WebhookSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookSubscriptions to delete
     */
    where?: WebhookSubscriptionWhereInput
  }

  /**
   * WebhookSubscription without action
   */
  export type WebhookSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookSubscription
     */
    select?: WebhookSubscriptionSelect<ExtArgs> | null
  }


  /**
   * Model WebhookDeliveryFailure
   */

  export type AggregateWebhookDeliveryFailure = {
    _count: WebhookDeliveryFailureCountAggregateOutputType | null
    _avg: WebhookDeliveryFailureAvgAggregateOutputType | null
    _sum: WebhookDeliveryFailureSumAggregateOutputType | null
    _min: WebhookDeliveryFailureMinAggregateOutputType | null
    _max: WebhookDeliveryFailureMaxAggregateOutputType | null
  }

  export type WebhookDeliveryFailureAvgAggregateOutputType = {
    attempts: number | null
  }

  export type WebhookDeliveryFailureSumAggregateOutputType = {
    attempts: number | null
  }

  export type WebhookDeliveryFailureMinAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    eventType: string | null
    attempts: number | null
    finalError: string | null
    lastError: string | null
    createdAt: Date | null
    lastAttemptAt: Date | null
    isResolved: boolean | null
    replayedAt: Date | null
    replayJobId: string | null
  }

  export type WebhookDeliveryFailureMaxAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    eventType: string | null
    attempts: number | null
    finalError: string | null
    lastError: string | null
    createdAt: Date | null
    lastAttemptAt: Date | null
    isResolved: boolean | null
    replayedAt: Date | null
    replayJobId: string | null
  }

  export type WebhookDeliveryFailureCountAggregateOutputType = {
    id: number
    subscriptionId: number
    eventType: number
    payload: number
    attempts: number
    finalError: number
    lastError: number
    createdAt: number
    lastAttemptAt: number
    isResolved: number
    replayedAt: number
    replayJobId: number
    _all: number
  }


  export type WebhookDeliveryFailureAvgAggregateInputType = {
    attempts?: true
  }

  export type WebhookDeliveryFailureSumAggregateInputType = {
    attempts?: true
  }

  export type WebhookDeliveryFailureMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    attempts?: true
    finalError?: true
    lastError?: true
    createdAt?: true
    lastAttemptAt?: true
    isResolved?: true
    replayedAt?: true
    replayJobId?: true
  }

  export type WebhookDeliveryFailureMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    attempts?: true
    finalError?: true
    lastError?: true
    createdAt?: true
    lastAttemptAt?: true
    isResolved?: true
    replayedAt?: true
    replayJobId?: true
  }

  export type WebhookDeliveryFailureCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    payload?: true
    attempts?: true
    finalError?: true
    lastError?: true
    createdAt?: true
    lastAttemptAt?: true
    isResolved?: true
    replayedAt?: true
    replayJobId?: true
    _all?: true
  }

  export type WebhookDeliveryFailureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookDeliveryFailure to aggregate.
     */
    where?: WebhookDeliveryFailureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryFailures to fetch.
     */
    orderBy?: WebhookDeliveryFailureOrderByWithRelationInput | WebhookDeliveryFailureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookDeliveryFailureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryFailures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryFailures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookDeliveryFailures
    **/
    _count?: true | WebhookDeliveryFailureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookDeliveryFailureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookDeliveryFailureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookDeliveryFailureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookDeliveryFailureMaxAggregateInputType
  }

  export type GetWebhookDeliveryFailureAggregateType<T extends WebhookDeliveryFailureAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookDeliveryFailure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookDeliveryFailure[P]>
      : GetScalarType<T[P], AggregateWebhookDeliveryFailure[P]>
  }




  export type WebhookDeliveryFailureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookDeliveryFailureWhereInput
    orderBy?: WebhookDeliveryFailureOrderByWithAggregationInput | WebhookDeliveryFailureOrderByWithAggregationInput[]
    by: WebhookDeliveryFailureScalarFieldEnum[] | WebhookDeliveryFailureScalarFieldEnum
    having?: WebhookDeliveryFailureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookDeliveryFailureCountAggregateInputType | true
    _avg?: WebhookDeliveryFailureAvgAggregateInputType
    _sum?: WebhookDeliveryFailureSumAggregateInputType
    _min?: WebhookDeliveryFailureMinAggregateInputType
    _max?: WebhookDeliveryFailureMaxAggregateInputType
  }

  export type WebhookDeliveryFailureGroupByOutputType = {
    id: string
    subscriptionId: string
    eventType: string
    payload: JsonValue
    attempts: number
    finalError: string | null
    lastError: string | null
    createdAt: Date
    lastAttemptAt: Date
    isResolved: boolean
    replayedAt: Date | null
    replayJobId: string | null
    _count: WebhookDeliveryFailureCountAggregateOutputType | null
    _avg: WebhookDeliveryFailureAvgAggregateOutputType | null
    _sum: WebhookDeliveryFailureSumAggregateOutputType | null
    _min: WebhookDeliveryFailureMinAggregateOutputType | null
    _max: WebhookDeliveryFailureMaxAggregateOutputType | null
  }

  type GetWebhookDeliveryFailureGroupByPayload<T extends WebhookDeliveryFailureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookDeliveryFailureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookDeliveryFailureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookDeliveryFailureGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookDeliveryFailureGroupByOutputType[P]>
        }
      >
    >


  export type WebhookDeliveryFailureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    payload?: boolean
    attempts?: boolean
    finalError?: boolean
    lastError?: boolean
    createdAt?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    replayedAt?: boolean
    replayJobId?: boolean
  }, ExtArgs["result"]["webhookDeliveryFailure"]>

  export type WebhookDeliveryFailureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    payload?: boolean
    attempts?: boolean
    finalError?: boolean
    lastError?: boolean
    createdAt?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    replayedAt?: boolean
    replayJobId?: boolean
  }, ExtArgs["result"]["webhookDeliveryFailure"]>

  export type WebhookDeliveryFailureSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    payload?: boolean
    attempts?: boolean
    finalError?: boolean
    lastError?: boolean
    createdAt?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    replayedAt?: boolean
    replayJobId?: boolean
  }


  export type $WebhookDeliveryFailurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookDeliveryFailure"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriptionId: string
      eventType: string
      payload: Prisma.JsonValue
      attempts: number
      finalError: string | null
      lastError: string | null
      createdAt: Date
      lastAttemptAt: Date
      isResolved: boolean
      replayedAt: Date | null
      replayJobId: string | null
    }, ExtArgs["result"]["webhookDeliveryFailure"]>
    composites: {}
  }

  type WebhookDeliveryFailureGetPayload<S extends boolean | null | undefined | WebhookDeliveryFailureDefaultArgs> = $Result.GetResult<Prisma.$WebhookDeliveryFailurePayload, S>

  type WebhookDeliveryFailureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookDeliveryFailureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookDeliveryFailureCountAggregateInputType | true
    }

  export interface WebhookDeliveryFailureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookDeliveryFailure'], meta: { name: 'WebhookDeliveryFailure' } }
    /**
     * Find zero or one WebhookDeliveryFailure that matches the filter.
     * @param {WebhookDeliveryFailureFindUniqueArgs} args - Arguments to find a WebhookDeliveryFailure
     * @example
     * // Get one WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookDeliveryFailureFindUniqueArgs>(args: SelectSubset<T, WebhookDeliveryFailureFindUniqueArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WebhookDeliveryFailure that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookDeliveryFailureFindUniqueOrThrowArgs} args - Arguments to find a WebhookDeliveryFailure
     * @example
     * // Get one WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookDeliveryFailureFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookDeliveryFailureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WebhookDeliveryFailure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureFindFirstArgs} args - Arguments to find a WebhookDeliveryFailure
     * @example
     * // Get one WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookDeliveryFailureFindFirstArgs>(args?: SelectSubset<T, WebhookDeliveryFailureFindFirstArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WebhookDeliveryFailure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureFindFirstOrThrowArgs} args - Arguments to find a WebhookDeliveryFailure
     * @example
     * // Get one WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookDeliveryFailureFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookDeliveryFailureFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WebhookDeliveryFailures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookDeliveryFailures
     * const webhookDeliveryFailures = await prisma.webhookDeliveryFailure.findMany()
     * 
     * // Get first 10 WebhookDeliveryFailures
     * const webhookDeliveryFailures = await prisma.webhookDeliveryFailure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookDeliveryFailureWithIdOnly = await prisma.webhookDeliveryFailure.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookDeliveryFailureFindManyArgs>(args?: SelectSubset<T, WebhookDeliveryFailureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WebhookDeliveryFailure.
     * @param {WebhookDeliveryFailureCreateArgs} args - Arguments to create a WebhookDeliveryFailure.
     * @example
     * // Create one WebhookDeliveryFailure
     * const WebhookDeliveryFailure = await prisma.webhookDeliveryFailure.create({
     *   data: {
     *     // ... data to create a WebhookDeliveryFailure
     *   }
     * })
     * 
     */
    create<T extends WebhookDeliveryFailureCreateArgs>(args: SelectSubset<T, WebhookDeliveryFailureCreateArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WebhookDeliveryFailures.
     * @param {WebhookDeliveryFailureCreateManyArgs} args - Arguments to create many WebhookDeliveryFailures.
     * @example
     * // Create many WebhookDeliveryFailures
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookDeliveryFailureCreateManyArgs>(args?: SelectSubset<T, WebhookDeliveryFailureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookDeliveryFailures and returns the data saved in the database.
     * @param {WebhookDeliveryFailureCreateManyAndReturnArgs} args - Arguments to create many WebhookDeliveryFailures.
     * @example
     * // Create many WebhookDeliveryFailures
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookDeliveryFailures and only return the `id`
     * const webhookDeliveryFailureWithIdOnly = await prisma.webhookDeliveryFailure.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookDeliveryFailureCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookDeliveryFailureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WebhookDeliveryFailure.
     * @param {WebhookDeliveryFailureDeleteArgs} args - Arguments to delete one WebhookDeliveryFailure.
     * @example
     * // Delete one WebhookDeliveryFailure
     * const WebhookDeliveryFailure = await prisma.webhookDeliveryFailure.delete({
     *   where: {
     *     // ... filter to delete one WebhookDeliveryFailure
     *   }
     * })
     * 
     */
    delete<T extends WebhookDeliveryFailureDeleteArgs>(args: SelectSubset<T, WebhookDeliveryFailureDeleteArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WebhookDeliveryFailure.
     * @param {WebhookDeliveryFailureUpdateArgs} args - Arguments to update one WebhookDeliveryFailure.
     * @example
     * // Update one WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookDeliveryFailureUpdateArgs>(args: SelectSubset<T, WebhookDeliveryFailureUpdateArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WebhookDeliveryFailures.
     * @param {WebhookDeliveryFailureDeleteManyArgs} args - Arguments to filter WebhookDeliveryFailures to delete.
     * @example
     * // Delete a few WebhookDeliveryFailures
     * const { count } = await prisma.webhookDeliveryFailure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookDeliveryFailureDeleteManyArgs>(args?: SelectSubset<T, WebhookDeliveryFailureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookDeliveryFailures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookDeliveryFailures
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookDeliveryFailureUpdateManyArgs>(args: SelectSubset<T, WebhookDeliveryFailureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebhookDeliveryFailure.
     * @param {WebhookDeliveryFailureUpsertArgs} args - Arguments to update or create a WebhookDeliveryFailure.
     * @example
     * // Update or create a WebhookDeliveryFailure
     * const webhookDeliveryFailure = await prisma.webhookDeliveryFailure.upsert({
     *   create: {
     *     // ... data to create a WebhookDeliveryFailure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookDeliveryFailure we want to update
     *   }
     * })
     */
    upsert<T extends WebhookDeliveryFailureUpsertArgs>(args: SelectSubset<T, WebhookDeliveryFailureUpsertArgs<ExtArgs>>): Prisma__WebhookDeliveryFailureClient<$Result.GetResult<Prisma.$WebhookDeliveryFailurePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WebhookDeliveryFailures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureCountArgs} args - Arguments to filter WebhookDeliveryFailures to count.
     * @example
     * // Count the number of WebhookDeliveryFailures
     * const count = await prisma.webhookDeliveryFailure.count({
     *   where: {
     *     // ... the filter for the WebhookDeliveryFailures we want to count
     *   }
     * })
    **/
    count<T extends WebhookDeliveryFailureCountArgs>(
      args?: Subset<T, WebhookDeliveryFailureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookDeliveryFailureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookDeliveryFailure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookDeliveryFailureAggregateArgs>(args: Subset<T, WebhookDeliveryFailureAggregateArgs>): Prisma.PrismaPromise<GetWebhookDeliveryFailureAggregateType<T>>

    /**
     * Group by WebhookDeliveryFailure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryFailureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookDeliveryFailureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookDeliveryFailureGroupByArgs['orderBy'] }
        : { orderBy?: WebhookDeliveryFailureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookDeliveryFailureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookDeliveryFailureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookDeliveryFailure model
   */
  readonly fields: WebhookDeliveryFailureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookDeliveryFailure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookDeliveryFailureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookDeliveryFailure model
   */ 
  interface WebhookDeliveryFailureFieldRefs {
    readonly id: FieldRef<"WebhookDeliveryFailure", 'String'>
    readonly subscriptionId: FieldRef<"WebhookDeliveryFailure", 'String'>
    readonly eventType: FieldRef<"WebhookDeliveryFailure", 'String'>
    readonly payload: FieldRef<"WebhookDeliveryFailure", 'Json'>
    readonly attempts: FieldRef<"WebhookDeliveryFailure", 'Int'>
    readonly finalError: FieldRef<"WebhookDeliveryFailure", 'String'>
    readonly lastError: FieldRef<"WebhookDeliveryFailure", 'String'>
    readonly createdAt: FieldRef<"WebhookDeliveryFailure", 'DateTime'>
    readonly lastAttemptAt: FieldRef<"WebhookDeliveryFailure", 'DateTime'>
    readonly isResolved: FieldRef<"WebhookDeliveryFailure", 'Boolean'>
    readonly replayedAt: FieldRef<"WebhookDeliveryFailure", 'DateTime'>
    readonly replayJobId: FieldRef<"WebhookDeliveryFailure", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WebhookDeliveryFailure findUnique
   */
  export type WebhookDeliveryFailureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryFailure to fetch.
     */
    where: WebhookDeliveryFailureWhereUniqueInput
  }

  /**
   * WebhookDeliveryFailure findUniqueOrThrow
   */
  export type WebhookDeliveryFailureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryFailure to fetch.
     */
    where: WebhookDeliveryFailureWhereUniqueInput
  }

  /**
   * WebhookDeliveryFailure findFirst
   */
  export type WebhookDeliveryFailureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryFailure to fetch.
     */
    where?: WebhookDeliveryFailureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryFailures to fetch.
     */
    orderBy?: WebhookDeliveryFailureOrderByWithRelationInput | WebhookDeliveryFailureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookDeliveryFailures.
     */
    cursor?: WebhookDeliveryFailureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryFailures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryFailures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookDeliveryFailures.
     */
    distinct?: WebhookDeliveryFailureScalarFieldEnum | WebhookDeliveryFailureScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryFailure findFirstOrThrow
   */
  export type WebhookDeliveryFailureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryFailure to fetch.
     */
    where?: WebhookDeliveryFailureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryFailures to fetch.
     */
    orderBy?: WebhookDeliveryFailureOrderByWithRelationInput | WebhookDeliveryFailureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookDeliveryFailures.
     */
    cursor?: WebhookDeliveryFailureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryFailures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryFailures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookDeliveryFailures.
     */
    distinct?: WebhookDeliveryFailureScalarFieldEnum | WebhookDeliveryFailureScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryFailure findMany
   */
  export type WebhookDeliveryFailureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryFailures to fetch.
     */
    where?: WebhookDeliveryFailureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryFailures to fetch.
     */
    orderBy?: WebhookDeliveryFailureOrderByWithRelationInput | WebhookDeliveryFailureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookDeliveryFailures.
     */
    cursor?: WebhookDeliveryFailureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryFailures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryFailures.
     */
    skip?: number
    distinct?: WebhookDeliveryFailureScalarFieldEnum | WebhookDeliveryFailureScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryFailure create
   */
  export type WebhookDeliveryFailureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * The data needed to create a WebhookDeliveryFailure.
     */
    data: XOR<WebhookDeliveryFailureCreateInput, WebhookDeliveryFailureUncheckedCreateInput>
  }

  /**
   * WebhookDeliveryFailure createMany
   */
  export type WebhookDeliveryFailureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookDeliveryFailures.
     */
    data: WebhookDeliveryFailureCreateManyInput | WebhookDeliveryFailureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookDeliveryFailure createManyAndReturn
   */
  export type WebhookDeliveryFailureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WebhookDeliveryFailures.
     */
    data: WebhookDeliveryFailureCreateManyInput | WebhookDeliveryFailureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookDeliveryFailure update
   */
  export type WebhookDeliveryFailureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * The data needed to update a WebhookDeliveryFailure.
     */
    data: XOR<WebhookDeliveryFailureUpdateInput, WebhookDeliveryFailureUncheckedUpdateInput>
    /**
     * Choose, which WebhookDeliveryFailure to update.
     */
    where: WebhookDeliveryFailureWhereUniqueInput
  }

  /**
   * WebhookDeliveryFailure updateMany
   */
  export type WebhookDeliveryFailureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookDeliveryFailures.
     */
    data: XOR<WebhookDeliveryFailureUpdateManyMutationInput, WebhookDeliveryFailureUncheckedUpdateManyInput>
    /**
     * Filter which WebhookDeliveryFailures to update
     */
    where?: WebhookDeliveryFailureWhereInput
  }

  /**
   * WebhookDeliveryFailure upsert
   */
  export type WebhookDeliveryFailureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * The filter to search for the WebhookDeliveryFailure to update in case it exists.
     */
    where: WebhookDeliveryFailureWhereUniqueInput
    /**
     * In case the WebhookDeliveryFailure found by the `where` argument doesn't exist, create a new WebhookDeliveryFailure with this data.
     */
    create: XOR<WebhookDeliveryFailureCreateInput, WebhookDeliveryFailureUncheckedCreateInput>
    /**
     * In case the WebhookDeliveryFailure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookDeliveryFailureUpdateInput, WebhookDeliveryFailureUncheckedUpdateInput>
  }

  /**
   * WebhookDeliveryFailure delete
   */
  export type WebhookDeliveryFailureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
    /**
     * Filter which WebhookDeliveryFailure to delete.
     */
    where: WebhookDeliveryFailureWhereUniqueInput
  }

  /**
   * WebhookDeliveryFailure deleteMany
   */
  export type WebhookDeliveryFailureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookDeliveryFailures to delete
     */
    where?: WebhookDeliveryFailureWhereInput
  }

  /**
   * WebhookDeliveryFailure without action
   */
  export type WebhookDeliveryFailureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryFailure
     */
    select?: WebhookDeliveryFailureSelect<ExtArgs> | null
  }


  /**
   * Model WebhookDeliveryLog
   */

  export type AggregateWebhookDeliveryLog = {
    _count: WebhookDeliveryLogCountAggregateOutputType | null
    _avg: WebhookDeliveryLogAvgAggregateOutputType | null
    _sum: WebhookDeliveryLogSumAggregateOutputType | null
    _min: WebhookDeliveryLogMinAggregateOutputType | null
    _max: WebhookDeliveryLogMaxAggregateOutputType | null
  }

  export type WebhookDeliveryLogAvgAggregateOutputType = {
    attemptsMade: number | null
  }

  export type WebhookDeliveryLogSumAggregateOutputType = {
    attemptsMade: number | null
  }

  export type WebhookDeliveryLogMinAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    eventType: string | null
    status: string | null
    attemptsMade: number | null
    jobId: string | null
    lastAttemptAt: Date | null
    isResolved: boolean | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebhookDeliveryLogMaxAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    eventType: string | null
    status: string | null
    attemptsMade: number | null
    jobId: string | null
    lastAttemptAt: Date | null
    isResolved: boolean | null
    lastError: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebhookDeliveryLogCountAggregateOutputType = {
    id: number
    subscriptionId: number
    eventType: number
    status: number
    attemptsMade: number
    jobId: number
    lastAttemptAt: number
    isResolved: number
    lastError: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WebhookDeliveryLogAvgAggregateInputType = {
    attemptsMade?: true
  }

  export type WebhookDeliveryLogSumAggregateInputType = {
    attemptsMade?: true
  }

  export type WebhookDeliveryLogMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    status?: true
    attemptsMade?: true
    jobId?: true
    lastAttemptAt?: true
    isResolved?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebhookDeliveryLogMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    status?: true
    attemptsMade?: true
    jobId?: true
    lastAttemptAt?: true
    isResolved?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebhookDeliveryLogCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    eventType?: true
    status?: true
    attemptsMade?: true
    jobId?: true
    lastAttemptAt?: true
    isResolved?: true
    lastError?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WebhookDeliveryLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookDeliveryLog to aggregate.
     */
    where?: WebhookDeliveryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryLogs to fetch.
     */
    orderBy?: WebhookDeliveryLogOrderByWithRelationInput | WebhookDeliveryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookDeliveryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebhookDeliveryLogs
    **/
    _count?: true | WebhookDeliveryLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookDeliveryLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookDeliveryLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookDeliveryLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookDeliveryLogMaxAggregateInputType
  }

  export type GetWebhookDeliveryLogAggregateType<T extends WebhookDeliveryLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhookDeliveryLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhookDeliveryLog[P]>
      : GetScalarType<T[P], AggregateWebhookDeliveryLog[P]>
  }




  export type WebhookDeliveryLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookDeliveryLogWhereInput
    orderBy?: WebhookDeliveryLogOrderByWithAggregationInput | WebhookDeliveryLogOrderByWithAggregationInput[]
    by: WebhookDeliveryLogScalarFieldEnum[] | WebhookDeliveryLogScalarFieldEnum
    having?: WebhookDeliveryLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookDeliveryLogCountAggregateInputType | true
    _avg?: WebhookDeliveryLogAvgAggregateInputType
    _sum?: WebhookDeliveryLogSumAggregateInputType
    _min?: WebhookDeliveryLogMinAggregateInputType
    _max?: WebhookDeliveryLogMaxAggregateInputType
  }

  export type WebhookDeliveryLogGroupByOutputType = {
    id: string
    subscriptionId: string
    eventType: string
    status: string
    attemptsMade: number
    jobId: string
    lastAttemptAt: Date
    isResolved: boolean
    lastError: string | null
    createdAt: Date
    updatedAt: Date
    _count: WebhookDeliveryLogCountAggregateOutputType | null
    _avg: WebhookDeliveryLogAvgAggregateOutputType | null
    _sum: WebhookDeliveryLogSumAggregateOutputType | null
    _min: WebhookDeliveryLogMinAggregateOutputType | null
    _max: WebhookDeliveryLogMaxAggregateOutputType | null
  }

  type GetWebhookDeliveryLogGroupByPayload<T extends WebhookDeliveryLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookDeliveryLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookDeliveryLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookDeliveryLogGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookDeliveryLogGroupByOutputType[P]>
        }
      >
    >


  export type WebhookDeliveryLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    status?: boolean
    attemptsMade?: boolean
    jobId?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webhookDeliveryLog"]>

  export type WebhookDeliveryLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    status?: boolean
    attemptsMade?: boolean
    jobId?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["webhookDeliveryLog"]>

  export type WebhookDeliveryLogSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    eventType?: boolean
    status?: boolean
    attemptsMade?: boolean
    jobId?: boolean
    lastAttemptAt?: boolean
    isResolved?: boolean
    lastError?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $WebhookDeliveryLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebhookDeliveryLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriptionId: string
      eventType: string
      status: string
      attemptsMade: number
      jobId: string
      lastAttemptAt: Date
      isResolved: boolean
      lastError: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["webhookDeliveryLog"]>
    composites: {}
  }

  type WebhookDeliveryLogGetPayload<S extends boolean | null | undefined | WebhookDeliveryLogDefaultArgs> = $Result.GetResult<Prisma.$WebhookDeliveryLogPayload, S>

  type WebhookDeliveryLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookDeliveryLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookDeliveryLogCountAggregateInputType | true
    }

  export interface WebhookDeliveryLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebhookDeliveryLog'], meta: { name: 'WebhookDeliveryLog' } }
    /**
     * Find zero or one WebhookDeliveryLog that matches the filter.
     * @param {WebhookDeliveryLogFindUniqueArgs} args - Arguments to find a WebhookDeliveryLog
     * @example
     * // Get one WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookDeliveryLogFindUniqueArgs>(args: SelectSubset<T, WebhookDeliveryLogFindUniqueArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WebhookDeliveryLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookDeliveryLogFindUniqueOrThrowArgs} args - Arguments to find a WebhookDeliveryLog
     * @example
     * // Get one WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookDeliveryLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookDeliveryLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WebhookDeliveryLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogFindFirstArgs} args - Arguments to find a WebhookDeliveryLog
     * @example
     * // Get one WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookDeliveryLogFindFirstArgs>(args?: SelectSubset<T, WebhookDeliveryLogFindFirstArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WebhookDeliveryLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogFindFirstOrThrowArgs} args - Arguments to find a WebhookDeliveryLog
     * @example
     * // Get one WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookDeliveryLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookDeliveryLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WebhookDeliveryLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebhookDeliveryLogs
     * const webhookDeliveryLogs = await prisma.webhookDeliveryLog.findMany()
     * 
     * // Get first 10 WebhookDeliveryLogs
     * const webhookDeliveryLogs = await prisma.webhookDeliveryLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookDeliveryLogWithIdOnly = await prisma.webhookDeliveryLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookDeliveryLogFindManyArgs>(args?: SelectSubset<T, WebhookDeliveryLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WebhookDeliveryLog.
     * @param {WebhookDeliveryLogCreateArgs} args - Arguments to create a WebhookDeliveryLog.
     * @example
     * // Create one WebhookDeliveryLog
     * const WebhookDeliveryLog = await prisma.webhookDeliveryLog.create({
     *   data: {
     *     // ... data to create a WebhookDeliveryLog
     *   }
     * })
     * 
     */
    create<T extends WebhookDeliveryLogCreateArgs>(args: SelectSubset<T, WebhookDeliveryLogCreateArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WebhookDeliveryLogs.
     * @param {WebhookDeliveryLogCreateManyArgs} args - Arguments to create many WebhookDeliveryLogs.
     * @example
     * // Create many WebhookDeliveryLogs
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookDeliveryLogCreateManyArgs>(args?: SelectSubset<T, WebhookDeliveryLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebhookDeliveryLogs and returns the data saved in the database.
     * @param {WebhookDeliveryLogCreateManyAndReturnArgs} args - Arguments to create many WebhookDeliveryLogs.
     * @example
     * // Create many WebhookDeliveryLogs
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebhookDeliveryLogs and only return the `id`
     * const webhookDeliveryLogWithIdOnly = await prisma.webhookDeliveryLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookDeliveryLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookDeliveryLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WebhookDeliveryLog.
     * @param {WebhookDeliveryLogDeleteArgs} args - Arguments to delete one WebhookDeliveryLog.
     * @example
     * // Delete one WebhookDeliveryLog
     * const WebhookDeliveryLog = await prisma.webhookDeliveryLog.delete({
     *   where: {
     *     // ... filter to delete one WebhookDeliveryLog
     *   }
     * })
     * 
     */
    delete<T extends WebhookDeliveryLogDeleteArgs>(args: SelectSubset<T, WebhookDeliveryLogDeleteArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WebhookDeliveryLog.
     * @param {WebhookDeliveryLogUpdateArgs} args - Arguments to update one WebhookDeliveryLog.
     * @example
     * // Update one WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookDeliveryLogUpdateArgs>(args: SelectSubset<T, WebhookDeliveryLogUpdateArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WebhookDeliveryLogs.
     * @param {WebhookDeliveryLogDeleteManyArgs} args - Arguments to filter WebhookDeliveryLogs to delete.
     * @example
     * // Delete a few WebhookDeliveryLogs
     * const { count } = await prisma.webhookDeliveryLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookDeliveryLogDeleteManyArgs>(args?: SelectSubset<T, WebhookDeliveryLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebhookDeliveryLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebhookDeliveryLogs
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookDeliveryLogUpdateManyArgs>(args: SelectSubset<T, WebhookDeliveryLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebhookDeliveryLog.
     * @param {WebhookDeliveryLogUpsertArgs} args - Arguments to update or create a WebhookDeliveryLog.
     * @example
     * // Update or create a WebhookDeliveryLog
     * const webhookDeliveryLog = await prisma.webhookDeliveryLog.upsert({
     *   create: {
     *     // ... data to create a WebhookDeliveryLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebhookDeliveryLog we want to update
     *   }
     * })
     */
    upsert<T extends WebhookDeliveryLogUpsertArgs>(args: SelectSubset<T, WebhookDeliveryLogUpsertArgs<ExtArgs>>): Prisma__WebhookDeliveryLogClient<$Result.GetResult<Prisma.$WebhookDeliveryLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WebhookDeliveryLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogCountArgs} args - Arguments to filter WebhookDeliveryLogs to count.
     * @example
     * // Count the number of WebhookDeliveryLogs
     * const count = await prisma.webhookDeliveryLog.count({
     *   where: {
     *     // ... the filter for the WebhookDeliveryLogs we want to count
     *   }
     * })
    **/
    count<T extends WebhookDeliveryLogCountArgs>(
      args?: Subset<T, WebhookDeliveryLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookDeliveryLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebhookDeliveryLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookDeliveryLogAggregateArgs>(args: Subset<T, WebhookDeliveryLogAggregateArgs>): Prisma.PrismaPromise<GetWebhookDeliveryLogAggregateType<T>>

    /**
     * Group by WebhookDeliveryLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookDeliveryLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookDeliveryLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookDeliveryLogGroupByArgs['orderBy'] }
        : { orderBy?: WebhookDeliveryLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookDeliveryLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookDeliveryLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebhookDeliveryLog model
   */
  readonly fields: WebhookDeliveryLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebhookDeliveryLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookDeliveryLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebhookDeliveryLog model
   */ 
  interface WebhookDeliveryLogFieldRefs {
    readonly id: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly subscriptionId: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly eventType: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly status: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly attemptsMade: FieldRef<"WebhookDeliveryLog", 'Int'>
    readonly jobId: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly lastAttemptAt: FieldRef<"WebhookDeliveryLog", 'DateTime'>
    readonly isResolved: FieldRef<"WebhookDeliveryLog", 'Boolean'>
    readonly lastError: FieldRef<"WebhookDeliveryLog", 'String'>
    readonly createdAt: FieldRef<"WebhookDeliveryLog", 'DateTime'>
    readonly updatedAt: FieldRef<"WebhookDeliveryLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebhookDeliveryLog findUnique
   */
  export type WebhookDeliveryLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryLog to fetch.
     */
    where: WebhookDeliveryLogWhereUniqueInput
  }

  /**
   * WebhookDeliveryLog findUniqueOrThrow
   */
  export type WebhookDeliveryLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryLog to fetch.
     */
    where: WebhookDeliveryLogWhereUniqueInput
  }

  /**
   * WebhookDeliveryLog findFirst
   */
  export type WebhookDeliveryLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryLog to fetch.
     */
    where?: WebhookDeliveryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryLogs to fetch.
     */
    orderBy?: WebhookDeliveryLogOrderByWithRelationInput | WebhookDeliveryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookDeliveryLogs.
     */
    cursor?: WebhookDeliveryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookDeliveryLogs.
     */
    distinct?: WebhookDeliveryLogScalarFieldEnum | WebhookDeliveryLogScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryLog findFirstOrThrow
   */
  export type WebhookDeliveryLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryLog to fetch.
     */
    where?: WebhookDeliveryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryLogs to fetch.
     */
    orderBy?: WebhookDeliveryLogOrderByWithRelationInput | WebhookDeliveryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebhookDeliveryLogs.
     */
    cursor?: WebhookDeliveryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebhookDeliveryLogs.
     */
    distinct?: WebhookDeliveryLogScalarFieldEnum | WebhookDeliveryLogScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryLog findMany
   */
  export type WebhookDeliveryLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter, which WebhookDeliveryLogs to fetch.
     */
    where?: WebhookDeliveryLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebhookDeliveryLogs to fetch.
     */
    orderBy?: WebhookDeliveryLogOrderByWithRelationInput | WebhookDeliveryLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebhookDeliveryLogs.
     */
    cursor?: WebhookDeliveryLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebhookDeliveryLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebhookDeliveryLogs.
     */
    skip?: number
    distinct?: WebhookDeliveryLogScalarFieldEnum | WebhookDeliveryLogScalarFieldEnum[]
  }

  /**
   * WebhookDeliveryLog create
   */
  export type WebhookDeliveryLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * The data needed to create a WebhookDeliveryLog.
     */
    data: XOR<WebhookDeliveryLogCreateInput, WebhookDeliveryLogUncheckedCreateInput>
  }

  /**
   * WebhookDeliveryLog createMany
   */
  export type WebhookDeliveryLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebhookDeliveryLogs.
     */
    data: WebhookDeliveryLogCreateManyInput | WebhookDeliveryLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookDeliveryLog createManyAndReturn
   */
  export type WebhookDeliveryLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WebhookDeliveryLogs.
     */
    data: WebhookDeliveryLogCreateManyInput | WebhookDeliveryLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebhookDeliveryLog update
   */
  export type WebhookDeliveryLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * The data needed to update a WebhookDeliveryLog.
     */
    data: XOR<WebhookDeliveryLogUpdateInput, WebhookDeliveryLogUncheckedUpdateInput>
    /**
     * Choose, which WebhookDeliveryLog to update.
     */
    where: WebhookDeliveryLogWhereUniqueInput
  }

  /**
   * WebhookDeliveryLog updateMany
   */
  export type WebhookDeliveryLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebhookDeliveryLogs.
     */
    data: XOR<WebhookDeliveryLogUpdateManyMutationInput, WebhookDeliveryLogUncheckedUpdateManyInput>
    /**
     * Filter which WebhookDeliveryLogs to update
     */
    where?: WebhookDeliveryLogWhereInput
  }

  /**
   * WebhookDeliveryLog upsert
   */
  export type WebhookDeliveryLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * The filter to search for the WebhookDeliveryLog to update in case it exists.
     */
    where: WebhookDeliveryLogWhereUniqueInput
    /**
     * In case the WebhookDeliveryLog found by the `where` argument doesn't exist, create a new WebhookDeliveryLog with this data.
     */
    create: XOR<WebhookDeliveryLogCreateInput, WebhookDeliveryLogUncheckedCreateInput>
    /**
     * In case the WebhookDeliveryLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookDeliveryLogUpdateInput, WebhookDeliveryLogUncheckedUpdateInput>
  }

  /**
   * WebhookDeliveryLog delete
   */
  export type WebhookDeliveryLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
    /**
     * Filter which WebhookDeliveryLog to delete.
     */
    where: WebhookDeliveryLogWhereUniqueInput
  }

  /**
   * WebhookDeliveryLog deleteMany
   */
  export type WebhookDeliveryLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebhookDeliveryLogs to delete
     */
    where?: WebhookDeliveryLogWhereInput
  }

  /**
   * WebhookDeliveryLog without action
   */
  export type WebhookDeliveryLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebhookDeliveryLog
     */
    select?: WebhookDeliveryLogSelect<ExtArgs> | null
  }


  /**
   * Model MatchmakingJob
   */

  export type AggregateMatchmakingJob = {
    _count: MatchmakingJobCountAggregateOutputType | null
    _avg: MatchmakingJobAvgAggregateOutputType | null
    _sum: MatchmakingJobSumAggregateOutputType | null
    _min: MatchmakingJobMinAggregateOutputType | null
    _max: MatchmakingJobMaxAggregateOutputType | null
  }

  export type MatchmakingJobAvgAggregateOutputType = {
    matchedCount: number | null
  }

  export type MatchmakingJobSumAggregateOutputType = {
    matchedCount: number | null
  }

  export type MatchmakingJobMinAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    completedAt: Date | null
    matchedCount: number | null
  }

  export type MatchmakingJobMaxAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: Date | null
    completedAt: Date | null
    matchedCount: number | null
  }

  export type MatchmakingJobCountAggregateOutputType = {
    id: number
    filterJSON: number
    status: number
    createdAt: number
    completedAt: number
    matchedCount: number
    _all: number
  }


  export type MatchmakingJobAvgAggregateInputType = {
    matchedCount?: true
  }

  export type MatchmakingJobSumAggregateInputType = {
    matchedCount?: true
  }

  export type MatchmakingJobMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    completedAt?: true
    matchedCount?: true
  }

  export type MatchmakingJobMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    completedAt?: true
    matchedCount?: true
  }

  export type MatchmakingJobCountAggregateInputType = {
    id?: true
    filterJSON?: true
    status?: true
    createdAt?: true
    completedAt?: true
    matchedCount?: true
    _all?: true
  }

  export type MatchmakingJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchmakingJob to aggregate.
     */
    where?: MatchmakingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingJobs to fetch.
     */
    orderBy?: MatchmakingJobOrderByWithRelationInput | MatchmakingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchmakingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchmakingJobs
    **/
    _count?: true | MatchmakingJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchmakingJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchmakingJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchmakingJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchmakingJobMaxAggregateInputType
  }

  export type GetMatchmakingJobAggregateType<T extends MatchmakingJobAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchmakingJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchmakingJob[P]>
      : GetScalarType<T[P], AggregateMatchmakingJob[P]>
  }




  export type MatchmakingJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchmakingJobWhereInput
    orderBy?: MatchmakingJobOrderByWithAggregationInput | MatchmakingJobOrderByWithAggregationInput[]
    by: MatchmakingJobScalarFieldEnum[] | MatchmakingJobScalarFieldEnum
    having?: MatchmakingJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchmakingJobCountAggregateInputType | true
    _avg?: MatchmakingJobAvgAggregateInputType
    _sum?: MatchmakingJobSumAggregateInputType
    _min?: MatchmakingJobMinAggregateInputType
    _max?: MatchmakingJobMaxAggregateInputType
  }

  export type MatchmakingJobGroupByOutputType = {
    id: string
    filterJSON: JsonValue
    status: string
    createdAt: Date
    completedAt: Date | null
    matchedCount: number
    _count: MatchmakingJobCountAggregateOutputType | null
    _avg: MatchmakingJobAvgAggregateOutputType | null
    _sum: MatchmakingJobSumAggregateOutputType | null
    _min: MatchmakingJobMinAggregateOutputType | null
    _max: MatchmakingJobMaxAggregateOutputType | null
  }

  type GetMatchmakingJobGroupByPayload<T extends MatchmakingJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchmakingJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchmakingJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchmakingJobGroupByOutputType[P]>
            : GetScalarType<T[P], MatchmakingJobGroupByOutputType[P]>
        }
      >
    >


  export type MatchmakingJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filterJSON?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
    matchedCount?: boolean
  }, ExtArgs["result"]["matchmakingJob"]>

  export type MatchmakingJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filterJSON?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
    matchedCount?: boolean
  }, ExtArgs["result"]["matchmakingJob"]>

  export type MatchmakingJobSelectScalar = {
    id?: boolean
    filterJSON?: boolean
    status?: boolean
    createdAt?: boolean
    completedAt?: boolean
    matchedCount?: boolean
  }


  export type $MatchmakingJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchmakingJob"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filterJSON: Prisma.JsonValue
      status: string
      createdAt: Date
      completedAt: Date | null
      matchedCount: number
    }, ExtArgs["result"]["matchmakingJob"]>
    composites: {}
  }

  type MatchmakingJobGetPayload<S extends boolean | null | undefined | MatchmakingJobDefaultArgs> = $Result.GetResult<Prisma.$MatchmakingJobPayload, S>

  type MatchmakingJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchmakingJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchmakingJobCountAggregateInputType | true
    }

  export interface MatchmakingJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchmakingJob'], meta: { name: 'MatchmakingJob' } }
    /**
     * Find zero or one MatchmakingJob that matches the filter.
     * @param {MatchmakingJobFindUniqueArgs} args - Arguments to find a MatchmakingJob
     * @example
     * // Get one MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchmakingJobFindUniqueArgs>(args: SelectSubset<T, MatchmakingJobFindUniqueArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchmakingJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchmakingJobFindUniqueOrThrowArgs} args - Arguments to find a MatchmakingJob
     * @example
     * // Get one MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchmakingJobFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchmakingJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchmakingJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobFindFirstArgs} args - Arguments to find a MatchmakingJob
     * @example
     * // Get one MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchmakingJobFindFirstArgs>(args?: SelectSubset<T, MatchmakingJobFindFirstArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchmakingJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobFindFirstOrThrowArgs} args - Arguments to find a MatchmakingJob
     * @example
     * // Get one MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchmakingJobFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchmakingJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchmakingJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchmakingJobs
     * const matchmakingJobs = await prisma.matchmakingJob.findMany()
     * 
     * // Get first 10 MatchmakingJobs
     * const matchmakingJobs = await prisma.matchmakingJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchmakingJobWithIdOnly = await prisma.matchmakingJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchmakingJobFindManyArgs>(args?: SelectSubset<T, MatchmakingJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchmakingJob.
     * @param {MatchmakingJobCreateArgs} args - Arguments to create a MatchmakingJob.
     * @example
     * // Create one MatchmakingJob
     * const MatchmakingJob = await prisma.matchmakingJob.create({
     *   data: {
     *     // ... data to create a MatchmakingJob
     *   }
     * })
     * 
     */
    create<T extends MatchmakingJobCreateArgs>(args: SelectSubset<T, MatchmakingJobCreateArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchmakingJobs.
     * @param {MatchmakingJobCreateManyArgs} args - Arguments to create many MatchmakingJobs.
     * @example
     * // Create many MatchmakingJobs
     * const matchmakingJob = await prisma.matchmakingJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchmakingJobCreateManyArgs>(args?: SelectSubset<T, MatchmakingJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchmakingJobs and returns the data saved in the database.
     * @param {MatchmakingJobCreateManyAndReturnArgs} args - Arguments to create many MatchmakingJobs.
     * @example
     * // Create many MatchmakingJobs
     * const matchmakingJob = await prisma.matchmakingJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchmakingJobs and only return the `id`
     * const matchmakingJobWithIdOnly = await prisma.matchmakingJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchmakingJobCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchmakingJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MatchmakingJob.
     * @param {MatchmakingJobDeleteArgs} args - Arguments to delete one MatchmakingJob.
     * @example
     * // Delete one MatchmakingJob
     * const MatchmakingJob = await prisma.matchmakingJob.delete({
     *   where: {
     *     // ... filter to delete one MatchmakingJob
     *   }
     * })
     * 
     */
    delete<T extends MatchmakingJobDeleteArgs>(args: SelectSubset<T, MatchmakingJobDeleteArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchmakingJob.
     * @param {MatchmakingJobUpdateArgs} args - Arguments to update one MatchmakingJob.
     * @example
     * // Update one MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchmakingJobUpdateArgs>(args: SelectSubset<T, MatchmakingJobUpdateArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchmakingJobs.
     * @param {MatchmakingJobDeleteManyArgs} args - Arguments to filter MatchmakingJobs to delete.
     * @example
     * // Delete a few MatchmakingJobs
     * const { count } = await prisma.matchmakingJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchmakingJobDeleteManyArgs>(args?: SelectSubset<T, MatchmakingJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchmakingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchmakingJobs
     * const matchmakingJob = await prisma.matchmakingJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchmakingJobUpdateManyArgs>(args: SelectSubset<T, MatchmakingJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchmakingJob.
     * @param {MatchmakingJobUpsertArgs} args - Arguments to update or create a MatchmakingJob.
     * @example
     * // Update or create a MatchmakingJob
     * const matchmakingJob = await prisma.matchmakingJob.upsert({
     *   create: {
     *     // ... data to create a MatchmakingJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchmakingJob we want to update
     *   }
     * })
     */
    upsert<T extends MatchmakingJobUpsertArgs>(args: SelectSubset<T, MatchmakingJobUpsertArgs<ExtArgs>>): Prisma__MatchmakingJobClient<$Result.GetResult<Prisma.$MatchmakingJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchmakingJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobCountArgs} args - Arguments to filter MatchmakingJobs to count.
     * @example
     * // Count the number of MatchmakingJobs
     * const count = await prisma.matchmakingJob.count({
     *   where: {
     *     // ... the filter for the MatchmakingJobs we want to count
     *   }
     * })
    **/
    count<T extends MatchmakingJobCountArgs>(
      args?: Subset<T, MatchmakingJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchmakingJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchmakingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchmakingJobAggregateArgs>(args: Subset<T, MatchmakingJobAggregateArgs>): Prisma.PrismaPromise<GetMatchmakingJobAggregateType<T>>

    /**
     * Group by MatchmakingJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchmakingJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchmakingJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchmakingJobGroupByArgs['orderBy'] }
        : { orderBy?: MatchmakingJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchmakingJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchmakingJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchmakingJob model
   */
  readonly fields: MatchmakingJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchmakingJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchmakingJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchmakingJob model
   */ 
  interface MatchmakingJobFieldRefs {
    readonly id: FieldRef<"MatchmakingJob", 'String'>
    readonly filterJSON: FieldRef<"MatchmakingJob", 'Json'>
    readonly status: FieldRef<"MatchmakingJob", 'String'>
    readonly createdAt: FieldRef<"MatchmakingJob", 'DateTime'>
    readonly completedAt: FieldRef<"MatchmakingJob", 'DateTime'>
    readonly matchedCount: FieldRef<"MatchmakingJob", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MatchmakingJob findUnique
   */
  export type MatchmakingJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter, which MatchmakingJob to fetch.
     */
    where: MatchmakingJobWhereUniqueInput
  }

  /**
   * MatchmakingJob findUniqueOrThrow
   */
  export type MatchmakingJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter, which MatchmakingJob to fetch.
     */
    where: MatchmakingJobWhereUniqueInput
  }

  /**
   * MatchmakingJob findFirst
   */
  export type MatchmakingJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter, which MatchmakingJob to fetch.
     */
    where?: MatchmakingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingJobs to fetch.
     */
    orderBy?: MatchmakingJobOrderByWithRelationInput | MatchmakingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchmakingJobs.
     */
    cursor?: MatchmakingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchmakingJobs.
     */
    distinct?: MatchmakingJobScalarFieldEnum | MatchmakingJobScalarFieldEnum[]
  }

  /**
   * MatchmakingJob findFirstOrThrow
   */
  export type MatchmakingJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter, which MatchmakingJob to fetch.
     */
    where?: MatchmakingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingJobs to fetch.
     */
    orderBy?: MatchmakingJobOrderByWithRelationInput | MatchmakingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchmakingJobs.
     */
    cursor?: MatchmakingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchmakingJobs.
     */
    distinct?: MatchmakingJobScalarFieldEnum | MatchmakingJobScalarFieldEnum[]
  }

  /**
   * MatchmakingJob findMany
   */
  export type MatchmakingJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter, which MatchmakingJobs to fetch.
     */
    where?: MatchmakingJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchmakingJobs to fetch.
     */
    orderBy?: MatchmakingJobOrderByWithRelationInput | MatchmakingJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchmakingJobs.
     */
    cursor?: MatchmakingJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchmakingJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchmakingJobs.
     */
    skip?: number
    distinct?: MatchmakingJobScalarFieldEnum | MatchmakingJobScalarFieldEnum[]
  }

  /**
   * MatchmakingJob create
   */
  export type MatchmakingJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * The data needed to create a MatchmakingJob.
     */
    data: XOR<MatchmakingJobCreateInput, MatchmakingJobUncheckedCreateInput>
  }

  /**
   * MatchmakingJob createMany
   */
  export type MatchmakingJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchmakingJobs.
     */
    data: MatchmakingJobCreateManyInput | MatchmakingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchmakingJob createManyAndReturn
   */
  export type MatchmakingJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MatchmakingJobs.
     */
    data: MatchmakingJobCreateManyInput | MatchmakingJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchmakingJob update
   */
  export type MatchmakingJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * The data needed to update a MatchmakingJob.
     */
    data: XOR<MatchmakingJobUpdateInput, MatchmakingJobUncheckedUpdateInput>
    /**
     * Choose, which MatchmakingJob to update.
     */
    where: MatchmakingJobWhereUniqueInput
  }

  /**
   * MatchmakingJob updateMany
   */
  export type MatchmakingJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchmakingJobs.
     */
    data: XOR<MatchmakingJobUpdateManyMutationInput, MatchmakingJobUncheckedUpdateManyInput>
    /**
     * Filter which MatchmakingJobs to update
     */
    where?: MatchmakingJobWhereInput
  }

  /**
   * MatchmakingJob upsert
   */
  export type MatchmakingJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * The filter to search for the MatchmakingJob to update in case it exists.
     */
    where: MatchmakingJobWhereUniqueInput
    /**
     * In case the MatchmakingJob found by the `where` argument doesn't exist, create a new MatchmakingJob with this data.
     */
    create: XOR<MatchmakingJobCreateInput, MatchmakingJobUncheckedCreateInput>
    /**
     * In case the MatchmakingJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchmakingJobUpdateInput, MatchmakingJobUncheckedUpdateInput>
  }

  /**
   * MatchmakingJob delete
   */
  export type MatchmakingJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
    /**
     * Filter which MatchmakingJob to delete.
     */
    where: MatchmakingJobWhereUniqueInput
  }

  /**
   * MatchmakingJob deleteMany
   */
  export type MatchmakingJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchmakingJobs to delete
     */
    where?: MatchmakingJobWhereInput
  }

  /**
   * MatchmakingJob without action
   */
  export type MatchmakingJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchmakingJob
     */
    select?: MatchmakingJobSelect<ExtArgs> | null
  }


  /**
   * Model CrmActivity
   */

  export type AggregateCrmActivity = {
    _count: CrmActivityCountAggregateOutputType | null
    _min: CrmActivityMinAggregateOutputType | null
    _max: CrmActivityMaxAggregateOutputType | null
  }

  export type CrmActivityMinAggregateOutputType = {
    id: string | null
    type: string | null
    propertyId: string | null
    leadId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CrmActivityMaxAggregateOutputType = {
    id: string | null
    type: string | null
    propertyId: string | null
    leadId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CrmActivityCountAggregateOutputType = {
    id: number
    type: number
    propertyId: number
    leadId: number
    userId: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type CrmActivityMinAggregateInputType = {
    id?: true
    type?: true
    propertyId?: true
    leadId?: true
    userId?: true
    createdAt?: true
  }

  export type CrmActivityMaxAggregateInputType = {
    id?: true
    type?: true
    propertyId?: true
    leadId?: true
    userId?: true
    createdAt?: true
  }

  export type CrmActivityCountAggregateInputType = {
    id?: true
    type?: true
    propertyId?: true
    leadId?: true
    userId?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type CrmActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrmActivity to aggregate.
     */
    where?: CrmActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrmActivities to fetch.
     */
    orderBy?: CrmActivityOrderByWithRelationInput | CrmActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CrmActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrmActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrmActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CrmActivities
    **/
    _count?: true | CrmActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CrmActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CrmActivityMaxAggregateInputType
  }

  export type GetCrmActivityAggregateType<T extends CrmActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateCrmActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCrmActivity[P]>
      : GetScalarType<T[P], AggregateCrmActivity[P]>
  }




  export type CrmActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrmActivityWhereInput
    orderBy?: CrmActivityOrderByWithAggregationInput | CrmActivityOrderByWithAggregationInput[]
    by: CrmActivityScalarFieldEnum[] | CrmActivityScalarFieldEnum
    having?: CrmActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CrmActivityCountAggregateInputType | true
    _min?: CrmActivityMinAggregateInputType
    _max?: CrmActivityMaxAggregateInputType
  }

  export type CrmActivityGroupByOutputType = {
    id: string
    type: string
    propertyId: string | null
    leadId: string | null
    userId: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: CrmActivityCountAggregateOutputType | null
    _min: CrmActivityMinAggregateOutputType | null
    _max: CrmActivityMaxAggregateOutputType | null
  }

  type GetCrmActivityGroupByPayload<T extends CrmActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CrmActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CrmActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CrmActivityGroupByOutputType[P]>
            : GetScalarType<T[P], CrmActivityGroupByOutputType[P]>
        }
      >
    >


  export type CrmActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    propertyId?: boolean
    leadId?: boolean
    userId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["crmActivity"]>

  export type CrmActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    propertyId?: boolean
    leadId?: boolean
    userId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["crmActivity"]>

  export type CrmActivitySelectScalar = {
    id?: boolean
    type?: boolean
    propertyId?: boolean
    leadId?: boolean
    userId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }


  export type $CrmActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CrmActivity"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      propertyId: string | null
      leadId: string | null
      userId: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["crmActivity"]>
    composites: {}
  }

  type CrmActivityGetPayload<S extends boolean | null | undefined | CrmActivityDefaultArgs> = $Result.GetResult<Prisma.$CrmActivityPayload, S>

  type CrmActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CrmActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CrmActivityCountAggregateInputType | true
    }

  export interface CrmActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CrmActivity'], meta: { name: 'CrmActivity' } }
    /**
     * Find zero or one CrmActivity that matches the filter.
     * @param {CrmActivityFindUniqueArgs} args - Arguments to find a CrmActivity
     * @example
     * // Get one CrmActivity
     * const crmActivity = await prisma.crmActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CrmActivityFindUniqueArgs>(args: SelectSubset<T, CrmActivityFindUniqueArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CrmActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CrmActivityFindUniqueOrThrowArgs} args - Arguments to find a CrmActivity
     * @example
     * // Get one CrmActivity
     * const crmActivity = await prisma.crmActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CrmActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, CrmActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CrmActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityFindFirstArgs} args - Arguments to find a CrmActivity
     * @example
     * // Get one CrmActivity
     * const crmActivity = await prisma.crmActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CrmActivityFindFirstArgs>(args?: SelectSubset<T, CrmActivityFindFirstArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CrmActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityFindFirstOrThrowArgs} args - Arguments to find a CrmActivity
     * @example
     * // Get one CrmActivity
     * const crmActivity = await prisma.crmActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CrmActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, CrmActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CrmActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CrmActivities
     * const crmActivities = await prisma.crmActivity.findMany()
     * 
     * // Get first 10 CrmActivities
     * const crmActivities = await prisma.crmActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const crmActivityWithIdOnly = await prisma.crmActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CrmActivityFindManyArgs>(args?: SelectSubset<T, CrmActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CrmActivity.
     * @param {CrmActivityCreateArgs} args - Arguments to create a CrmActivity.
     * @example
     * // Create one CrmActivity
     * const CrmActivity = await prisma.crmActivity.create({
     *   data: {
     *     // ... data to create a CrmActivity
     *   }
     * })
     * 
     */
    create<T extends CrmActivityCreateArgs>(args: SelectSubset<T, CrmActivityCreateArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CrmActivities.
     * @param {CrmActivityCreateManyArgs} args - Arguments to create many CrmActivities.
     * @example
     * // Create many CrmActivities
     * const crmActivity = await prisma.crmActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CrmActivityCreateManyArgs>(args?: SelectSubset<T, CrmActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CrmActivities and returns the data saved in the database.
     * @param {CrmActivityCreateManyAndReturnArgs} args - Arguments to create many CrmActivities.
     * @example
     * // Create many CrmActivities
     * const crmActivity = await prisma.crmActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CrmActivities and only return the `id`
     * const crmActivityWithIdOnly = await prisma.crmActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CrmActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, CrmActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CrmActivity.
     * @param {CrmActivityDeleteArgs} args - Arguments to delete one CrmActivity.
     * @example
     * // Delete one CrmActivity
     * const CrmActivity = await prisma.crmActivity.delete({
     *   where: {
     *     // ... filter to delete one CrmActivity
     *   }
     * })
     * 
     */
    delete<T extends CrmActivityDeleteArgs>(args: SelectSubset<T, CrmActivityDeleteArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CrmActivity.
     * @param {CrmActivityUpdateArgs} args - Arguments to update one CrmActivity.
     * @example
     * // Update one CrmActivity
     * const crmActivity = await prisma.crmActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CrmActivityUpdateArgs>(args: SelectSubset<T, CrmActivityUpdateArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CrmActivities.
     * @param {CrmActivityDeleteManyArgs} args - Arguments to filter CrmActivities to delete.
     * @example
     * // Delete a few CrmActivities
     * const { count } = await prisma.crmActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CrmActivityDeleteManyArgs>(args?: SelectSubset<T, CrmActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CrmActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CrmActivities
     * const crmActivity = await prisma.crmActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CrmActivityUpdateManyArgs>(args: SelectSubset<T, CrmActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CrmActivity.
     * @param {CrmActivityUpsertArgs} args - Arguments to update or create a CrmActivity.
     * @example
     * // Update or create a CrmActivity
     * const crmActivity = await prisma.crmActivity.upsert({
     *   create: {
     *     // ... data to create a CrmActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CrmActivity we want to update
     *   }
     * })
     */
    upsert<T extends CrmActivityUpsertArgs>(args: SelectSubset<T, CrmActivityUpsertArgs<ExtArgs>>): Prisma__CrmActivityClient<$Result.GetResult<Prisma.$CrmActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CrmActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityCountArgs} args - Arguments to filter CrmActivities to count.
     * @example
     * // Count the number of CrmActivities
     * const count = await prisma.crmActivity.count({
     *   where: {
     *     // ... the filter for the CrmActivities we want to count
     *   }
     * })
    **/
    count<T extends CrmActivityCountArgs>(
      args?: Subset<T, CrmActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CrmActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CrmActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CrmActivityAggregateArgs>(args: Subset<T, CrmActivityAggregateArgs>): Prisma.PrismaPromise<GetCrmActivityAggregateType<T>>

    /**
     * Group by CrmActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrmActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CrmActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CrmActivityGroupByArgs['orderBy'] }
        : { orderBy?: CrmActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CrmActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCrmActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CrmActivity model
   */
  readonly fields: CrmActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CrmActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CrmActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CrmActivity model
   */ 
  interface CrmActivityFieldRefs {
    readonly id: FieldRef<"CrmActivity", 'String'>
    readonly type: FieldRef<"CrmActivity", 'String'>
    readonly propertyId: FieldRef<"CrmActivity", 'String'>
    readonly leadId: FieldRef<"CrmActivity", 'String'>
    readonly userId: FieldRef<"CrmActivity", 'String'>
    readonly metadata: FieldRef<"CrmActivity", 'Json'>
    readonly createdAt: FieldRef<"CrmActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CrmActivity findUnique
   */
  export type CrmActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter, which CrmActivity to fetch.
     */
    where: CrmActivityWhereUniqueInput
  }

  /**
   * CrmActivity findUniqueOrThrow
   */
  export type CrmActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter, which CrmActivity to fetch.
     */
    where: CrmActivityWhereUniqueInput
  }

  /**
   * CrmActivity findFirst
   */
  export type CrmActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter, which CrmActivity to fetch.
     */
    where?: CrmActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrmActivities to fetch.
     */
    orderBy?: CrmActivityOrderByWithRelationInput | CrmActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrmActivities.
     */
    cursor?: CrmActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrmActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrmActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrmActivities.
     */
    distinct?: CrmActivityScalarFieldEnum | CrmActivityScalarFieldEnum[]
  }

  /**
   * CrmActivity findFirstOrThrow
   */
  export type CrmActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter, which CrmActivity to fetch.
     */
    where?: CrmActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrmActivities to fetch.
     */
    orderBy?: CrmActivityOrderByWithRelationInput | CrmActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrmActivities.
     */
    cursor?: CrmActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrmActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrmActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrmActivities.
     */
    distinct?: CrmActivityScalarFieldEnum | CrmActivityScalarFieldEnum[]
  }

  /**
   * CrmActivity findMany
   */
  export type CrmActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter, which CrmActivities to fetch.
     */
    where?: CrmActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrmActivities to fetch.
     */
    orderBy?: CrmActivityOrderByWithRelationInput | CrmActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CrmActivities.
     */
    cursor?: CrmActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrmActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrmActivities.
     */
    skip?: number
    distinct?: CrmActivityScalarFieldEnum | CrmActivityScalarFieldEnum[]
  }

  /**
   * CrmActivity create
   */
  export type CrmActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * The data needed to create a CrmActivity.
     */
    data: XOR<CrmActivityCreateInput, CrmActivityUncheckedCreateInput>
  }

  /**
   * CrmActivity createMany
   */
  export type CrmActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CrmActivities.
     */
    data: CrmActivityCreateManyInput | CrmActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CrmActivity createManyAndReturn
   */
  export type CrmActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CrmActivities.
     */
    data: CrmActivityCreateManyInput | CrmActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CrmActivity update
   */
  export type CrmActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * The data needed to update a CrmActivity.
     */
    data: XOR<CrmActivityUpdateInput, CrmActivityUncheckedUpdateInput>
    /**
     * Choose, which CrmActivity to update.
     */
    where: CrmActivityWhereUniqueInput
  }

  /**
   * CrmActivity updateMany
   */
  export type CrmActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CrmActivities.
     */
    data: XOR<CrmActivityUpdateManyMutationInput, CrmActivityUncheckedUpdateManyInput>
    /**
     * Filter which CrmActivities to update
     */
    where?: CrmActivityWhereInput
  }

  /**
   * CrmActivity upsert
   */
  export type CrmActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * The filter to search for the CrmActivity to update in case it exists.
     */
    where: CrmActivityWhereUniqueInput
    /**
     * In case the CrmActivity found by the `where` argument doesn't exist, create a new CrmActivity with this data.
     */
    create: XOR<CrmActivityCreateInput, CrmActivityUncheckedCreateInput>
    /**
     * In case the CrmActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CrmActivityUpdateInput, CrmActivityUncheckedUpdateInput>
  }

  /**
   * CrmActivity delete
   */
  export type CrmActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
    /**
     * Filter which CrmActivity to delete.
     */
    where: CrmActivityWhereUniqueInput
  }

  /**
   * CrmActivity deleteMany
   */
  export type CrmActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrmActivities to delete
     */
    where?: CrmActivityWhereInput
  }

  /**
   * CrmActivity without action
   */
  export type CrmActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrmActivity
     */
    select?: CrmActivitySelect<ExtArgs> | null
  }


  /**
   * Model CallTranscript
   */

  export type AggregateCallTranscript = {
    _count: CallTranscriptCountAggregateOutputType | null
    _min: CallTranscriptMinAggregateOutputType | null
    _max: CallTranscriptMaxAggregateOutputType | null
  }

  export type CallTranscriptMinAggregateOutputType = {
    id: string | null
    callSid: string | null
    leadId: string | null
    userId: string | null
    audioUrl: string | null
    transcript: string | null
    recordingUrl: string | null
    transcriptUrl: string | null
    dtmfCaptured: string | null
    createdAt: Date | null
  }

  export type CallTranscriptMaxAggregateOutputType = {
    id: string | null
    callSid: string | null
    leadId: string | null
    userId: string | null
    audioUrl: string | null
    transcript: string | null
    recordingUrl: string | null
    transcriptUrl: string | null
    dtmfCaptured: string | null
    createdAt: Date | null
  }

  export type CallTranscriptCountAggregateOutputType = {
    id: number
    callSid: number
    leadId: number
    userId: number
    audioUrl: number
    transcript: number
    recordingUrl: number
    transcriptUrl: number
    dtmfCaptured: number
    createdAt: number
    _all: number
  }


  export type CallTranscriptMinAggregateInputType = {
    id?: true
    callSid?: true
    leadId?: true
    userId?: true
    audioUrl?: true
    transcript?: true
    recordingUrl?: true
    transcriptUrl?: true
    dtmfCaptured?: true
    createdAt?: true
  }

  export type CallTranscriptMaxAggregateInputType = {
    id?: true
    callSid?: true
    leadId?: true
    userId?: true
    audioUrl?: true
    transcript?: true
    recordingUrl?: true
    transcriptUrl?: true
    dtmfCaptured?: true
    createdAt?: true
  }

  export type CallTranscriptCountAggregateInputType = {
    id?: true
    callSid?: true
    leadId?: true
    userId?: true
    audioUrl?: true
    transcript?: true
    recordingUrl?: true
    transcriptUrl?: true
    dtmfCaptured?: true
    createdAt?: true
    _all?: true
  }

  export type CallTranscriptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallTranscript to aggregate.
     */
    where?: CallTranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallTranscripts to fetch.
     */
    orderBy?: CallTranscriptOrderByWithRelationInput | CallTranscriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CallTranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallTranscripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallTranscripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CallTranscripts
    **/
    _count?: true | CallTranscriptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CallTranscriptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CallTranscriptMaxAggregateInputType
  }

  export type GetCallTranscriptAggregateType<T extends CallTranscriptAggregateArgs> = {
        [P in keyof T & keyof AggregateCallTranscript]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCallTranscript[P]>
      : GetScalarType<T[P], AggregateCallTranscript[P]>
  }




  export type CallTranscriptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallTranscriptWhereInput
    orderBy?: CallTranscriptOrderByWithAggregationInput | CallTranscriptOrderByWithAggregationInput[]
    by: CallTranscriptScalarFieldEnum[] | CallTranscriptScalarFieldEnum
    having?: CallTranscriptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CallTranscriptCountAggregateInputType | true
    _min?: CallTranscriptMinAggregateInputType
    _max?: CallTranscriptMaxAggregateInputType
  }

  export type CallTranscriptGroupByOutputType = {
    id: string
    callSid: string
    leadId: string | null
    userId: string | null
    audioUrl: string | null
    transcript: string | null
    recordingUrl: string | null
    transcriptUrl: string | null
    dtmfCaptured: string | null
    createdAt: Date
    _count: CallTranscriptCountAggregateOutputType | null
    _min: CallTranscriptMinAggregateOutputType | null
    _max: CallTranscriptMaxAggregateOutputType | null
  }

  type GetCallTranscriptGroupByPayload<T extends CallTranscriptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CallTranscriptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CallTranscriptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CallTranscriptGroupByOutputType[P]>
            : GetScalarType<T[P], CallTranscriptGroupByOutputType[P]>
        }
      >
    >


  export type CallTranscriptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callSid?: boolean
    leadId?: boolean
    userId?: boolean
    audioUrl?: boolean
    transcript?: boolean
    recordingUrl?: boolean
    transcriptUrl?: boolean
    dtmfCaptured?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["callTranscript"]>

  export type CallTranscriptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callSid?: boolean
    leadId?: boolean
    userId?: boolean
    audioUrl?: boolean
    transcript?: boolean
    recordingUrl?: boolean
    transcriptUrl?: boolean
    dtmfCaptured?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["callTranscript"]>

  export type CallTranscriptSelectScalar = {
    id?: boolean
    callSid?: boolean
    leadId?: boolean
    userId?: boolean
    audioUrl?: boolean
    transcript?: boolean
    recordingUrl?: boolean
    transcriptUrl?: boolean
    dtmfCaptured?: boolean
    createdAt?: boolean
  }


  export type $CallTranscriptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CallTranscript"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      callSid: string
      leadId: string | null
      userId: string | null
      audioUrl: string | null
      transcript: string | null
      recordingUrl: string | null
      transcriptUrl: string | null
      dtmfCaptured: string | null
      createdAt: Date
    }, ExtArgs["result"]["callTranscript"]>
    composites: {}
  }

  type CallTranscriptGetPayload<S extends boolean | null | undefined | CallTranscriptDefaultArgs> = $Result.GetResult<Prisma.$CallTranscriptPayload, S>

  type CallTranscriptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CallTranscriptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CallTranscriptCountAggregateInputType | true
    }

  export interface CallTranscriptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CallTranscript'], meta: { name: 'CallTranscript' } }
    /**
     * Find zero or one CallTranscript that matches the filter.
     * @param {CallTranscriptFindUniqueArgs} args - Arguments to find a CallTranscript
     * @example
     * // Get one CallTranscript
     * const callTranscript = await prisma.callTranscript.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CallTranscriptFindUniqueArgs>(args: SelectSubset<T, CallTranscriptFindUniqueArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CallTranscript that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CallTranscriptFindUniqueOrThrowArgs} args - Arguments to find a CallTranscript
     * @example
     * // Get one CallTranscript
     * const callTranscript = await prisma.callTranscript.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CallTranscriptFindUniqueOrThrowArgs>(args: SelectSubset<T, CallTranscriptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CallTranscript that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptFindFirstArgs} args - Arguments to find a CallTranscript
     * @example
     * // Get one CallTranscript
     * const callTranscript = await prisma.callTranscript.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CallTranscriptFindFirstArgs>(args?: SelectSubset<T, CallTranscriptFindFirstArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CallTranscript that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptFindFirstOrThrowArgs} args - Arguments to find a CallTranscript
     * @example
     * // Get one CallTranscript
     * const callTranscript = await prisma.callTranscript.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CallTranscriptFindFirstOrThrowArgs>(args?: SelectSubset<T, CallTranscriptFindFirstOrThrowArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CallTranscripts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CallTranscripts
     * const callTranscripts = await prisma.callTranscript.findMany()
     * 
     * // Get first 10 CallTranscripts
     * const callTranscripts = await prisma.callTranscript.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const callTranscriptWithIdOnly = await prisma.callTranscript.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CallTranscriptFindManyArgs>(args?: SelectSubset<T, CallTranscriptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CallTranscript.
     * @param {CallTranscriptCreateArgs} args - Arguments to create a CallTranscript.
     * @example
     * // Create one CallTranscript
     * const CallTranscript = await prisma.callTranscript.create({
     *   data: {
     *     // ... data to create a CallTranscript
     *   }
     * })
     * 
     */
    create<T extends CallTranscriptCreateArgs>(args: SelectSubset<T, CallTranscriptCreateArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CallTranscripts.
     * @param {CallTranscriptCreateManyArgs} args - Arguments to create many CallTranscripts.
     * @example
     * // Create many CallTranscripts
     * const callTranscript = await prisma.callTranscript.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CallTranscriptCreateManyArgs>(args?: SelectSubset<T, CallTranscriptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CallTranscripts and returns the data saved in the database.
     * @param {CallTranscriptCreateManyAndReturnArgs} args - Arguments to create many CallTranscripts.
     * @example
     * // Create many CallTranscripts
     * const callTranscript = await prisma.callTranscript.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CallTranscripts and only return the `id`
     * const callTranscriptWithIdOnly = await prisma.callTranscript.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CallTranscriptCreateManyAndReturnArgs>(args?: SelectSubset<T, CallTranscriptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CallTranscript.
     * @param {CallTranscriptDeleteArgs} args - Arguments to delete one CallTranscript.
     * @example
     * // Delete one CallTranscript
     * const CallTranscript = await prisma.callTranscript.delete({
     *   where: {
     *     // ... filter to delete one CallTranscript
     *   }
     * })
     * 
     */
    delete<T extends CallTranscriptDeleteArgs>(args: SelectSubset<T, CallTranscriptDeleteArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CallTranscript.
     * @param {CallTranscriptUpdateArgs} args - Arguments to update one CallTranscript.
     * @example
     * // Update one CallTranscript
     * const callTranscript = await prisma.callTranscript.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CallTranscriptUpdateArgs>(args: SelectSubset<T, CallTranscriptUpdateArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CallTranscripts.
     * @param {CallTranscriptDeleteManyArgs} args - Arguments to filter CallTranscripts to delete.
     * @example
     * // Delete a few CallTranscripts
     * const { count } = await prisma.callTranscript.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CallTranscriptDeleteManyArgs>(args?: SelectSubset<T, CallTranscriptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CallTranscripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CallTranscripts
     * const callTranscript = await prisma.callTranscript.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CallTranscriptUpdateManyArgs>(args: SelectSubset<T, CallTranscriptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CallTranscript.
     * @param {CallTranscriptUpsertArgs} args - Arguments to update or create a CallTranscript.
     * @example
     * // Update or create a CallTranscript
     * const callTranscript = await prisma.callTranscript.upsert({
     *   create: {
     *     // ... data to create a CallTranscript
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CallTranscript we want to update
     *   }
     * })
     */
    upsert<T extends CallTranscriptUpsertArgs>(args: SelectSubset<T, CallTranscriptUpsertArgs<ExtArgs>>): Prisma__CallTranscriptClient<$Result.GetResult<Prisma.$CallTranscriptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CallTranscripts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptCountArgs} args - Arguments to filter CallTranscripts to count.
     * @example
     * // Count the number of CallTranscripts
     * const count = await prisma.callTranscript.count({
     *   where: {
     *     // ... the filter for the CallTranscripts we want to count
     *   }
     * })
    **/
    count<T extends CallTranscriptCountArgs>(
      args?: Subset<T, CallTranscriptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CallTranscriptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CallTranscript.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CallTranscriptAggregateArgs>(args: Subset<T, CallTranscriptAggregateArgs>): Prisma.PrismaPromise<GetCallTranscriptAggregateType<T>>

    /**
     * Group by CallTranscript.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallTranscriptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CallTranscriptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CallTranscriptGroupByArgs['orderBy'] }
        : { orderBy?: CallTranscriptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CallTranscriptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallTranscriptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CallTranscript model
   */
  readonly fields: CallTranscriptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CallTranscript.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CallTranscriptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CallTranscript model
   */ 
  interface CallTranscriptFieldRefs {
    readonly id: FieldRef<"CallTranscript", 'String'>
    readonly callSid: FieldRef<"CallTranscript", 'String'>
    readonly leadId: FieldRef<"CallTranscript", 'String'>
    readonly userId: FieldRef<"CallTranscript", 'String'>
    readonly audioUrl: FieldRef<"CallTranscript", 'String'>
    readonly transcript: FieldRef<"CallTranscript", 'String'>
    readonly recordingUrl: FieldRef<"CallTranscript", 'String'>
    readonly transcriptUrl: FieldRef<"CallTranscript", 'String'>
    readonly dtmfCaptured: FieldRef<"CallTranscript", 'String'>
    readonly createdAt: FieldRef<"CallTranscript", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CallTranscript findUnique
   */
  export type CallTranscriptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter, which CallTranscript to fetch.
     */
    where: CallTranscriptWhereUniqueInput
  }

  /**
   * CallTranscript findUniqueOrThrow
   */
  export type CallTranscriptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter, which CallTranscript to fetch.
     */
    where: CallTranscriptWhereUniqueInput
  }

  /**
   * CallTranscript findFirst
   */
  export type CallTranscriptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter, which CallTranscript to fetch.
     */
    where?: CallTranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallTranscripts to fetch.
     */
    orderBy?: CallTranscriptOrderByWithRelationInput | CallTranscriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallTranscripts.
     */
    cursor?: CallTranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallTranscripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallTranscripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallTranscripts.
     */
    distinct?: CallTranscriptScalarFieldEnum | CallTranscriptScalarFieldEnum[]
  }

  /**
   * CallTranscript findFirstOrThrow
   */
  export type CallTranscriptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter, which CallTranscript to fetch.
     */
    where?: CallTranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallTranscripts to fetch.
     */
    orderBy?: CallTranscriptOrderByWithRelationInput | CallTranscriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallTranscripts.
     */
    cursor?: CallTranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallTranscripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallTranscripts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallTranscripts.
     */
    distinct?: CallTranscriptScalarFieldEnum | CallTranscriptScalarFieldEnum[]
  }

  /**
   * CallTranscript findMany
   */
  export type CallTranscriptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter, which CallTranscripts to fetch.
     */
    where?: CallTranscriptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallTranscripts to fetch.
     */
    orderBy?: CallTranscriptOrderByWithRelationInput | CallTranscriptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CallTranscripts.
     */
    cursor?: CallTranscriptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallTranscripts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallTranscripts.
     */
    skip?: number
    distinct?: CallTranscriptScalarFieldEnum | CallTranscriptScalarFieldEnum[]
  }

  /**
   * CallTranscript create
   */
  export type CallTranscriptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * The data needed to create a CallTranscript.
     */
    data: XOR<CallTranscriptCreateInput, CallTranscriptUncheckedCreateInput>
  }

  /**
   * CallTranscript createMany
   */
  export type CallTranscriptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CallTranscripts.
     */
    data: CallTranscriptCreateManyInput | CallTranscriptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallTranscript createManyAndReturn
   */
  export type CallTranscriptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CallTranscripts.
     */
    data: CallTranscriptCreateManyInput | CallTranscriptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallTranscript update
   */
  export type CallTranscriptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * The data needed to update a CallTranscript.
     */
    data: XOR<CallTranscriptUpdateInput, CallTranscriptUncheckedUpdateInput>
    /**
     * Choose, which CallTranscript to update.
     */
    where: CallTranscriptWhereUniqueInput
  }

  /**
   * CallTranscript updateMany
   */
  export type CallTranscriptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CallTranscripts.
     */
    data: XOR<CallTranscriptUpdateManyMutationInput, CallTranscriptUncheckedUpdateManyInput>
    /**
     * Filter which CallTranscripts to update
     */
    where?: CallTranscriptWhereInput
  }

  /**
   * CallTranscript upsert
   */
  export type CallTranscriptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * The filter to search for the CallTranscript to update in case it exists.
     */
    where: CallTranscriptWhereUniqueInput
    /**
     * In case the CallTranscript found by the `where` argument doesn't exist, create a new CallTranscript with this data.
     */
    create: XOR<CallTranscriptCreateInput, CallTranscriptUncheckedCreateInput>
    /**
     * In case the CallTranscript was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CallTranscriptUpdateInput, CallTranscriptUncheckedUpdateInput>
  }

  /**
   * CallTranscript delete
   */
  export type CallTranscriptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
    /**
     * Filter which CallTranscript to delete.
     */
    where: CallTranscriptWhereUniqueInput
  }

  /**
   * CallTranscript deleteMany
   */
  export type CallTranscriptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallTranscripts to delete
     */
    where?: CallTranscriptWhereInput
  }

  /**
   * CallTranscript without action
   */
  export type CallTranscriptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallTranscript
     */
    select?: CallTranscriptSelect<ExtArgs> | null
  }


  /**
   * Model CallAnalysis
   */

  export type AggregateCallAnalysis = {
    _count: CallAnalysisCountAggregateOutputType | null
    _avg: CallAnalysisAvgAggregateOutputType | null
    _sum: CallAnalysisSumAggregateOutputType | null
    _min: CallAnalysisMinAggregateOutputType | null
    _max: CallAnalysisMaxAggregateOutputType | null
  }

  export type CallAnalysisAvgAggregateOutputType = {
    score: number | null
  }

  export type CallAnalysisSumAggregateOutputType = {
    score: number | null
  }

  export type CallAnalysisMinAggregateOutputType = {
    id: string | null
    callSid: string | null
    transcriptId: string | null
    summary: string | null
    score: number | null
    createdAt: Date | null
  }

  export type CallAnalysisMaxAggregateOutputType = {
    id: string | null
    callSid: string | null
    transcriptId: string | null
    summary: string | null
    score: number | null
    createdAt: Date | null
  }

  export type CallAnalysisCountAggregateOutputType = {
    id: number
    callSid: number
    transcriptId: number
    summary: number
    score: number
    tags: number
    createdAt: number
    _all: number
  }


  export type CallAnalysisAvgAggregateInputType = {
    score?: true
  }

  export type CallAnalysisSumAggregateInputType = {
    score?: true
  }

  export type CallAnalysisMinAggregateInputType = {
    id?: true
    callSid?: true
    transcriptId?: true
    summary?: true
    score?: true
    createdAt?: true
  }

  export type CallAnalysisMaxAggregateInputType = {
    id?: true
    callSid?: true
    transcriptId?: true
    summary?: true
    score?: true
    createdAt?: true
  }

  export type CallAnalysisCountAggregateInputType = {
    id?: true
    callSid?: true
    transcriptId?: true
    summary?: true
    score?: true
    tags?: true
    createdAt?: true
    _all?: true
  }

  export type CallAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallAnalysis to aggregate.
     */
    where?: CallAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallAnalyses to fetch.
     */
    orderBy?: CallAnalysisOrderByWithRelationInput | CallAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CallAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CallAnalyses
    **/
    _count?: true | CallAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CallAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CallAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CallAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CallAnalysisMaxAggregateInputType
  }

  export type GetCallAnalysisAggregateType<T extends CallAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateCallAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCallAnalysis[P]>
      : GetScalarType<T[P], AggregateCallAnalysis[P]>
  }




  export type CallAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallAnalysisWhereInput
    orderBy?: CallAnalysisOrderByWithAggregationInput | CallAnalysisOrderByWithAggregationInput[]
    by: CallAnalysisScalarFieldEnum[] | CallAnalysisScalarFieldEnum
    having?: CallAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CallAnalysisCountAggregateInputType | true
    _avg?: CallAnalysisAvgAggregateInputType
    _sum?: CallAnalysisSumAggregateInputType
    _min?: CallAnalysisMinAggregateInputType
    _max?: CallAnalysisMaxAggregateInputType
  }

  export type CallAnalysisGroupByOutputType = {
    id: string
    callSid: string
    transcriptId: string
    summary: string
    score: number
    tags: string[]
    createdAt: Date
    _count: CallAnalysisCountAggregateOutputType | null
    _avg: CallAnalysisAvgAggregateOutputType | null
    _sum: CallAnalysisSumAggregateOutputType | null
    _min: CallAnalysisMinAggregateOutputType | null
    _max: CallAnalysisMaxAggregateOutputType | null
  }

  type GetCallAnalysisGroupByPayload<T extends CallAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CallAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CallAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CallAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], CallAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type CallAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callSid?: boolean
    transcriptId?: boolean
    summary?: boolean
    score?: boolean
    tags?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["callAnalysis"]>

  export type CallAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callSid?: boolean
    transcriptId?: boolean
    summary?: boolean
    score?: boolean
    tags?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["callAnalysis"]>

  export type CallAnalysisSelectScalar = {
    id?: boolean
    callSid?: boolean
    transcriptId?: boolean
    summary?: boolean
    score?: boolean
    tags?: boolean
    createdAt?: boolean
  }


  export type $CallAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CallAnalysis"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      callSid: string
      transcriptId: string
      summary: string
      score: number
      tags: string[]
      createdAt: Date
    }, ExtArgs["result"]["callAnalysis"]>
    composites: {}
  }

  type CallAnalysisGetPayload<S extends boolean | null | undefined | CallAnalysisDefaultArgs> = $Result.GetResult<Prisma.$CallAnalysisPayload, S>

  type CallAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CallAnalysisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CallAnalysisCountAggregateInputType | true
    }

  export interface CallAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CallAnalysis'], meta: { name: 'CallAnalysis' } }
    /**
     * Find zero or one CallAnalysis that matches the filter.
     * @param {CallAnalysisFindUniqueArgs} args - Arguments to find a CallAnalysis
     * @example
     * // Get one CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CallAnalysisFindUniqueArgs>(args: SelectSubset<T, CallAnalysisFindUniqueArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CallAnalysis that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CallAnalysisFindUniqueOrThrowArgs} args - Arguments to find a CallAnalysis
     * @example
     * // Get one CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CallAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, CallAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CallAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisFindFirstArgs} args - Arguments to find a CallAnalysis
     * @example
     * // Get one CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CallAnalysisFindFirstArgs>(args?: SelectSubset<T, CallAnalysisFindFirstArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CallAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisFindFirstOrThrowArgs} args - Arguments to find a CallAnalysis
     * @example
     * // Get one CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CallAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, CallAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CallAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CallAnalyses
     * const callAnalyses = await prisma.callAnalysis.findMany()
     * 
     * // Get first 10 CallAnalyses
     * const callAnalyses = await prisma.callAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const callAnalysisWithIdOnly = await prisma.callAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CallAnalysisFindManyArgs>(args?: SelectSubset<T, CallAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CallAnalysis.
     * @param {CallAnalysisCreateArgs} args - Arguments to create a CallAnalysis.
     * @example
     * // Create one CallAnalysis
     * const CallAnalysis = await prisma.callAnalysis.create({
     *   data: {
     *     // ... data to create a CallAnalysis
     *   }
     * })
     * 
     */
    create<T extends CallAnalysisCreateArgs>(args: SelectSubset<T, CallAnalysisCreateArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CallAnalyses.
     * @param {CallAnalysisCreateManyArgs} args - Arguments to create many CallAnalyses.
     * @example
     * // Create many CallAnalyses
     * const callAnalysis = await prisma.callAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CallAnalysisCreateManyArgs>(args?: SelectSubset<T, CallAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CallAnalyses and returns the data saved in the database.
     * @param {CallAnalysisCreateManyAndReturnArgs} args - Arguments to create many CallAnalyses.
     * @example
     * // Create many CallAnalyses
     * const callAnalysis = await prisma.callAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CallAnalyses and only return the `id`
     * const callAnalysisWithIdOnly = await prisma.callAnalysis.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CallAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, CallAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CallAnalysis.
     * @param {CallAnalysisDeleteArgs} args - Arguments to delete one CallAnalysis.
     * @example
     * // Delete one CallAnalysis
     * const CallAnalysis = await prisma.callAnalysis.delete({
     *   where: {
     *     // ... filter to delete one CallAnalysis
     *   }
     * })
     * 
     */
    delete<T extends CallAnalysisDeleteArgs>(args: SelectSubset<T, CallAnalysisDeleteArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CallAnalysis.
     * @param {CallAnalysisUpdateArgs} args - Arguments to update one CallAnalysis.
     * @example
     * // Update one CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CallAnalysisUpdateArgs>(args: SelectSubset<T, CallAnalysisUpdateArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CallAnalyses.
     * @param {CallAnalysisDeleteManyArgs} args - Arguments to filter CallAnalyses to delete.
     * @example
     * // Delete a few CallAnalyses
     * const { count } = await prisma.callAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CallAnalysisDeleteManyArgs>(args?: SelectSubset<T, CallAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CallAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CallAnalyses
     * const callAnalysis = await prisma.callAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CallAnalysisUpdateManyArgs>(args: SelectSubset<T, CallAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CallAnalysis.
     * @param {CallAnalysisUpsertArgs} args - Arguments to update or create a CallAnalysis.
     * @example
     * // Update or create a CallAnalysis
     * const callAnalysis = await prisma.callAnalysis.upsert({
     *   create: {
     *     // ... data to create a CallAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CallAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends CallAnalysisUpsertArgs>(args: SelectSubset<T, CallAnalysisUpsertArgs<ExtArgs>>): Prisma__CallAnalysisClient<$Result.GetResult<Prisma.$CallAnalysisPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CallAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisCountArgs} args - Arguments to filter CallAnalyses to count.
     * @example
     * // Count the number of CallAnalyses
     * const count = await prisma.callAnalysis.count({
     *   where: {
     *     // ... the filter for the CallAnalyses we want to count
     *   }
     * })
    **/
    count<T extends CallAnalysisCountArgs>(
      args?: Subset<T, CallAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CallAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CallAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CallAnalysisAggregateArgs>(args: Subset<T, CallAnalysisAggregateArgs>): Prisma.PrismaPromise<GetCallAnalysisAggregateType<T>>

    /**
     * Group by CallAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CallAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CallAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: CallAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CallAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CallAnalysis model
   */
  readonly fields: CallAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CallAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CallAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CallAnalysis model
   */ 
  interface CallAnalysisFieldRefs {
    readonly id: FieldRef<"CallAnalysis", 'String'>
    readonly callSid: FieldRef<"CallAnalysis", 'String'>
    readonly transcriptId: FieldRef<"CallAnalysis", 'String'>
    readonly summary: FieldRef<"CallAnalysis", 'String'>
    readonly score: FieldRef<"CallAnalysis", 'Float'>
    readonly tags: FieldRef<"CallAnalysis", 'String[]'>
    readonly createdAt: FieldRef<"CallAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CallAnalysis findUnique
   */
  export type CallAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which CallAnalysis to fetch.
     */
    where: CallAnalysisWhereUniqueInput
  }

  /**
   * CallAnalysis findUniqueOrThrow
   */
  export type CallAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which CallAnalysis to fetch.
     */
    where: CallAnalysisWhereUniqueInput
  }

  /**
   * CallAnalysis findFirst
   */
  export type CallAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which CallAnalysis to fetch.
     */
    where?: CallAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallAnalyses to fetch.
     */
    orderBy?: CallAnalysisOrderByWithRelationInput | CallAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallAnalyses.
     */
    cursor?: CallAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallAnalyses.
     */
    distinct?: CallAnalysisScalarFieldEnum | CallAnalysisScalarFieldEnum[]
  }

  /**
   * CallAnalysis findFirstOrThrow
   */
  export type CallAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which CallAnalysis to fetch.
     */
    where?: CallAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallAnalyses to fetch.
     */
    orderBy?: CallAnalysisOrderByWithRelationInput | CallAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallAnalyses.
     */
    cursor?: CallAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallAnalyses.
     */
    distinct?: CallAnalysisScalarFieldEnum | CallAnalysisScalarFieldEnum[]
  }

  /**
   * CallAnalysis findMany
   */
  export type CallAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter, which CallAnalyses to fetch.
     */
    where?: CallAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallAnalyses to fetch.
     */
    orderBy?: CallAnalysisOrderByWithRelationInput | CallAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CallAnalyses.
     */
    cursor?: CallAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallAnalyses.
     */
    skip?: number
    distinct?: CallAnalysisScalarFieldEnum | CallAnalysisScalarFieldEnum[]
  }

  /**
   * CallAnalysis create
   */
  export type CallAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * The data needed to create a CallAnalysis.
     */
    data: XOR<CallAnalysisCreateInput, CallAnalysisUncheckedCreateInput>
  }

  /**
   * CallAnalysis createMany
   */
  export type CallAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CallAnalyses.
     */
    data: CallAnalysisCreateManyInput | CallAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallAnalysis createManyAndReturn
   */
  export type CallAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CallAnalyses.
     */
    data: CallAnalysisCreateManyInput | CallAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallAnalysis update
   */
  export type CallAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * The data needed to update a CallAnalysis.
     */
    data: XOR<CallAnalysisUpdateInput, CallAnalysisUncheckedUpdateInput>
    /**
     * Choose, which CallAnalysis to update.
     */
    where: CallAnalysisWhereUniqueInput
  }

  /**
   * CallAnalysis updateMany
   */
  export type CallAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CallAnalyses.
     */
    data: XOR<CallAnalysisUpdateManyMutationInput, CallAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which CallAnalyses to update
     */
    where?: CallAnalysisWhereInput
  }

  /**
   * CallAnalysis upsert
   */
  export type CallAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * The filter to search for the CallAnalysis to update in case it exists.
     */
    where: CallAnalysisWhereUniqueInput
    /**
     * In case the CallAnalysis found by the `where` argument doesn't exist, create a new CallAnalysis with this data.
     */
    create: XOR<CallAnalysisCreateInput, CallAnalysisUncheckedCreateInput>
    /**
     * In case the CallAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CallAnalysisUpdateInput, CallAnalysisUncheckedUpdateInput>
  }

  /**
   * CallAnalysis delete
   */
  export type CallAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
    /**
     * Filter which CallAnalysis to delete.
     */
    where: CallAnalysisWhereUniqueInput
  }

  /**
   * CallAnalysis deleteMany
   */
  export type CallAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallAnalyses to delete
     */
    where?: CallAnalysisWhereInput
  }

  /**
   * CallAnalysis without action
   */
  export type CallAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallAnalysis
     */
    select?: CallAnalysisSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ApiCostEntryScalarFieldEnum: {
    id: 'id',
    apiType: 'apiType',
    cost: 'cost',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type ApiCostEntryScalarFieldEnum = (typeof ApiCostEntryScalarFieldEnum)[keyof typeof ApiCostEntryScalarFieldEnum]


  export const LeadScalarFieldEnum: {
    id: 'id',
    address: 'address',
    owner_name: 'owner_name',
    phone: 'phone',
    email: 'email',
    source_type: 'source_type',
    source: 'source',
    motivation_score: 'motivation_score',
    estimated_value: 'estimated_value',
    equity: 'equity',
    condition_score: 'condition_score',
    tax_debt: 'tax_debt',
    violations: 'violations',
    is_probate: 'is_probate',
    is_vacant: 'is_vacant',
    days_on_market: 'days_on_market',
    lead_score: 'lead_score',
    aiScore: 'aiScore',
    feedback_good: 'feedback_good',
    feedback_bad: 'feedback_bad',
    phones: 'phones',
    emails: 'emails',
    raw_data: 'raw_data',
    temperature_tag: 'temperature_tag',
    status: 'status',
    notes: 'notes',
    created_at: 'created_at',
    updated_at: 'updated_at',
    skip_traced_at: 'skip_traced_at',
    dnc_flag: 'dnc_flag',
    timezone: 'timezone',
    quiet_hours_start: 'quiet_hours_start',
    quiet_hours_end: 'quiet_hours_end',
    activity_log_json: 'activity_log_json',
    skip_trace_provider: 'skip_trace_provider',
    skip_trace_cost_cents: 'skip_trace_cost_cents',
    ai_cost_cents: 'ai_cost_cents',
    ai_scored_at: 'ai_scored_at'
  };

  export type LeadScalarFieldEnum = (typeof LeadScalarFieldEnum)[keyof typeof LeadScalarFieldEnum]


  export const ProbateCaseScalarFieldEnum: {
    id: 'id',
    case_number: 'case_number',
    deceased_name: 'deceased_name',
    filing_date: 'filing_date',
    case_status: 'case_status',
    county: 'county',
    estimated_estate_value: 'estimated_estate_value',
    properties_json: 'properties_json',
    heirs_json: 'heirs_json',
    urgency_score: 'urgency_score',
    deal_potential_score: 'deal_potential_score',
    next_hearing_date: 'next_hearing_date',
    attorney_name: 'attorney_name',
    attorney_phone: 'attorney_phone',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProbateCaseScalarFieldEnum = (typeof ProbateCaseScalarFieldEnum)[keyof typeof ProbateCaseScalarFieldEnum]


  export const PropertyViolationScalarFieldEnum: {
    id: 'id',
    property_address: 'property_address',
    violation_type: 'violation_type',
    severity_score: 'severity_score',
    repeat_offender: 'repeat_offender',
    financial_burden: 'financial_burden',
    compliance_deadline: 'compliance_deadline',
    enforcement_stage: 'enforcement_stage',
    deal_potential: 'deal_potential',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PropertyViolationScalarFieldEnum = (typeof PropertyViolationScalarFieldEnum)[keyof typeof PropertyViolationScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    status: 'status',
    target_count: 'target_count',
    sent_count: 'sent_count',
    response_rate: 'response_rate',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    lead_id: 'lead_id',
    method: 'method',
    status: 'status',
    notes: 'notes',
    scheduled_at: 'scheduled_at',
    completed_at: 'completed_at',
    created_at: 'created_at'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const DealAnalysisScalarFieldEnum: {
    id: 'id',
    lead_id: 'lead_id',
    analysis_json: 'analysis_json',
    arv: 'arv',
    budget: 'budget',
    total_investment: 'total_investment',
    net_profit: 'net_profit',
    roi_pct: 'roi_pct',
    risk_score: 'risk_score',
    recommendation: 'recommendation',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DealAnalysisScalarFieldEnum = (typeof DealAnalysisScalarFieldEnum)[keyof typeof DealAnalysisScalarFieldEnum]


  export const ScrapingJobScalarFieldEnum: {
    id: 'id',
    source: 'source',
    status: 'status',
    config: 'config',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    logs: 'logs',
    resultsCount: 'resultsCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScrapingJobScalarFieldEnum = (typeof ScrapingJobScalarFieldEnum)[keyof typeof ScrapingJobScalarFieldEnum]


  export const PropertyRecordScalarFieldEnum: {
    id: 'id',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    source: 'source',
    rawData: 'rawData',
    processed: 'processed',
    scrapingJobId: 'scrapingJobId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PropertyRecordScalarFieldEnum = (typeof PropertyRecordScalarFieldEnum)[keyof typeof PropertyRecordScalarFieldEnum]


  export const ScrapingScheduleScalarFieldEnum: {
    id: 'id',
    enabled: 'enabled',
    frequency: 'frequency',
    time: 'time',
    day: 'day',
    sources: 'sources',
    zipCodes: 'zipCodes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScrapingScheduleScalarFieldEnum = (typeof ScrapingScheduleScalarFieldEnum)[keyof typeof ScrapingScheduleScalarFieldEnum]


  export const ScraperJobScalarFieldEnum: {
    id: 'id',
    source: 'source',
    inputPayload: 'inputPayload',
    resultPayload: 'resultPayload',
    status: 'status',
    startedAt: 'startedAt',
    finishedAt: 'finishedAt',
    error: 'error',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    attempt: 'attempt',
    previousErrors: 'previousErrors'
  };

  export type ScraperJobScalarFieldEnum = (typeof ScraperJobScalarFieldEnum)[keyof typeof ScraperJobScalarFieldEnum]


  export const ScrapedPropertyScalarFieldEnum: {
    id: 'id',
    source: 'source',
    zip: 'zip',
    address: 'address',
    price: 'price',
    beds: 'beds',
    sqft: 'sqft',
    propertyType: 'propertyType',
    link: 'link',
    imageUrl: 'imageUrl',
    data: 'data',
    enrichmentTags: 'enrichmentTags',
    investmentScore: 'investmentScore',
    condition: 'condition',
    reasons: 'reasons',
    tagReasons: 'tagReasons',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScrapedPropertyScalarFieldEnum = (typeof ScrapedPropertyScalarFieldEnum)[keyof typeof ScrapedPropertyScalarFieldEnum]


  export const WebhookSubscriptionScalarFieldEnum: {
    id: 'id',
    targetUrl: 'targetUrl',
    eventTypes: 'eventTypes',
    isActive: 'isActive',
    signingSecret: 'signingSecret',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WebhookSubscriptionScalarFieldEnum = (typeof WebhookSubscriptionScalarFieldEnum)[keyof typeof WebhookSubscriptionScalarFieldEnum]


  export const WebhookDeliveryFailureScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    eventType: 'eventType',
    payload: 'payload',
    attempts: 'attempts',
    finalError: 'finalError',
    lastError: 'lastError',
    createdAt: 'createdAt',
    lastAttemptAt: 'lastAttemptAt',
    isResolved: 'isResolved',
    replayedAt: 'replayedAt',
    replayJobId: 'replayJobId'
  };

  export type WebhookDeliveryFailureScalarFieldEnum = (typeof WebhookDeliveryFailureScalarFieldEnum)[keyof typeof WebhookDeliveryFailureScalarFieldEnum]


  export const WebhookDeliveryLogScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    eventType: 'eventType',
    status: 'status',
    attemptsMade: 'attemptsMade',
    jobId: 'jobId',
    lastAttemptAt: 'lastAttemptAt',
    isResolved: 'isResolved',
    lastError: 'lastError',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WebhookDeliveryLogScalarFieldEnum = (typeof WebhookDeliveryLogScalarFieldEnum)[keyof typeof WebhookDeliveryLogScalarFieldEnum]


  export const MatchmakingJobScalarFieldEnum: {
    id: 'id',
    filterJSON: 'filterJSON',
    status: 'status',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    matchedCount: 'matchedCount'
  };

  export type MatchmakingJobScalarFieldEnum = (typeof MatchmakingJobScalarFieldEnum)[keyof typeof MatchmakingJobScalarFieldEnum]


  export const CrmActivityScalarFieldEnum: {
    id: 'id',
    type: 'type',
    propertyId: 'propertyId',
    leadId: 'leadId',
    userId: 'userId',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type CrmActivityScalarFieldEnum = (typeof CrmActivityScalarFieldEnum)[keyof typeof CrmActivityScalarFieldEnum]


  export const CallTranscriptScalarFieldEnum: {
    id: 'id',
    callSid: 'callSid',
    leadId: 'leadId',
    userId: 'userId',
    audioUrl: 'audioUrl',
    transcript: 'transcript',
    recordingUrl: 'recordingUrl',
    transcriptUrl: 'transcriptUrl',
    dtmfCaptured: 'dtmfCaptured',
    createdAt: 'createdAt'
  };

  export type CallTranscriptScalarFieldEnum = (typeof CallTranscriptScalarFieldEnum)[keyof typeof CallTranscriptScalarFieldEnum]


  export const CallAnalysisScalarFieldEnum: {
    id: 'id',
    callSid: 'callSid',
    transcriptId: 'transcriptId',
    summary: 'summary',
    score: 'score',
    tags: 'tags',
    createdAt: 'createdAt'
  };

  export type CallAnalysisScalarFieldEnum = (typeof CallAnalysisScalarFieldEnum)[keyof typeof CallAnalysisScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ScraperSource'
   */
  export type EnumScraperSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScraperSource'>
    


  /**
   * Reference to a field of type 'ScraperSource[]'
   */
  export type ListEnumScraperSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScraperSource[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'PropertyCondition'
   */
  export type EnumPropertyConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PropertyCondition'>
    


  /**
   * Reference to a field of type 'PropertyCondition[]'
   */
  export type ListEnumPropertyConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PropertyCondition[]'>
    
  /**
   * Deep Input Types
   */


  export type ApiCostEntryWhereInput = {
    AND?: ApiCostEntryWhereInput | ApiCostEntryWhereInput[]
    OR?: ApiCostEntryWhereInput[]
    NOT?: ApiCostEntryWhereInput | ApiCostEntryWhereInput[]
    id?: IntFilter<"ApiCostEntry"> | number
    apiType?: StringFilter<"ApiCostEntry"> | string
    cost?: FloatFilter<"ApiCostEntry"> | number
    details?: StringNullableFilter<"ApiCostEntry"> | string | null
    createdAt?: DateTimeFilter<"ApiCostEntry"> | Date | string
  }

  export type ApiCostEntryOrderByWithRelationInput = {
    id?: SortOrder
    apiType?: SortOrder
    cost?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type ApiCostEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ApiCostEntryWhereInput | ApiCostEntryWhereInput[]
    OR?: ApiCostEntryWhereInput[]
    NOT?: ApiCostEntryWhereInput | ApiCostEntryWhereInput[]
    apiType?: StringFilter<"ApiCostEntry"> | string
    cost?: FloatFilter<"ApiCostEntry"> | number
    details?: StringNullableFilter<"ApiCostEntry"> | string | null
    createdAt?: DateTimeFilter<"ApiCostEntry"> | Date | string
  }, "id">

  export type ApiCostEntryOrderByWithAggregationInput = {
    id?: SortOrder
    apiType?: SortOrder
    cost?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApiCostEntryCountOrderByAggregateInput
    _avg?: ApiCostEntryAvgOrderByAggregateInput
    _max?: ApiCostEntryMaxOrderByAggregateInput
    _min?: ApiCostEntryMinOrderByAggregateInput
    _sum?: ApiCostEntrySumOrderByAggregateInput
  }

  export type ApiCostEntryScalarWhereWithAggregatesInput = {
    AND?: ApiCostEntryScalarWhereWithAggregatesInput | ApiCostEntryScalarWhereWithAggregatesInput[]
    OR?: ApiCostEntryScalarWhereWithAggregatesInput[]
    NOT?: ApiCostEntryScalarWhereWithAggregatesInput | ApiCostEntryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ApiCostEntry"> | number
    apiType?: StringWithAggregatesFilter<"ApiCostEntry"> | string
    cost?: FloatWithAggregatesFilter<"ApiCostEntry"> | number
    details?: StringNullableWithAggregatesFilter<"ApiCostEntry"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiCostEntry"> | Date | string
  }

  export type LeadWhereInput = {
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    id?: StringFilter<"Lead"> | string
    address?: StringFilter<"Lead"> | string
    owner_name?: StringNullableFilter<"Lead"> | string | null
    phone?: StringNullableFilter<"Lead"> | string | null
    email?: StringNullableFilter<"Lead"> | string | null
    source_type?: StringFilter<"Lead"> | string
    source?: StringFilter<"Lead"> | string
    motivation_score?: IntFilter<"Lead"> | number
    estimated_value?: FloatNullableFilter<"Lead"> | number | null
    equity?: FloatNullableFilter<"Lead"> | number | null
    condition_score?: IntFilter<"Lead"> | number
    tax_debt?: FloatFilter<"Lead"> | number
    violations?: IntFilter<"Lead"> | number
    is_probate?: BoolFilter<"Lead"> | boolean
    is_vacant?: BoolFilter<"Lead"> | boolean
    days_on_market?: IntNullableFilter<"Lead"> | number | null
    lead_score?: IntFilter<"Lead"> | number
    aiScore?: IntNullableFilter<"Lead"> | number | null
    feedback_good?: IntFilter<"Lead"> | number
    feedback_bad?: IntFilter<"Lead"> | number
    phones?: StringFilter<"Lead"> | string
    emails?: StringFilter<"Lead"> | string
    raw_data?: StringNullableFilter<"Lead"> | string | null
    temperature_tag?: StringFilter<"Lead"> | string
    status?: StringFilter<"Lead"> | string
    notes?: StringNullableFilter<"Lead"> | string | null
    created_at?: DateTimeFilter<"Lead"> | Date | string
    updated_at?: DateTimeFilter<"Lead"> | Date | string
    skip_traced_at?: DateTimeNullableFilter<"Lead"> | Date | string | null
    dnc_flag?: IntFilter<"Lead"> | number
    timezone?: StringNullableFilter<"Lead"> | string | null
    quiet_hours_start?: StringNullableFilter<"Lead"> | string | null
    quiet_hours_end?: StringNullableFilter<"Lead"> | string | null
    activity_log_json?: StringNullableFilter<"Lead"> | string | null
    skip_trace_provider?: StringNullableFilter<"Lead"> | string | null
    skip_trace_cost_cents?: IntFilter<"Lead"> | number
    ai_cost_cents?: IntFilter<"Lead"> | number
    ai_scored_at?: DateTimeNullableFilter<"Lead"> | Date | string | null
  }

  export type LeadOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    owner_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    source_type?: SortOrder
    source?: SortOrder
    motivation_score?: SortOrder
    estimated_value?: SortOrderInput | SortOrder
    equity?: SortOrderInput | SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    is_probate?: SortOrder
    is_vacant?: SortOrder
    days_on_market?: SortOrderInput | SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrderInput | SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    phones?: SortOrder
    emails?: SortOrder
    raw_data?: SortOrderInput | SortOrder
    temperature_tag?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    skip_traced_at?: SortOrderInput | SortOrder
    dnc_flag?: SortOrder
    timezone?: SortOrderInput | SortOrder
    quiet_hours_start?: SortOrderInput | SortOrder
    quiet_hours_end?: SortOrderInput | SortOrder
    activity_log_json?: SortOrderInput | SortOrder
    skip_trace_provider?: SortOrderInput | SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
    ai_scored_at?: SortOrderInput | SortOrder
  }

  export type LeadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    address?: StringFilter<"Lead"> | string
    owner_name?: StringNullableFilter<"Lead"> | string | null
    phone?: StringNullableFilter<"Lead"> | string | null
    email?: StringNullableFilter<"Lead"> | string | null
    source_type?: StringFilter<"Lead"> | string
    source?: StringFilter<"Lead"> | string
    motivation_score?: IntFilter<"Lead"> | number
    estimated_value?: FloatNullableFilter<"Lead"> | number | null
    equity?: FloatNullableFilter<"Lead"> | number | null
    condition_score?: IntFilter<"Lead"> | number
    tax_debt?: FloatFilter<"Lead"> | number
    violations?: IntFilter<"Lead"> | number
    is_probate?: BoolFilter<"Lead"> | boolean
    is_vacant?: BoolFilter<"Lead"> | boolean
    days_on_market?: IntNullableFilter<"Lead"> | number | null
    lead_score?: IntFilter<"Lead"> | number
    aiScore?: IntNullableFilter<"Lead"> | number | null
    feedback_good?: IntFilter<"Lead"> | number
    feedback_bad?: IntFilter<"Lead"> | number
    phones?: StringFilter<"Lead"> | string
    emails?: StringFilter<"Lead"> | string
    raw_data?: StringNullableFilter<"Lead"> | string | null
    temperature_tag?: StringFilter<"Lead"> | string
    status?: StringFilter<"Lead"> | string
    notes?: StringNullableFilter<"Lead"> | string | null
    created_at?: DateTimeFilter<"Lead"> | Date | string
    updated_at?: DateTimeFilter<"Lead"> | Date | string
    skip_traced_at?: DateTimeNullableFilter<"Lead"> | Date | string | null
    dnc_flag?: IntFilter<"Lead"> | number
    timezone?: StringNullableFilter<"Lead"> | string | null
    quiet_hours_start?: StringNullableFilter<"Lead"> | string | null
    quiet_hours_end?: StringNullableFilter<"Lead"> | string | null
    activity_log_json?: StringNullableFilter<"Lead"> | string | null
    skip_trace_provider?: StringNullableFilter<"Lead"> | string | null
    skip_trace_cost_cents?: IntFilter<"Lead"> | number
    ai_cost_cents?: IntFilter<"Lead"> | number
    ai_scored_at?: DateTimeNullableFilter<"Lead"> | Date | string | null
  }, "id">

  export type LeadOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    owner_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    source_type?: SortOrder
    source?: SortOrder
    motivation_score?: SortOrder
    estimated_value?: SortOrderInput | SortOrder
    equity?: SortOrderInput | SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    is_probate?: SortOrder
    is_vacant?: SortOrder
    days_on_market?: SortOrderInput | SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrderInput | SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    phones?: SortOrder
    emails?: SortOrder
    raw_data?: SortOrderInput | SortOrder
    temperature_tag?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    skip_traced_at?: SortOrderInput | SortOrder
    dnc_flag?: SortOrder
    timezone?: SortOrderInput | SortOrder
    quiet_hours_start?: SortOrderInput | SortOrder
    quiet_hours_end?: SortOrderInput | SortOrder
    activity_log_json?: SortOrderInput | SortOrder
    skip_trace_provider?: SortOrderInput | SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
    ai_scored_at?: SortOrderInput | SortOrder
    _count?: LeadCountOrderByAggregateInput
    _avg?: LeadAvgOrderByAggregateInput
    _max?: LeadMaxOrderByAggregateInput
    _min?: LeadMinOrderByAggregateInput
    _sum?: LeadSumOrderByAggregateInput
  }

  export type LeadScalarWhereWithAggregatesInput = {
    AND?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    OR?: LeadScalarWhereWithAggregatesInput[]
    NOT?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lead"> | string
    address?: StringWithAggregatesFilter<"Lead"> | string
    owner_name?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    email?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    source_type?: StringWithAggregatesFilter<"Lead"> | string
    source?: StringWithAggregatesFilter<"Lead"> | string
    motivation_score?: IntWithAggregatesFilter<"Lead"> | number
    estimated_value?: FloatNullableWithAggregatesFilter<"Lead"> | number | null
    equity?: FloatNullableWithAggregatesFilter<"Lead"> | number | null
    condition_score?: IntWithAggregatesFilter<"Lead"> | number
    tax_debt?: FloatWithAggregatesFilter<"Lead"> | number
    violations?: IntWithAggregatesFilter<"Lead"> | number
    is_probate?: BoolWithAggregatesFilter<"Lead"> | boolean
    is_vacant?: BoolWithAggregatesFilter<"Lead"> | boolean
    days_on_market?: IntNullableWithAggregatesFilter<"Lead"> | number | null
    lead_score?: IntWithAggregatesFilter<"Lead"> | number
    aiScore?: IntNullableWithAggregatesFilter<"Lead"> | number | null
    feedback_good?: IntWithAggregatesFilter<"Lead"> | number
    feedback_bad?: IntWithAggregatesFilter<"Lead"> | number
    phones?: StringWithAggregatesFilter<"Lead"> | string
    emails?: StringWithAggregatesFilter<"Lead"> | string
    raw_data?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    temperature_tag?: StringWithAggregatesFilter<"Lead"> | string
    status?: StringWithAggregatesFilter<"Lead"> | string
    notes?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    skip_traced_at?: DateTimeNullableWithAggregatesFilter<"Lead"> | Date | string | null
    dnc_flag?: IntWithAggregatesFilter<"Lead"> | number
    timezone?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    quiet_hours_start?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    quiet_hours_end?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    activity_log_json?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    skip_trace_provider?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    skip_trace_cost_cents?: IntWithAggregatesFilter<"Lead"> | number
    ai_cost_cents?: IntWithAggregatesFilter<"Lead"> | number
    ai_scored_at?: DateTimeNullableWithAggregatesFilter<"Lead"> | Date | string | null
  }

  export type ProbateCaseWhereInput = {
    AND?: ProbateCaseWhereInput | ProbateCaseWhereInput[]
    OR?: ProbateCaseWhereInput[]
    NOT?: ProbateCaseWhereInput | ProbateCaseWhereInput[]
    id?: StringFilter<"ProbateCase"> | string
    case_number?: StringFilter<"ProbateCase"> | string
    deceased_name?: StringFilter<"ProbateCase"> | string
    filing_date?: DateTimeFilter<"ProbateCase"> | Date | string
    case_status?: StringFilter<"ProbateCase"> | string
    county?: StringFilter<"ProbateCase"> | string
    estimated_estate_value?: FloatNullableFilter<"ProbateCase"> | number | null
    properties_json?: StringNullableFilter<"ProbateCase"> | string | null
    heirs_json?: StringNullableFilter<"ProbateCase"> | string | null
    urgency_score?: IntFilter<"ProbateCase"> | number
    deal_potential_score?: IntFilter<"ProbateCase"> | number
    next_hearing_date?: DateTimeNullableFilter<"ProbateCase"> | Date | string | null
    attorney_name?: StringNullableFilter<"ProbateCase"> | string | null
    attorney_phone?: StringNullableFilter<"ProbateCase"> | string | null
    created_at?: DateTimeFilter<"ProbateCase"> | Date | string
    updated_at?: DateTimeFilter<"ProbateCase"> | Date | string
  }

  export type ProbateCaseOrderByWithRelationInput = {
    id?: SortOrder
    case_number?: SortOrder
    deceased_name?: SortOrder
    filing_date?: SortOrder
    case_status?: SortOrder
    county?: SortOrder
    estimated_estate_value?: SortOrderInput | SortOrder
    properties_json?: SortOrderInput | SortOrder
    heirs_json?: SortOrderInput | SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
    next_hearing_date?: SortOrderInput | SortOrder
    attorney_name?: SortOrderInput | SortOrder
    attorney_phone?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProbateCaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    case_number?: string
    AND?: ProbateCaseWhereInput | ProbateCaseWhereInput[]
    OR?: ProbateCaseWhereInput[]
    NOT?: ProbateCaseWhereInput | ProbateCaseWhereInput[]
    deceased_name?: StringFilter<"ProbateCase"> | string
    filing_date?: DateTimeFilter<"ProbateCase"> | Date | string
    case_status?: StringFilter<"ProbateCase"> | string
    county?: StringFilter<"ProbateCase"> | string
    estimated_estate_value?: FloatNullableFilter<"ProbateCase"> | number | null
    properties_json?: StringNullableFilter<"ProbateCase"> | string | null
    heirs_json?: StringNullableFilter<"ProbateCase"> | string | null
    urgency_score?: IntFilter<"ProbateCase"> | number
    deal_potential_score?: IntFilter<"ProbateCase"> | number
    next_hearing_date?: DateTimeNullableFilter<"ProbateCase"> | Date | string | null
    attorney_name?: StringNullableFilter<"ProbateCase"> | string | null
    attorney_phone?: StringNullableFilter<"ProbateCase"> | string | null
    created_at?: DateTimeFilter<"ProbateCase"> | Date | string
    updated_at?: DateTimeFilter<"ProbateCase"> | Date | string
  }, "id" | "case_number">

  export type ProbateCaseOrderByWithAggregationInput = {
    id?: SortOrder
    case_number?: SortOrder
    deceased_name?: SortOrder
    filing_date?: SortOrder
    case_status?: SortOrder
    county?: SortOrder
    estimated_estate_value?: SortOrderInput | SortOrder
    properties_json?: SortOrderInput | SortOrder
    heirs_json?: SortOrderInput | SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
    next_hearing_date?: SortOrderInput | SortOrder
    attorney_name?: SortOrderInput | SortOrder
    attorney_phone?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ProbateCaseCountOrderByAggregateInput
    _avg?: ProbateCaseAvgOrderByAggregateInput
    _max?: ProbateCaseMaxOrderByAggregateInput
    _min?: ProbateCaseMinOrderByAggregateInput
    _sum?: ProbateCaseSumOrderByAggregateInput
  }

  export type ProbateCaseScalarWhereWithAggregatesInput = {
    AND?: ProbateCaseScalarWhereWithAggregatesInput | ProbateCaseScalarWhereWithAggregatesInput[]
    OR?: ProbateCaseScalarWhereWithAggregatesInput[]
    NOT?: ProbateCaseScalarWhereWithAggregatesInput | ProbateCaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProbateCase"> | string
    case_number?: StringWithAggregatesFilter<"ProbateCase"> | string
    deceased_name?: StringWithAggregatesFilter<"ProbateCase"> | string
    filing_date?: DateTimeWithAggregatesFilter<"ProbateCase"> | Date | string
    case_status?: StringWithAggregatesFilter<"ProbateCase"> | string
    county?: StringWithAggregatesFilter<"ProbateCase"> | string
    estimated_estate_value?: FloatNullableWithAggregatesFilter<"ProbateCase"> | number | null
    properties_json?: StringNullableWithAggregatesFilter<"ProbateCase"> | string | null
    heirs_json?: StringNullableWithAggregatesFilter<"ProbateCase"> | string | null
    urgency_score?: IntWithAggregatesFilter<"ProbateCase"> | number
    deal_potential_score?: IntWithAggregatesFilter<"ProbateCase"> | number
    next_hearing_date?: DateTimeNullableWithAggregatesFilter<"ProbateCase"> | Date | string | null
    attorney_name?: StringNullableWithAggregatesFilter<"ProbateCase"> | string | null
    attorney_phone?: StringNullableWithAggregatesFilter<"ProbateCase"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"ProbateCase"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ProbateCase"> | Date | string
  }

  export type PropertyViolationWhereInput = {
    AND?: PropertyViolationWhereInput | PropertyViolationWhereInput[]
    OR?: PropertyViolationWhereInput[]
    NOT?: PropertyViolationWhereInput | PropertyViolationWhereInput[]
    id?: StringFilter<"PropertyViolation"> | string
    property_address?: StringFilter<"PropertyViolation"> | string
    violation_type?: StringFilter<"PropertyViolation"> | string
    severity_score?: IntFilter<"PropertyViolation"> | number
    repeat_offender?: BoolFilter<"PropertyViolation"> | boolean
    financial_burden?: FloatFilter<"PropertyViolation"> | number
    compliance_deadline?: DateTimeFilter<"PropertyViolation"> | Date | string
    enforcement_stage?: StringFilter<"PropertyViolation"> | string
    deal_potential?: IntFilter<"PropertyViolation"> | number
    created_at?: DateTimeFilter<"PropertyViolation"> | Date | string
    updated_at?: DateTimeFilter<"PropertyViolation"> | Date | string
  }

  export type PropertyViolationOrderByWithRelationInput = {
    id?: SortOrder
    property_address?: SortOrder
    violation_type?: SortOrder
    severity_score?: SortOrder
    repeat_offender?: SortOrder
    financial_burden?: SortOrder
    compliance_deadline?: SortOrder
    enforcement_stage?: SortOrder
    deal_potential?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PropertyViolationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PropertyViolationWhereInput | PropertyViolationWhereInput[]
    OR?: PropertyViolationWhereInput[]
    NOT?: PropertyViolationWhereInput | PropertyViolationWhereInput[]
    property_address?: StringFilter<"PropertyViolation"> | string
    violation_type?: StringFilter<"PropertyViolation"> | string
    severity_score?: IntFilter<"PropertyViolation"> | number
    repeat_offender?: BoolFilter<"PropertyViolation"> | boolean
    financial_burden?: FloatFilter<"PropertyViolation"> | number
    compliance_deadline?: DateTimeFilter<"PropertyViolation"> | Date | string
    enforcement_stage?: StringFilter<"PropertyViolation"> | string
    deal_potential?: IntFilter<"PropertyViolation"> | number
    created_at?: DateTimeFilter<"PropertyViolation"> | Date | string
    updated_at?: DateTimeFilter<"PropertyViolation"> | Date | string
  }, "id">

  export type PropertyViolationOrderByWithAggregationInput = {
    id?: SortOrder
    property_address?: SortOrder
    violation_type?: SortOrder
    severity_score?: SortOrder
    repeat_offender?: SortOrder
    financial_burden?: SortOrder
    compliance_deadline?: SortOrder
    enforcement_stage?: SortOrder
    deal_potential?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PropertyViolationCountOrderByAggregateInput
    _avg?: PropertyViolationAvgOrderByAggregateInput
    _max?: PropertyViolationMaxOrderByAggregateInput
    _min?: PropertyViolationMinOrderByAggregateInput
    _sum?: PropertyViolationSumOrderByAggregateInput
  }

  export type PropertyViolationScalarWhereWithAggregatesInput = {
    AND?: PropertyViolationScalarWhereWithAggregatesInput | PropertyViolationScalarWhereWithAggregatesInput[]
    OR?: PropertyViolationScalarWhereWithAggregatesInput[]
    NOT?: PropertyViolationScalarWhereWithAggregatesInput | PropertyViolationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PropertyViolation"> | string
    property_address?: StringWithAggregatesFilter<"PropertyViolation"> | string
    violation_type?: StringWithAggregatesFilter<"PropertyViolation"> | string
    severity_score?: IntWithAggregatesFilter<"PropertyViolation"> | number
    repeat_offender?: BoolWithAggregatesFilter<"PropertyViolation"> | boolean
    financial_burden?: FloatWithAggregatesFilter<"PropertyViolation"> | number
    compliance_deadline?: DateTimeWithAggregatesFilter<"PropertyViolation"> | Date | string
    enforcement_stage?: StringWithAggregatesFilter<"PropertyViolation"> | string
    deal_potential?: IntWithAggregatesFilter<"PropertyViolation"> | number
    created_at?: DateTimeWithAggregatesFilter<"PropertyViolation"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PropertyViolation"> | Date | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    type?: StringFilter<"Campaign"> | string
    status?: StringFilter<"Campaign"> | string
    target_count?: IntFilter<"Campaign"> | number
    sent_count?: IntFilter<"Campaign"> | number
    response_rate?: FloatFilter<"Campaign"> | number
    created_at?: DateTimeFilter<"Campaign"> | Date | string
    updated_at?: DateTimeFilter<"Campaign"> | Date | string
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    status?: SortOrder
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    name?: StringFilter<"Campaign"> | string
    type?: StringFilter<"Campaign"> | string
    status?: StringFilter<"Campaign"> | string
    target_count?: IntFilter<"Campaign"> | number
    sent_count?: IntFilter<"Campaign"> | number
    response_rate?: FloatFilter<"Campaign"> | number
    created_at?: DateTimeFilter<"Campaign"> | Date | string
    updated_at?: DateTimeFilter<"Campaign"> | Date | string
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    status?: SortOrder
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Campaign"> | string
    name?: StringWithAggregatesFilter<"Campaign"> | string
    type?: StringWithAggregatesFilter<"Campaign"> | string
    status?: StringWithAggregatesFilter<"Campaign"> | string
    target_count?: IntWithAggregatesFilter<"Campaign"> | number
    sent_count?: IntWithAggregatesFilter<"Campaign"> | number
    response_rate?: FloatWithAggregatesFilter<"Campaign"> | number
    created_at?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    lead_id?: StringNullableFilter<"Contact"> | string | null
    method?: StringFilter<"Contact"> | string
    status?: StringFilter<"Contact"> | string
    notes?: StringNullableFilter<"Contact"> | string | null
    scheduled_at?: DateTimeNullableFilter<"Contact"> | Date | string | null
    completed_at?: DateTimeNullableFilter<"Contact"> | Date | string | null
    created_at?: DateTimeFilter<"Contact"> | Date | string
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    lead_id?: SortOrderInput | SortOrder
    method?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    scheduled_at?: SortOrderInput | SortOrder
    completed_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    lead_id?: StringNullableFilter<"Contact"> | string | null
    method?: StringFilter<"Contact"> | string
    status?: StringFilter<"Contact"> | string
    notes?: StringNullableFilter<"Contact"> | string | null
    scheduled_at?: DateTimeNullableFilter<"Contact"> | Date | string | null
    completed_at?: DateTimeNullableFilter<"Contact"> | Date | string | null
    created_at?: DateTimeFilter<"Contact"> | Date | string
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    lead_id?: SortOrderInput | SortOrder
    method?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    scheduled_at?: SortOrderInput | SortOrder
    completed_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    lead_id?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    method?: StringWithAggregatesFilter<"Contact"> | string
    status?: StringWithAggregatesFilter<"Contact"> | string
    notes?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    scheduled_at?: DateTimeNullableWithAggregatesFilter<"Contact"> | Date | string | null
    completed_at?: DateTimeNullableWithAggregatesFilter<"Contact"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
  }

  export type DealAnalysisWhereInput = {
    AND?: DealAnalysisWhereInput | DealAnalysisWhereInput[]
    OR?: DealAnalysisWhereInput[]
    NOT?: DealAnalysisWhereInput | DealAnalysisWhereInput[]
    id?: StringFilter<"DealAnalysis"> | string
    lead_id?: StringFilter<"DealAnalysis"> | string
    analysis_json?: StringFilter<"DealAnalysis"> | string
    arv?: FloatNullableFilter<"DealAnalysis"> | number | null
    budget?: FloatNullableFilter<"DealAnalysis"> | number | null
    total_investment?: FloatNullableFilter<"DealAnalysis"> | number | null
    net_profit?: FloatNullableFilter<"DealAnalysis"> | number | null
    roi_pct?: FloatNullableFilter<"DealAnalysis"> | number | null
    risk_score?: IntNullableFilter<"DealAnalysis"> | number | null
    recommendation?: StringNullableFilter<"DealAnalysis"> | string | null
    created_at?: DateTimeFilter<"DealAnalysis"> | Date | string
    updated_at?: DateTimeFilter<"DealAnalysis"> | Date | string
  }

  export type DealAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    lead_id?: SortOrder
    analysis_json?: SortOrder
    arv?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    total_investment?: SortOrderInput | SortOrder
    net_profit?: SortOrderInput | SortOrder
    roi_pct?: SortOrderInput | SortOrder
    risk_score?: SortOrderInput | SortOrder
    recommendation?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DealAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DealAnalysisWhereInput | DealAnalysisWhereInput[]
    OR?: DealAnalysisWhereInput[]
    NOT?: DealAnalysisWhereInput | DealAnalysisWhereInput[]
    lead_id?: StringFilter<"DealAnalysis"> | string
    analysis_json?: StringFilter<"DealAnalysis"> | string
    arv?: FloatNullableFilter<"DealAnalysis"> | number | null
    budget?: FloatNullableFilter<"DealAnalysis"> | number | null
    total_investment?: FloatNullableFilter<"DealAnalysis"> | number | null
    net_profit?: FloatNullableFilter<"DealAnalysis"> | number | null
    roi_pct?: FloatNullableFilter<"DealAnalysis"> | number | null
    risk_score?: IntNullableFilter<"DealAnalysis"> | number | null
    recommendation?: StringNullableFilter<"DealAnalysis"> | string | null
    created_at?: DateTimeFilter<"DealAnalysis"> | Date | string
    updated_at?: DateTimeFilter<"DealAnalysis"> | Date | string
  }, "id">

  export type DealAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    lead_id?: SortOrder
    analysis_json?: SortOrder
    arv?: SortOrderInput | SortOrder
    budget?: SortOrderInput | SortOrder
    total_investment?: SortOrderInput | SortOrder
    net_profit?: SortOrderInput | SortOrder
    roi_pct?: SortOrderInput | SortOrder
    risk_score?: SortOrderInput | SortOrder
    recommendation?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: DealAnalysisCountOrderByAggregateInput
    _avg?: DealAnalysisAvgOrderByAggregateInput
    _max?: DealAnalysisMaxOrderByAggregateInput
    _min?: DealAnalysisMinOrderByAggregateInput
    _sum?: DealAnalysisSumOrderByAggregateInput
  }

  export type DealAnalysisScalarWhereWithAggregatesInput = {
    AND?: DealAnalysisScalarWhereWithAggregatesInput | DealAnalysisScalarWhereWithAggregatesInput[]
    OR?: DealAnalysisScalarWhereWithAggregatesInput[]
    NOT?: DealAnalysisScalarWhereWithAggregatesInput | DealAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DealAnalysis"> | string
    lead_id?: StringWithAggregatesFilter<"DealAnalysis"> | string
    analysis_json?: StringWithAggregatesFilter<"DealAnalysis"> | string
    arv?: FloatNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    budget?: FloatNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    total_investment?: FloatNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    net_profit?: FloatNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    roi_pct?: FloatNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    risk_score?: IntNullableWithAggregatesFilter<"DealAnalysis"> | number | null
    recommendation?: StringNullableWithAggregatesFilter<"DealAnalysis"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"DealAnalysis"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"DealAnalysis"> | Date | string
  }

  export type ScrapingJobWhereInput = {
    AND?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    OR?: ScrapingJobWhereInput[]
    NOT?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    id?: StringFilter<"ScrapingJob"> | string
    source?: StringFilter<"ScrapingJob"> | string
    status?: StringFilter<"ScrapingJob"> | string
    config?: StringFilter<"ScrapingJob"> | string
    startedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ScrapingJob"> | Date | string | null
    logs?: StringNullableFilter<"ScrapingJob"> | string | null
    resultsCount?: IntFilter<"ScrapingJob"> | number
    createdAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    propertyRecords?: PropertyRecordListRelationFilter
  }

  export type ScrapingJobOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    config?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    logs?: SortOrderInput | SortOrder
    resultsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    propertyRecords?: PropertyRecordOrderByRelationAggregateInput
  }

  export type ScrapingJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    OR?: ScrapingJobWhereInput[]
    NOT?: ScrapingJobWhereInput | ScrapingJobWhereInput[]
    source?: StringFilter<"ScrapingJob"> | string
    status?: StringFilter<"ScrapingJob"> | string
    config?: StringFilter<"ScrapingJob"> | string
    startedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ScrapingJob"> | Date | string | null
    logs?: StringNullableFilter<"ScrapingJob"> | string | null
    resultsCount?: IntFilter<"ScrapingJob"> | number
    createdAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingJob"> | Date | string
    propertyRecords?: PropertyRecordListRelationFilter
  }, "id">

  export type ScrapingJobOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    config?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    logs?: SortOrderInput | SortOrder
    resultsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScrapingJobCountOrderByAggregateInput
    _avg?: ScrapingJobAvgOrderByAggregateInput
    _max?: ScrapingJobMaxOrderByAggregateInput
    _min?: ScrapingJobMinOrderByAggregateInput
    _sum?: ScrapingJobSumOrderByAggregateInput
  }

  export type ScrapingJobScalarWhereWithAggregatesInput = {
    AND?: ScrapingJobScalarWhereWithAggregatesInput | ScrapingJobScalarWhereWithAggregatesInput[]
    OR?: ScrapingJobScalarWhereWithAggregatesInput[]
    NOT?: ScrapingJobScalarWhereWithAggregatesInput | ScrapingJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScrapingJob"> | string
    source?: StringWithAggregatesFilter<"ScrapingJob"> | string
    status?: StringWithAggregatesFilter<"ScrapingJob"> | string
    config?: StringWithAggregatesFilter<"ScrapingJob"> | string
    startedAt?: DateTimeWithAggregatesFilter<"ScrapingJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ScrapingJob"> | Date | string | null
    logs?: StringNullableWithAggregatesFilter<"ScrapingJob"> | string | null
    resultsCount?: IntWithAggregatesFilter<"ScrapingJob"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScrapingJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScrapingJob"> | Date | string
  }

  export type PropertyRecordWhereInput = {
    AND?: PropertyRecordWhereInput | PropertyRecordWhereInput[]
    OR?: PropertyRecordWhereInput[]
    NOT?: PropertyRecordWhereInput | PropertyRecordWhereInput[]
    id?: StringFilter<"PropertyRecord"> | string
    address?: StringFilter<"PropertyRecord"> | string
    city?: StringNullableFilter<"PropertyRecord"> | string | null
    state?: StringNullableFilter<"PropertyRecord"> | string | null
    zipCode?: StringNullableFilter<"PropertyRecord"> | string | null
    source?: StringFilter<"PropertyRecord"> | string
    rawData?: StringFilter<"PropertyRecord"> | string
    processed?: BoolFilter<"PropertyRecord"> | boolean
    scrapingJobId?: StringNullableFilter<"PropertyRecord"> | string | null
    createdAt?: DateTimeFilter<"PropertyRecord"> | Date | string
    updatedAt?: DateTimeFilter<"PropertyRecord"> | Date | string
    scrapingJob?: XOR<ScrapingJobNullableRelationFilter, ScrapingJobWhereInput> | null
  }

  export type PropertyRecordOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    source?: SortOrder
    rawData?: SortOrder
    processed?: SortOrder
    scrapingJobId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scrapingJob?: ScrapingJobOrderByWithRelationInput
  }

  export type PropertyRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PropertyRecordWhereInput | PropertyRecordWhereInput[]
    OR?: PropertyRecordWhereInput[]
    NOT?: PropertyRecordWhereInput | PropertyRecordWhereInput[]
    address?: StringFilter<"PropertyRecord"> | string
    city?: StringNullableFilter<"PropertyRecord"> | string | null
    state?: StringNullableFilter<"PropertyRecord"> | string | null
    zipCode?: StringNullableFilter<"PropertyRecord"> | string | null
    source?: StringFilter<"PropertyRecord"> | string
    rawData?: StringFilter<"PropertyRecord"> | string
    processed?: BoolFilter<"PropertyRecord"> | boolean
    scrapingJobId?: StringNullableFilter<"PropertyRecord"> | string | null
    createdAt?: DateTimeFilter<"PropertyRecord"> | Date | string
    updatedAt?: DateTimeFilter<"PropertyRecord"> | Date | string
    scrapingJob?: XOR<ScrapingJobNullableRelationFilter, ScrapingJobWhereInput> | null
  }, "id">

  export type PropertyRecordOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    source?: SortOrder
    rawData?: SortOrder
    processed?: SortOrder
    scrapingJobId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PropertyRecordCountOrderByAggregateInput
    _max?: PropertyRecordMaxOrderByAggregateInput
    _min?: PropertyRecordMinOrderByAggregateInput
  }

  export type PropertyRecordScalarWhereWithAggregatesInput = {
    AND?: PropertyRecordScalarWhereWithAggregatesInput | PropertyRecordScalarWhereWithAggregatesInput[]
    OR?: PropertyRecordScalarWhereWithAggregatesInput[]
    NOT?: PropertyRecordScalarWhereWithAggregatesInput | PropertyRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PropertyRecord"> | string
    address?: StringWithAggregatesFilter<"PropertyRecord"> | string
    city?: StringNullableWithAggregatesFilter<"PropertyRecord"> | string | null
    state?: StringNullableWithAggregatesFilter<"PropertyRecord"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"PropertyRecord"> | string | null
    source?: StringWithAggregatesFilter<"PropertyRecord"> | string
    rawData?: StringWithAggregatesFilter<"PropertyRecord"> | string
    processed?: BoolWithAggregatesFilter<"PropertyRecord"> | boolean
    scrapingJobId?: StringNullableWithAggregatesFilter<"PropertyRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PropertyRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PropertyRecord"> | Date | string
  }

  export type ScrapingScheduleWhereInput = {
    AND?: ScrapingScheduleWhereInput | ScrapingScheduleWhereInput[]
    OR?: ScrapingScheduleWhereInput[]
    NOT?: ScrapingScheduleWhereInput | ScrapingScheduleWhereInput[]
    id?: StringFilter<"ScrapingSchedule"> | string
    enabled?: BoolFilter<"ScrapingSchedule"> | boolean
    frequency?: StringNullableFilter<"ScrapingSchedule"> | string | null
    time?: StringNullableFilter<"ScrapingSchedule"> | string | null
    day?: StringNullableFilter<"ScrapingSchedule"> | string | null
    sources?: StringFilter<"ScrapingSchedule"> | string
    zipCodes?: StringNullableFilter<"ScrapingSchedule"> | string | null
    createdAt?: DateTimeFilter<"ScrapingSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingSchedule"> | Date | string
  }

  export type ScrapingScheduleOrderByWithRelationInput = {
    id?: SortOrder
    enabled?: SortOrder
    frequency?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    day?: SortOrderInput | SortOrder
    sources?: SortOrder
    zipCodes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScrapingScheduleWhereInput | ScrapingScheduleWhereInput[]
    OR?: ScrapingScheduleWhereInput[]
    NOT?: ScrapingScheduleWhereInput | ScrapingScheduleWhereInput[]
    enabled?: BoolFilter<"ScrapingSchedule"> | boolean
    frequency?: StringNullableFilter<"ScrapingSchedule"> | string | null
    time?: StringNullableFilter<"ScrapingSchedule"> | string | null
    day?: StringNullableFilter<"ScrapingSchedule"> | string | null
    sources?: StringFilter<"ScrapingSchedule"> | string
    zipCodes?: StringNullableFilter<"ScrapingSchedule"> | string | null
    createdAt?: DateTimeFilter<"ScrapingSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapingSchedule"> | Date | string
  }, "id">

  export type ScrapingScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    enabled?: SortOrder
    frequency?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    day?: SortOrderInput | SortOrder
    sources?: SortOrder
    zipCodes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScrapingScheduleCountOrderByAggregateInput
    _max?: ScrapingScheduleMaxOrderByAggregateInput
    _min?: ScrapingScheduleMinOrderByAggregateInput
  }

  export type ScrapingScheduleScalarWhereWithAggregatesInput = {
    AND?: ScrapingScheduleScalarWhereWithAggregatesInput | ScrapingScheduleScalarWhereWithAggregatesInput[]
    OR?: ScrapingScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScrapingScheduleScalarWhereWithAggregatesInput | ScrapingScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScrapingSchedule"> | string
    enabled?: BoolWithAggregatesFilter<"ScrapingSchedule"> | boolean
    frequency?: StringNullableWithAggregatesFilter<"ScrapingSchedule"> | string | null
    time?: StringNullableWithAggregatesFilter<"ScrapingSchedule"> | string | null
    day?: StringNullableWithAggregatesFilter<"ScrapingSchedule"> | string | null
    sources?: StringWithAggregatesFilter<"ScrapingSchedule"> | string
    zipCodes?: StringNullableWithAggregatesFilter<"ScrapingSchedule"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ScrapingSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScrapingSchedule"> | Date | string
  }

  export type ScraperJobWhereInput = {
    AND?: ScraperJobWhereInput | ScraperJobWhereInput[]
    OR?: ScraperJobWhereInput[]
    NOT?: ScraperJobWhereInput | ScraperJobWhereInput[]
    id?: StringFilter<"ScraperJob"> | string
    source?: EnumScraperSourceFilter<"ScraperJob"> | $Enums.ScraperSource
    inputPayload?: JsonFilter<"ScraperJob">
    resultPayload?: JsonNullableFilter<"ScraperJob">
    status?: EnumJobStatusFilter<"ScraperJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableFilter<"ScraperJob"> | Date | string | null
    finishedAt?: DateTimeNullableFilter<"ScraperJob"> | Date | string | null
    error?: StringNullableFilter<"ScraperJob"> | string | null
    createdAt?: DateTimeFilter<"ScraperJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScraperJob"> | Date | string
    attempt?: IntFilter<"ScraperJob"> | number
    previousErrors?: JsonFilter<"ScraperJob">
  }

  export type ScraperJobOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    inputPayload?: SortOrder
    resultPayload?: SortOrderInput | SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attempt?: SortOrder
    previousErrors?: SortOrder
  }

  export type ScraperJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScraperJobWhereInput | ScraperJobWhereInput[]
    OR?: ScraperJobWhereInput[]
    NOT?: ScraperJobWhereInput | ScraperJobWhereInput[]
    source?: EnumScraperSourceFilter<"ScraperJob"> | $Enums.ScraperSource
    inputPayload?: JsonFilter<"ScraperJob">
    resultPayload?: JsonNullableFilter<"ScraperJob">
    status?: EnumJobStatusFilter<"ScraperJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableFilter<"ScraperJob"> | Date | string | null
    finishedAt?: DateTimeNullableFilter<"ScraperJob"> | Date | string | null
    error?: StringNullableFilter<"ScraperJob"> | string | null
    createdAt?: DateTimeFilter<"ScraperJob"> | Date | string
    updatedAt?: DateTimeFilter<"ScraperJob"> | Date | string
    attempt?: IntFilter<"ScraperJob"> | number
    previousErrors?: JsonFilter<"ScraperJob">
  }, "id">

  export type ScraperJobOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    inputPayload?: SortOrder
    resultPayload?: SortOrderInput | SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attempt?: SortOrder
    previousErrors?: SortOrder
    _count?: ScraperJobCountOrderByAggregateInput
    _avg?: ScraperJobAvgOrderByAggregateInput
    _max?: ScraperJobMaxOrderByAggregateInput
    _min?: ScraperJobMinOrderByAggregateInput
    _sum?: ScraperJobSumOrderByAggregateInput
  }

  export type ScraperJobScalarWhereWithAggregatesInput = {
    AND?: ScraperJobScalarWhereWithAggregatesInput | ScraperJobScalarWhereWithAggregatesInput[]
    OR?: ScraperJobScalarWhereWithAggregatesInput[]
    NOT?: ScraperJobScalarWhereWithAggregatesInput | ScraperJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScraperJob"> | string
    source?: EnumScraperSourceWithAggregatesFilter<"ScraperJob"> | $Enums.ScraperSource
    inputPayload?: JsonWithAggregatesFilter<"ScraperJob">
    resultPayload?: JsonNullableWithAggregatesFilter<"ScraperJob">
    status?: EnumJobStatusWithAggregatesFilter<"ScraperJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableWithAggregatesFilter<"ScraperJob"> | Date | string | null
    finishedAt?: DateTimeNullableWithAggregatesFilter<"ScraperJob"> | Date | string | null
    error?: StringNullableWithAggregatesFilter<"ScraperJob"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ScraperJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScraperJob"> | Date | string
    attempt?: IntWithAggregatesFilter<"ScraperJob"> | number
    previousErrors?: JsonWithAggregatesFilter<"ScraperJob">
  }

  export type ScrapedPropertyWhereInput = {
    AND?: ScrapedPropertyWhereInput | ScrapedPropertyWhereInput[]
    OR?: ScrapedPropertyWhereInput[]
    NOT?: ScrapedPropertyWhereInput | ScrapedPropertyWhereInput[]
    id?: StringFilter<"ScrapedProperty"> | string
    source?: EnumScraperSourceFilter<"ScrapedProperty"> | $Enums.ScraperSource
    zip?: StringFilter<"ScrapedProperty"> | string
    address?: StringFilter<"ScrapedProperty"> | string
    price?: IntNullableFilter<"ScrapedProperty"> | number | null
    beds?: IntNullableFilter<"ScrapedProperty"> | number | null
    sqft?: IntNullableFilter<"ScrapedProperty"> | number | null
    propertyType?: StringNullableFilter<"ScrapedProperty"> | string | null
    link?: StringNullableFilter<"ScrapedProperty"> | string | null
    imageUrl?: StringNullableFilter<"ScrapedProperty"> | string | null
    data?: JsonNullableFilter<"ScrapedProperty">
    enrichmentTags?: StringNullableListFilter<"ScrapedProperty">
    investmentScore?: IntNullableFilter<"ScrapedProperty"> | number | null
    condition?: EnumPropertyConditionNullableFilter<"ScrapedProperty"> | $Enums.PropertyCondition | null
    reasons?: StringNullableListFilter<"ScrapedProperty">
    tagReasons?: JsonNullableFilter<"ScrapedProperty">
    createdAt?: DateTimeFilter<"ScrapedProperty"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapedProperty"> | Date | string
  }

  export type ScrapedPropertyOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    price?: SortOrderInput | SortOrder
    beds?: SortOrderInput | SortOrder
    sqft?: SortOrderInput | SortOrder
    propertyType?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    enrichmentTags?: SortOrder
    investmentScore?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    reasons?: SortOrder
    tagReasons?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapedPropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    source_zip_address?: ScrapedPropertySourceZipAddressCompoundUniqueInput
    AND?: ScrapedPropertyWhereInput | ScrapedPropertyWhereInput[]
    OR?: ScrapedPropertyWhereInput[]
    NOT?: ScrapedPropertyWhereInput | ScrapedPropertyWhereInput[]
    source?: EnumScraperSourceFilter<"ScrapedProperty"> | $Enums.ScraperSource
    zip?: StringFilter<"ScrapedProperty"> | string
    address?: StringFilter<"ScrapedProperty"> | string
    price?: IntNullableFilter<"ScrapedProperty"> | number | null
    beds?: IntNullableFilter<"ScrapedProperty"> | number | null
    sqft?: IntNullableFilter<"ScrapedProperty"> | number | null
    propertyType?: StringNullableFilter<"ScrapedProperty"> | string | null
    link?: StringNullableFilter<"ScrapedProperty"> | string | null
    imageUrl?: StringNullableFilter<"ScrapedProperty"> | string | null
    data?: JsonNullableFilter<"ScrapedProperty">
    enrichmentTags?: StringNullableListFilter<"ScrapedProperty">
    investmentScore?: IntNullableFilter<"ScrapedProperty"> | number | null
    condition?: EnumPropertyConditionNullableFilter<"ScrapedProperty"> | $Enums.PropertyCondition | null
    reasons?: StringNullableListFilter<"ScrapedProperty">
    tagReasons?: JsonNullableFilter<"ScrapedProperty">
    createdAt?: DateTimeFilter<"ScrapedProperty"> | Date | string
    updatedAt?: DateTimeFilter<"ScrapedProperty"> | Date | string
  }, "id" | "source_zip_address">

  export type ScrapedPropertyOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    price?: SortOrderInput | SortOrder
    beds?: SortOrderInput | SortOrder
    sqft?: SortOrderInput | SortOrder
    propertyType?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    enrichmentTags?: SortOrder
    investmentScore?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    reasons?: SortOrder
    tagReasons?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScrapedPropertyCountOrderByAggregateInput
    _avg?: ScrapedPropertyAvgOrderByAggregateInput
    _max?: ScrapedPropertyMaxOrderByAggregateInput
    _min?: ScrapedPropertyMinOrderByAggregateInput
    _sum?: ScrapedPropertySumOrderByAggregateInput
  }

  export type ScrapedPropertyScalarWhereWithAggregatesInput = {
    AND?: ScrapedPropertyScalarWhereWithAggregatesInput | ScrapedPropertyScalarWhereWithAggregatesInput[]
    OR?: ScrapedPropertyScalarWhereWithAggregatesInput[]
    NOT?: ScrapedPropertyScalarWhereWithAggregatesInput | ScrapedPropertyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScrapedProperty"> | string
    source?: EnumScraperSourceWithAggregatesFilter<"ScrapedProperty"> | $Enums.ScraperSource
    zip?: StringWithAggregatesFilter<"ScrapedProperty"> | string
    address?: StringWithAggregatesFilter<"ScrapedProperty"> | string
    price?: IntNullableWithAggregatesFilter<"ScrapedProperty"> | number | null
    beds?: IntNullableWithAggregatesFilter<"ScrapedProperty"> | number | null
    sqft?: IntNullableWithAggregatesFilter<"ScrapedProperty"> | number | null
    propertyType?: StringNullableWithAggregatesFilter<"ScrapedProperty"> | string | null
    link?: StringNullableWithAggregatesFilter<"ScrapedProperty"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"ScrapedProperty"> | string | null
    data?: JsonNullableWithAggregatesFilter<"ScrapedProperty">
    enrichmentTags?: StringNullableListFilter<"ScrapedProperty">
    investmentScore?: IntNullableWithAggregatesFilter<"ScrapedProperty"> | number | null
    condition?: EnumPropertyConditionNullableWithAggregatesFilter<"ScrapedProperty"> | $Enums.PropertyCondition | null
    reasons?: StringNullableListFilter<"ScrapedProperty">
    tagReasons?: JsonNullableWithAggregatesFilter<"ScrapedProperty">
    createdAt?: DateTimeWithAggregatesFilter<"ScrapedProperty"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScrapedProperty"> | Date | string
  }

  export type WebhookSubscriptionWhereInput = {
    AND?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    OR?: WebhookSubscriptionWhereInput[]
    NOT?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    id?: StringFilter<"WebhookSubscription"> | string
    targetUrl?: StringFilter<"WebhookSubscription"> | string
    eventTypes?: StringNullableListFilter<"WebhookSubscription">
    isActive?: BoolFilter<"WebhookSubscription"> | boolean
    signingSecret?: StringFilter<"WebhookSubscription"> | string
    createdAt?: DateTimeFilter<"WebhookSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"WebhookSubscription"> | Date | string
  }

  export type WebhookSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    targetUrl?: SortOrder
    eventTypes?: SortOrder
    isActive?: SortOrder
    signingSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    OR?: WebhookSubscriptionWhereInput[]
    NOT?: WebhookSubscriptionWhereInput | WebhookSubscriptionWhereInput[]
    targetUrl?: StringFilter<"WebhookSubscription"> | string
    eventTypes?: StringNullableListFilter<"WebhookSubscription">
    isActive?: BoolFilter<"WebhookSubscription"> | boolean
    signingSecret?: StringFilter<"WebhookSubscription"> | string
    createdAt?: DateTimeFilter<"WebhookSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"WebhookSubscription"> | Date | string
  }, "id">

  export type WebhookSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    targetUrl?: SortOrder
    eventTypes?: SortOrder
    isActive?: SortOrder
    signingSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WebhookSubscriptionCountOrderByAggregateInput
    _max?: WebhookSubscriptionMaxOrderByAggregateInput
    _min?: WebhookSubscriptionMinOrderByAggregateInput
  }

  export type WebhookSubscriptionScalarWhereWithAggregatesInput = {
    AND?: WebhookSubscriptionScalarWhereWithAggregatesInput | WebhookSubscriptionScalarWhereWithAggregatesInput[]
    OR?: WebhookSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: WebhookSubscriptionScalarWhereWithAggregatesInput | WebhookSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebhookSubscription"> | string
    targetUrl?: StringWithAggregatesFilter<"WebhookSubscription"> | string
    eventTypes?: StringNullableListFilter<"WebhookSubscription">
    isActive?: BoolWithAggregatesFilter<"WebhookSubscription"> | boolean
    signingSecret?: StringWithAggregatesFilter<"WebhookSubscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WebhookSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WebhookSubscription"> | Date | string
  }

  export type WebhookDeliveryFailureWhereInput = {
    AND?: WebhookDeliveryFailureWhereInput | WebhookDeliveryFailureWhereInput[]
    OR?: WebhookDeliveryFailureWhereInput[]
    NOT?: WebhookDeliveryFailureWhereInput | WebhookDeliveryFailureWhereInput[]
    id?: StringFilter<"WebhookDeliveryFailure"> | string
    subscriptionId?: StringFilter<"WebhookDeliveryFailure"> | string
    eventType?: StringFilter<"WebhookDeliveryFailure"> | string
    payload?: JsonFilter<"WebhookDeliveryFailure">
    attempts?: IntFilter<"WebhookDeliveryFailure"> | number
    finalError?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
    lastError?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
    createdAt?: DateTimeFilter<"WebhookDeliveryFailure"> | Date | string
    lastAttemptAt?: DateTimeFilter<"WebhookDeliveryFailure"> | Date | string
    isResolved?: BoolFilter<"WebhookDeliveryFailure"> | boolean
    replayedAt?: DateTimeNullableFilter<"WebhookDeliveryFailure"> | Date | string | null
    replayJobId?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
  }

  export type WebhookDeliveryFailureOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    payload?: SortOrder
    attempts?: SortOrder
    finalError?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    replayedAt?: SortOrderInput | SortOrder
    replayJobId?: SortOrderInput | SortOrder
  }

  export type WebhookDeliveryFailureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebhookDeliveryFailureWhereInput | WebhookDeliveryFailureWhereInput[]
    OR?: WebhookDeliveryFailureWhereInput[]
    NOT?: WebhookDeliveryFailureWhereInput | WebhookDeliveryFailureWhereInput[]
    subscriptionId?: StringFilter<"WebhookDeliveryFailure"> | string
    eventType?: StringFilter<"WebhookDeliveryFailure"> | string
    payload?: JsonFilter<"WebhookDeliveryFailure">
    attempts?: IntFilter<"WebhookDeliveryFailure"> | number
    finalError?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
    lastError?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
    createdAt?: DateTimeFilter<"WebhookDeliveryFailure"> | Date | string
    lastAttemptAt?: DateTimeFilter<"WebhookDeliveryFailure"> | Date | string
    isResolved?: BoolFilter<"WebhookDeliveryFailure"> | boolean
    replayedAt?: DateTimeNullableFilter<"WebhookDeliveryFailure"> | Date | string | null
    replayJobId?: StringNullableFilter<"WebhookDeliveryFailure"> | string | null
  }, "id">

  export type WebhookDeliveryFailureOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    payload?: SortOrder
    attempts?: SortOrder
    finalError?: SortOrderInput | SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    replayedAt?: SortOrderInput | SortOrder
    replayJobId?: SortOrderInput | SortOrder
    _count?: WebhookDeliveryFailureCountOrderByAggregateInput
    _avg?: WebhookDeliveryFailureAvgOrderByAggregateInput
    _max?: WebhookDeliveryFailureMaxOrderByAggregateInput
    _min?: WebhookDeliveryFailureMinOrderByAggregateInput
    _sum?: WebhookDeliveryFailureSumOrderByAggregateInput
  }

  export type WebhookDeliveryFailureScalarWhereWithAggregatesInput = {
    AND?: WebhookDeliveryFailureScalarWhereWithAggregatesInput | WebhookDeliveryFailureScalarWhereWithAggregatesInput[]
    OR?: WebhookDeliveryFailureScalarWhereWithAggregatesInput[]
    NOT?: WebhookDeliveryFailureScalarWhereWithAggregatesInput | WebhookDeliveryFailureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebhookDeliveryFailure"> | string
    subscriptionId?: StringWithAggregatesFilter<"WebhookDeliveryFailure"> | string
    eventType?: StringWithAggregatesFilter<"WebhookDeliveryFailure"> | string
    payload?: JsonWithAggregatesFilter<"WebhookDeliveryFailure">
    attempts?: IntWithAggregatesFilter<"WebhookDeliveryFailure"> | number
    finalError?: StringNullableWithAggregatesFilter<"WebhookDeliveryFailure"> | string | null
    lastError?: StringNullableWithAggregatesFilter<"WebhookDeliveryFailure"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WebhookDeliveryFailure"> | Date | string
    lastAttemptAt?: DateTimeWithAggregatesFilter<"WebhookDeliveryFailure"> | Date | string
    isResolved?: BoolWithAggregatesFilter<"WebhookDeliveryFailure"> | boolean
    replayedAt?: DateTimeNullableWithAggregatesFilter<"WebhookDeliveryFailure"> | Date | string | null
    replayJobId?: StringNullableWithAggregatesFilter<"WebhookDeliveryFailure"> | string | null
  }

  export type WebhookDeliveryLogWhereInput = {
    AND?: WebhookDeliveryLogWhereInput | WebhookDeliveryLogWhereInput[]
    OR?: WebhookDeliveryLogWhereInput[]
    NOT?: WebhookDeliveryLogWhereInput | WebhookDeliveryLogWhereInput[]
    id?: StringFilter<"WebhookDeliveryLog"> | string
    subscriptionId?: StringFilter<"WebhookDeliveryLog"> | string
    eventType?: StringFilter<"WebhookDeliveryLog"> | string
    status?: StringFilter<"WebhookDeliveryLog"> | string
    attemptsMade?: IntFilter<"WebhookDeliveryLog"> | number
    jobId?: StringFilter<"WebhookDeliveryLog"> | string
    lastAttemptAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
    isResolved?: BoolFilter<"WebhookDeliveryLog"> | boolean
    lastError?: StringNullableFilter<"WebhookDeliveryLog"> | string | null
    createdAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
    updatedAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
  }

  export type WebhookDeliveryLogOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    status?: SortOrder
    attemptsMade?: SortOrder
    jobId?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookDeliveryLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebhookDeliveryLogWhereInput | WebhookDeliveryLogWhereInput[]
    OR?: WebhookDeliveryLogWhereInput[]
    NOT?: WebhookDeliveryLogWhereInput | WebhookDeliveryLogWhereInput[]
    subscriptionId?: StringFilter<"WebhookDeliveryLog"> | string
    eventType?: StringFilter<"WebhookDeliveryLog"> | string
    status?: StringFilter<"WebhookDeliveryLog"> | string
    attemptsMade?: IntFilter<"WebhookDeliveryLog"> | number
    jobId?: StringFilter<"WebhookDeliveryLog"> | string
    lastAttemptAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
    isResolved?: BoolFilter<"WebhookDeliveryLog"> | boolean
    lastError?: StringNullableFilter<"WebhookDeliveryLog"> | string | null
    createdAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
    updatedAt?: DateTimeFilter<"WebhookDeliveryLog"> | Date | string
  }, "id">

  export type WebhookDeliveryLogOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    status?: SortOrder
    attemptsMade?: SortOrder
    jobId?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    lastError?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WebhookDeliveryLogCountOrderByAggregateInput
    _avg?: WebhookDeliveryLogAvgOrderByAggregateInput
    _max?: WebhookDeliveryLogMaxOrderByAggregateInput
    _min?: WebhookDeliveryLogMinOrderByAggregateInput
    _sum?: WebhookDeliveryLogSumOrderByAggregateInput
  }

  export type WebhookDeliveryLogScalarWhereWithAggregatesInput = {
    AND?: WebhookDeliveryLogScalarWhereWithAggregatesInput | WebhookDeliveryLogScalarWhereWithAggregatesInput[]
    OR?: WebhookDeliveryLogScalarWhereWithAggregatesInput[]
    NOT?: WebhookDeliveryLogScalarWhereWithAggregatesInput | WebhookDeliveryLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebhookDeliveryLog"> | string
    subscriptionId?: StringWithAggregatesFilter<"WebhookDeliveryLog"> | string
    eventType?: StringWithAggregatesFilter<"WebhookDeliveryLog"> | string
    status?: StringWithAggregatesFilter<"WebhookDeliveryLog"> | string
    attemptsMade?: IntWithAggregatesFilter<"WebhookDeliveryLog"> | number
    jobId?: StringWithAggregatesFilter<"WebhookDeliveryLog"> | string
    lastAttemptAt?: DateTimeWithAggregatesFilter<"WebhookDeliveryLog"> | Date | string
    isResolved?: BoolWithAggregatesFilter<"WebhookDeliveryLog"> | boolean
    lastError?: StringNullableWithAggregatesFilter<"WebhookDeliveryLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WebhookDeliveryLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WebhookDeliveryLog"> | Date | string
  }

  export type MatchmakingJobWhereInput = {
    AND?: MatchmakingJobWhereInput | MatchmakingJobWhereInput[]
    OR?: MatchmakingJobWhereInput[]
    NOT?: MatchmakingJobWhereInput | MatchmakingJobWhereInput[]
    id?: StringFilter<"MatchmakingJob"> | string
    filterJSON?: JsonFilter<"MatchmakingJob">
    status?: StringFilter<"MatchmakingJob"> | string
    createdAt?: DateTimeFilter<"MatchmakingJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"MatchmakingJob"> | Date | string | null
    matchedCount?: IntFilter<"MatchmakingJob"> | number
  }

  export type MatchmakingJobOrderByWithRelationInput = {
    id?: SortOrder
    filterJSON?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    matchedCount?: SortOrder
  }

  export type MatchmakingJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchmakingJobWhereInput | MatchmakingJobWhereInput[]
    OR?: MatchmakingJobWhereInput[]
    NOT?: MatchmakingJobWhereInput | MatchmakingJobWhereInput[]
    filterJSON?: JsonFilter<"MatchmakingJob">
    status?: StringFilter<"MatchmakingJob"> | string
    createdAt?: DateTimeFilter<"MatchmakingJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"MatchmakingJob"> | Date | string | null
    matchedCount?: IntFilter<"MatchmakingJob"> | number
  }, "id">

  export type MatchmakingJobOrderByWithAggregationInput = {
    id?: SortOrder
    filterJSON?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    matchedCount?: SortOrder
    _count?: MatchmakingJobCountOrderByAggregateInput
    _avg?: MatchmakingJobAvgOrderByAggregateInput
    _max?: MatchmakingJobMaxOrderByAggregateInput
    _min?: MatchmakingJobMinOrderByAggregateInput
    _sum?: MatchmakingJobSumOrderByAggregateInput
  }

  export type MatchmakingJobScalarWhereWithAggregatesInput = {
    AND?: MatchmakingJobScalarWhereWithAggregatesInput | MatchmakingJobScalarWhereWithAggregatesInput[]
    OR?: MatchmakingJobScalarWhereWithAggregatesInput[]
    NOT?: MatchmakingJobScalarWhereWithAggregatesInput | MatchmakingJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchmakingJob"> | string
    filterJSON?: JsonWithAggregatesFilter<"MatchmakingJob">
    status?: StringWithAggregatesFilter<"MatchmakingJob"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MatchmakingJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"MatchmakingJob"> | Date | string | null
    matchedCount?: IntWithAggregatesFilter<"MatchmakingJob"> | number
  }

  export type CrmActivityWhereInput = {
    AND?: CrmActivityWhereInput | CrmActivityWhereInput[]
    OR?: CrmActivityWhereInput[]
    NOT?: CrmActivityWhereInput | CrmActivityWhereInput[]
    id?: StringFilter<"CrmActivity"> | string
    type?: StringFilter<"CrmActivity"> | string
    propertyId?: StringNullableFilter<"CrmActivity"> | string | null
    leadId?: StringNullableFilter<"CrmActivity"> | string | null
    userId?: StringNullableFilter<"CrmActivity"> | string | null
    metadata?: JsonNullableFilter<"CrmActivity">
    createdAt?: DateTimeFilter<"CrmActivity"> | Date | string
  }

  export type CrmActivityOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    leadId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type CrmActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CrmActivityWhereInput | CrmActivityWhereInput[]
    OR?: CrmActivityWhereInput[]
    NOT?: CrmActivityWhereInput | CrmActivityWhereInput[]
    type?: StringFilter<"CrmActivity"> | string
    propertyId?: StringNullableFilter<"CrmActivity"> | string | null
    leadId?: StringNullableFilter<"CrmActivity"> | string | null
    userId?: StringNullableFilter<"CrmActivity"> | string | null
    metadata?: JsonNullableFilter<"CrmActivity">
    createdAt?: DateTimeFilter<"CrmActivity"> | Date | string
  }, "id">

  export type CrmActivityOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    leadId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CrmActivityCountOrderByAggregateInput
    _max?: CrmActivityMaxOrderByAggregateInput
    _min?: CrmActivityMinOrderByAggregateInput
  }

  export type CrmActivityScalarWhereWithAggregatesInput = {
    AND?: CrmActivityScalarWhereWithAggregatesInput | CrmActivityScalarWhereWithAggregatesInput[]
    OR?: CrmActivityScalarWhereWithAggregatesInput[]
    NOT?: CrmActivityScalarWhereWithAggregatesInput | CrmActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CrmActivity"> | string
    type?: StringWithAggregatesFilter<"CrmActivity"> | string
    propertyId?: StringNullableWithAggregatesFilter<"CrmActivity"> | string | null
    leadId?: StringNullableWithAggregatesFilter<"CrmActivity"> | string | null
    userId?: StringNullableWithAggregatesFilter<"CrmActivity"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"CrmActivity">
    createdAt?: DateTimeWithAggregatesFilter<"CrmActivity"> | Date | string
  }

  export type CallTranscriptWhereInput = {
    AND?: CallTranscriptWhereInput | CallTranscriptWhereInput[]
    OR?: CallTranscriptWhereInput[]
    NOT?: CallTranscriptWhereInput | CallTranscriptWhereInput[]
    id?: StringFilter<"CallTranscript"> | string
    callSid?: StringFilter<"CallTranscript"> | string
    leadId?: StringNullableFilter<"CallTranscript"> | string | null
    userId?: StringNullableFilter<"CallTranscript"> | string | null
    audioUrl?: StringNullableFilter<"CallTranscript"> | string | null
    transcript?: StringNullableFilter<"CallTranscript"> | string | null
    recordingUrl?: StringNullableFilter<"CallTranscript"> | string | null
    transcriptUrl?: StringNullableFilter<"CallTranscript"> | string | null
    dtmfCaptured?: StringNullableFilter<"CallTranscript"> | string | null
    createdAt?: DateTimeFilter<"CallTranscript"> | Date | string
  }

  export type CallTranscriptOrderByWithRelationInput = {
    id?: SortOrder
    callSid?: SortOrder
    leadId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    transcript?: SortOrderInput | SortOrder
    recordingUrl?: SortOrderInput | SortOrder
    transcriptUrl?: SortOrderInput | SortOrder
    dtmfCaptured?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type CallTranscriptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    callSid?: string
    AND?: CallTranscriptWhereInput | CallTranscriptWhereInput[]
    OR?: CallTranscriptWhereInput[]
    NOT?: CallTranscriptWhereInput | CallTranscriptWhereInput[]
    leadId?: StringNullableFilter<"CallTranscript"> | string | null
    userId?: StringNullableFilter<"CallTranscript"> | string | null
    audioUrl?: StringNullableFilter<"CallTranscript"> | string | null
    transcript?: StringNullableFilter<"CallTranscript"> | string | null
    recordingUrl?: StringNullableFilter<"CallTranscript"> | string | null
    transcriptUrl?: StringNullableFilter<"CallTranscript"> | string | null
    dtmfCaptured?: StringNullableFilter<"CallTranscript"> | string | null
    createdAt?: DateTimeFilter<"CallTranscript"> | Date | string
  }, "id" | "callSid">

  export type CallTranscriptOrderByWithAggregationInput = {
    id?: SortOrder
    callSid?: SortOrder
    leadId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    audioUrl?: SortOrderInput | SortOrder
    transcript?: SortOrderInput | SortOrder
    recordingUrl?: SortOrderInput | SortOrder
    transcriptUrl?: SortOrderInput | SortOrder
    dtmfCaptured?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CallTranscriptCountOrderByAggregateInput
    _max?: CallTranscriptMaxOrderByAggregateInput
    _min?: CallTranscriptMinOrderByAggregateInput
  }

  export type CallTranscriptScalarWhereWithAggregatesInput = {
    AND?: CallTranscriptScalarWhereWithAggregatesInput | CallTranscriptScalarWhereWithAggregatesInput[]
    OR?: CallTranscriptScalarWhereWithAggregatesInput[]
    NOT?: CallTranscriptScalarWhereWithAggregatesInput | CallTranscriptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CallTranscript"> | string
    callSid?: StringWithAggregatesFilter<"CallTranscript"> | string
    leadId?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    userId?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    audioUrl?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    transcript?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    recordingUrl?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    transcriptUrl?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    dtmfCaptured?: StringNullableWithAggregatesFilter<"CallTranscript"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CallTranscript"> | Date | string
  }

  export type CallAnalysisWhereInput = {
    AND?: CallAnalysisWhereInput | CallAnalysisWhereInput[]
    OR?: CallAnalysisWhereInput[]
    NOT?: CallAnalysisWhereInput | CallAnalysisWhereInput[]
    id?: StringFilter<"CallAnalysis"> | string
    callSid?: StringFilter<"CallAnalysis"> | string
    transcriptId?: StringFilter<"CallAnalysis"> | string
    summary?: StringFilter<"CallAnalysis"> | string
    score?: FloatFilter<"CallAnalysis"> | number
    tags?: StringNullableListFilter<"CallAnalysis">
    createdAt?: DateTimeFilter<"CallAnalysis"> | Date | string
  }

  export type CallAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    callSid?: SortOrder
    transcriptId?: SortOrder
    summary?: SortOrder
    score?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type CallAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    callSid?: string
    transcriptId?: string
    AND?: CallAnalysisWhereInput | CallAnalysisWhereInput[]
    OR?: CallAnalysisWhereInput[]
    NOT?: CallAnalysisWhereInput | CallAnalysisWhereInput[]
    summary?: StringFilter<"CallAnalysis"> | string
    score?: FloatFilter<"CallAnalysis"> | number
    tags?: StringNullableListFilter<"CallAnalysis">
    createdAt?: DateTimeFilter<"CallAnalysis"> | Date | string
  }, "id" | "callSid" | "transcriptId">

  export type CallAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    callSid?: SortOrder
    transcriptId?: SortOrder
    summary?: SortOrder
    score?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    _count?: CallAnalysisCountOrderByAggregateInput
    _avg?: CallAnalysisAvgOrderByAggregateInput
    _max?: CallAnalysisMaxOrderByAggregateInput
    _min?: CallAnalysisMinOrderByAggregateInput
    _sum?: CallAnalysisSumOrderByAggregateInput
  }

  export type CallAnalysisScalarWhereWithAggregatesInput = {
    AND?: CallAnalysisScalarWhereWithAggregatesInput | CallAnalysisScalarWhereWithAggregatesInput[]
    OR?: CallAnalysisScalarWhereWithAggregatesInput[]
    NOT?: CallAnalysisScalarWhereWithAggregatesInput | CallAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CallAnalysis"> | string
    callSid?: StringWithAggregatesFilter<"CallAnalysis"> | string
    transcriptId?: StringWithAggregatesFilter<"CallAnalysis"> | string
    summary?: StringWithAggregatesFilter<"CallAnalysis"> | string
    score?: FloatWithAggregatesFilter<"CallAnalysis"> | number
    tags?: StringNullableListFilter<"CallAnalysis">
    createdAt?: DateTimeWithAggregatesFilter<"CallAnalysis"> | Date | string
  }

  export type ApiCostEntryCreateInput = {
    apiType: string
    cost: number
    details?: string | null
    createdAt?: Date | string
  }

  export type ApiCostEntryUncheckedCreateInput = {
    id?: number
    apiType: string
    cost: number
    details?: string | null
    createdAt?: Date | string
  }

  export type ApiCostEntryUpdateInput = {
    apiType?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiCostEntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    apiType?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiCostEntryCreateManyInput = {
    id?: number
    apiType: string
    cost: number
    details?: string | null
    createdAt?: Date | string
  }

  export type ApiCostEntryUpdateManyMutationInput = {
    apiType?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiCostEntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    apiType?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadCreateInput = {
    id?: string
    address: string
    owner_name?: string | null
    phone?: string | null
    email?: string | null
    source_type: string
    source?: string
    motivation_score?: number
    estimated_value?: number | null
    equity?: number | null
    condition_score?: number
    tax_debt?: number
    violations?: number
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: number | null
    lead_score?: number
    aiScore?: number | null
    feedback_good?: number
    feedback_bad?: number
    phones?: string
    emails?: string
    raw_data?: string | null
    temperature_tag?: string
    status?: string
    notes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    skip_traced_at?: Date | string | null
    dnc_flag?: number
    timezone?: string | null
    quiet_hours_start?: string | null
    quiet_hours_end?: string | null
    activity_log_json?: string | null
    skip_trace_provider?: string | null
    skip_trace_cost_cents?: number
    ai_cost_cents?: number
    ai_scored_at?: Date | string | null
  }

  export type LeadUncheckedCreateInput = {
    id?: string
    address: string
    owner_name?: string | null
    phone?: string | null
    email?: string | null
    source_type: string
    source?: string
    motivation_score?: number
    estimated_value?: number | null
    equity?: number | null
    condition_score?: number
    tax_debt?: number
    violations?: number
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: number | null
    lead_score?: number
    aiScore?: number | null
    feedback_good?: number
    feedback_bad?: number
    phones?: string
    emails?: string
    raw_data?: string | null
    temperature_tag?: string
    status?: string
    notes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    skip_traced_at?: Date | string | null
    dnc_flag?: number
    timezone?: string | null
    quiet_hours_start?: string | null
    quiet_hours_end?: string | null
    activity_log_json?: string | null
    skip_trace_provider?: string | null
    skip_trace_cost_cents?: number
    ai_cost_cents?: number
    ai_scored_at?: Date | string | null
  }

  export type LeadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    source_type?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    motivation_score?: IntFieldUpdateOperationsInput | number
    estimated_value?: NullableFloatFieldUpdateOperationsInput | number | null
    equity?: NullableFloatFieldUpdateOperationsInput | number | null
    condition_score?: IntFieldUpdateOperationsInput | number
    tax_debt?: FloatFieldUpdateOperationsInput | number
    violations?: IntFieldUpdateOperationsInput | number
    is_probate?: BoolFieldUpdateOperationsInput | boolean
    is_vacant?: BoolFieldUpdateOperationsInput | boolean
    days_on_market?: NullableIntFieldUpdateOperationsInput | number | null
    lead_score?: IntFieldUpdateOperationsInput | number
    aiScore?: NullableIntFieldUpdateOperationsInput | number | null
    feedback_good?: IntFieldUpdateOperationsInput | number
    feedback_bad?: IntFieldUpdateOperationsInput | number
    phones?: StringFieldUpdateOperationsInput | string
    emails?: StringFieldUpdateOperationsInput | string
    raw_data?: NullableStringFieldUpdateOperationsInput | string | null
    temperature_tag?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    skip_traced_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dnc_flag?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_start?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_end?: NullableStringFieldUpdateOperationsInput | string | null
    activity_log_json?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_provider?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_scored_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    source_type?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    motivation_score?: IntFieldUpdateOperationsInput | number
    estimated_value?: NullableFloatFieldUpdateOperationsInput | number | null
    equity?: NullableFloatFieldUpdateOperationsInput | number | null
    condition_score?: IntFieldUpdateOperationsInput | number
    tax_debt?: FloatFieldUpdateOperationsInput | number
    violations?: IntFieldUpdateOperationsInput | number
    is_probate?: BoolFieldUpdateOperationsInput | boolean
    is_vacant?: BoolFieldUpdateOperationsInput | boolean
    days_on_market?: NullableIntFieldUpdateOperationsInput | number | null
    lead_score?: IntFieldUpdateOperationsInput | number
    aiScore?: NullableIntFieldUpdateOperationsInput | number | null
    feedback_good?: IntFieldUpdateOperationsInput | number
    feedback_bad?: IntFieldUpdateOperationsInput | number
    phones?: StringFieldUpdateOperationsInput | string
    emails?: StringFieldUpdateOperationsInput | string
    raw_data?: NullableStringFieldUpdateOperationsInput | string | null
    temperature_tag?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    skip_traced_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dnc_flag?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_start?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_end?: NullableStringFieldUpdateOperationsInput | string | null
    activity_log_json?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_provider?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_scored_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadCreateManyInput = {
    id?: string
    address: string
    owner_name?: string | null
    phone?: string | null
    email?: string | null
    source_type: string
    source?: string
    motivation_score?: number
    estimated_value?: number | null
    equity?: number | null
    condition_score?: number
    tax_debt?: number
    violations?: number
    is_probate?: boolean
    is_vacant?: boolean
    days_on_market?: number | null
    lead_score?: number
    aiScore?: number | null
    feedback_good?: number
    feedback_bad?: number
    phones?: string
    emails?: string
    raw_data?: string | null
    temperature_tag?: string
    status?: string
    notes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    skip_traced_at?: Date | string | null
    dnc_flag?: number
    timezone?: string | null
    quiet_hours_start?: string | null
    quiet_hours_end?: string | null
    activity_log_json?: string | null
    skip_trace_provider?: string | null
    skip_trace_cost_cents?: number
    ai_cost_cents?: number
    ai_scored_at?: Date | string | null
  }

  export type LeadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    source_type?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    motivation_score?: IntFieldUpdateOperationsInput | number
    estimated_value?: NullableFloatFieldUpdateOperationsInput | number | null
    equity?: NullableFloatFieldUpdateOperationsInput | number | null
    condition_score?: IntFieldUpdateOperationsInput | number
    tax_debt?: FloatFieldUpdateOperationsInput | number
    violations?: IntFieldUpdateOperationsInput | number
    is_probate?: BoolFieldUpdateOperationsInput | boolean
    is_vacant?: BoolFieldUpdateOperationsInput | boolean
    days_on_market?: NullableIntFieldUpdateOperationsInput | number | null
    lead_score?: IntFieldUpdateOperationsInput | number
    aiScore?: NullableIntFieldUpdateOperationsInput | number | null
    feedback_good?: IntFieldUpdateOperationsInput | number
    feedback_bad?: IntFieldUpdateOperationsInput | number
    phones?: StringFieldUpdateOperationsInput | string
    emails?: StringFieldUpdateOperationsInput | string
    raw_data?: NullableStringFieldUpdateOperationsInput | string | null
    temperature_tag?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    skip_traced_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dnc_flag?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_start?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_end?: NullableStringFieldUpdateOperationsInput | string | null
    activity_log_json?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_provider?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_scored_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    owner_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    source_type?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    motivation_score?: IntFieldUpdateOperationsInput | number
    estimated_value?: NullableFloatFieldUpdateOperationsInput | number | null
    equity?: NullableFloatFieldUpdateOperationsInput | number | null
    condition_score?: IntFieldUpdateOperationsInput | number
    tax_debt?: FloatFieldUpdateOperationsInput | number
    violations?: IntFieldUpdateOperationsInput | number
    is_probate?: BoolFieldUpdateOperationsInput | boolean
    is_vacant?: BoolFieldUpdateOperationsInput | boolean
    days_on_market?: NullableIntFieldUpdateOperationsInput | number | null
    lead_score?: IntFieldUpdateOperationsInput | number
    aiScore?: NullableIntFieldUpdateOperationsInput | number | null
    feedback_good?: IntFieldUpdateOperationsInput | number
    feedback_bad?: IntFieldUpdateOperationsInput | number
    phones?: StringFieldUpdateOperationsInput | string
    emails?: StringFieldUpdateOperationsInput | string
    raw_data?: NullableStringFieldUpdateOperationsInput | string | null
    temperature_tag?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    skip_traced_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dnc_flag?: IntFieldUpdateOperationsInput | number
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_start?: NullableStringFieldUpdateOperationsInput | string | null
    quiet_hours_end?: NullableStringFieldUpdateOperationsInput | string | null
    activity_log_json?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_provider?: NullableStringFieldUpdateOperationsInput | string | null
    skip_trace_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_cost_cents?: IntFieldUpdateOperationsInput | number
    ai_scored_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProbateCaseCreateInput = {
    id?: string
    case_number: string
    deceased_name: string
    filing_date: Date | string
    case_status: string
    county: string
    estimated_estate_value?: number | null
    properties_json?: string | null
    heirs_json?: string | null
    urgency_score?: number
    deal_potential_score?: number
    next_hearing_date?: Date | string | null
    attorney_name?: string | null
    attorney_phone?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ProbateCaseUncheckedCreateInput = {
    id?: string
    case_number: string
    deceased_name: string
    filing_date: Date | string
    case_status: string
    county: string
    estimated_estate_value?: number | null
    properties_json?: string | null
    heirs_json?: string | null
    urgency_score?: number
    deal_potential_score?: number
    next_hearing_date?: Date | string | null
    attorney_name?: string | null
    attorney_phone?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ProbateCaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_number?: StringFieldUpdateOperationsInput | string
    deceased_name?: StringFieldUpdateOperationsInput | string
    filing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    case_status?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    estimated_estate_value?: NullableFloatFieldUpdateOperationsInput | number | null
    properties_json?: NullableStringFieldUpdateOperationsInput | string | null
    heirs_json?: NullableStringFieldUpdateOperationsInput | string | null
    urgency_score?: IntFieldUpdateOperationsInput | number
    deal_potential_score?: IntFieldUpdateOperationsInput | number
    next_hearing_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attorney_name?: NullableStringFieldUpdateOperationsInput | string | null
    attorney_phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProbateCaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_number?: StringFieldUpdateOperationsInput | string
    deceased_name?: StringFieldUpdateOperationsInput | string
    filing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    case_status?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    estimated_estate_value?: NullableFloatFieldUpdateOperationsInput | number | null
    properties_json?: NullableStringFieldUpdateOperationsInput | string | null
    heirs_json?: NullableStringFieldUpdateOperationsInput | string | null
    urgency_score?: IntFieldUpdateOperationsInput | number
    deal_potential_score?: IntFieldUpdateOperationsInput | number
    next_hearing_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attorney_name?: NullableStringFieldUpdateOperationsInput | string | null
    attorney_phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProbateCaseCreateManyInput = {
    id?: string
    case_number: string
    deceased_name: string
    filing_date: Date | string
    case_status: string
    county: string
    estimated_estate_value?: number | null
    properties_json?: string | null
    heirs_json?: string | null
    urgency_score?: number
    deal_potential_score?: number
    next_hearing_date?: Date | string | null
    attorney_name?: string | null
    attorney_phone?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ProbateCaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_number?: StringFieldUpdateOperationsInput | string
    deceased_name?: StringFieldUpdateOperationsInput | string
    filing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    case_status?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    estimated_estate_value?: NullableFloatFieldUpdateOperationsInput | number | null
    properties_json?: NullableStringFieldUpdateOperationsInput | string | null
    heirs_json?: NullableStringFieldUpdateOperationsInput | string | null
    urgency_score?: IntFieldUpdateOperationsInput | number
    deal_potential_score?: IntFieldUpdateOperationsInput | number
    next_hearing_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attorney_name?: NullableStringFieldUpdateOperationsInput | string | null
    attorney_phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProbateCaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    case_number?: StringFieldUpdateOperationsInput | string
    deceased_name?: StringFieldUpdateOperationsInput | string
    filing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    case_status?: StringFieldUpdateOperationsInput | string
    county?: StringFieldUpdateOperationsInput | string
    estimated_estate_value?: NullableFloatFieldUpdateOperationsInput | number | null
    properties_json?: NullableStringFieldUpdateOperationsInput | string | null
    heirs_json?: NullableStringFieldUpdateOperationsInput | string | null
    urgency_score?: IntFieldUpdateOperationsInput | number
    deal_potential_score?: IntFieldUpdateOperationsInput | number
    next_hearing_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    attorney_name?: NullableStringFieldUpdateOperationsInput | string | null
    attorney_phone?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyViolationCreateInput = {
    id?: string
    property_address: string
    violation_type: string
    severity_score: number
    repeat_offender?: boolean
    financial_burden: number
    compliance_deadline: Date | string
    enforcement_stage: string
    deal_potential?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PropertyViolationUncheckedCreateInput = {
    id?: string
    property_address: string
    violation_type: string
    severity_score: number
    repeat_offender?: boolean
    financial_burden: number
    compliance_deadline: Date | string
    enforcement_stage: string
    deal_potential?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PropertyViolationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_address?: StringFieldUpdateOperationsInput | string
    violation_type?: StringFieldUpdateOperationsInput | string
    severity_score?: IntFieldUpdateOperationsInput | number
    repeat_offender?: BoolFieldUpdateOperationsInput | boolean
    financial_burden?: FloatFieldUpdateOperationsInput | number
    compliance_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    enforcement_stage?: StringFieldUpdateOperationsInput | string
    deal_potential?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyViolationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_address?: StringFieldUpdateOperationsInput | string
    violation_type?: StringFieldUpdateOperationsInput | string
    severity_score?: IntFieldUpdateOperationsInput | number
    repeat_offender?: BoolFieldUpdateOperationsInput | boolean
    financial_burden?: FloatFieldUpdateOperationsInput | number
    compliance_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    enforcement_stage?: StringFieldUpdateOperationsInput | string
    deal_potential?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyViolationCreateManyInput = {
    id?: string
    property_address: string
    violation_type: string
    severity_score: number
    repeat_offender?: boolean
    financial_burden: number
    compliance_deadline: Date | string
    enforcement_stage: string
    deal_potential?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PropertyViolationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_address?: StringFieldUpdateOperationsInput | string
    violation_type?: StringFieldUpdateOperationsInput | string
    severity_score?: IntFieldUpdateOperationsInput | number
    repeat_offender?: BoolFieldUpdateOperationsInput | boolean
    financial_burden?: FloatFieldUpdateOperationsInput | number
    compliance_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    enforcement_stage?: StringFieldUpdateOperationsInput | string
    deal_potential?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyViolationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_address?: StringFieldUpdateOperationsInput | string
    violation_type?: StringFieldUpdateOperationsInput | string
    severity_score?: IntFieldUpdateOperationsInput | number
    repeat_offender?: BoolFieldUpdateOperationsInput | boolean
    financial_burden?: FloatFieldUpdateOperationsInput | number
    compliance_deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    enforcement_stage?: StringFieldUpdateOperationsInput | string
    deal_potential?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateInput = {
    id?: string
    name: string
    type: string
    status?: string
    target_count?: number
    sent_count?: number
    response_rate?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CampaignUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    status?: string
    target_count?: number
    sent_count?: number
    response_rate?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    target_count?: IntFieldUpdateOperationsInput | number
    sent_count?: IntFieldUpdateOperationsInput | number
    response_rate?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    target_count?: IntFieldUpdateOperationsInput | number
    sent_count?: IntFieldUpdateOperationsInput | number
    response_rate?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateManyInput = {
    id?: string
    name: string
    type: string
    status?: string
    target_count?: number
    sent_count?: number
    response_rate?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    target_count?: IntFieldUpdateOperationsInput | number
    sent_count?: IntFieldUpdateOperationsInput | number
    response_rate?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    target_count?: IntFieldUpdateOperationsInput | number
    sent_count?: IntFieldUpdateOperationsInput | number
    response_rate?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateInput = {
    id?: string
    lead_id?: string | null
    method: string
    status: string
    notes?: string | null
    scheduled_at?: Date | string | null
    completed_at?: Date | string | null
    created_at?: Date | string
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    lead_id?: string | null
    method: string
    status: string
    notes?: string | null
    scheduled_at?: Date | string | null
    completed_at?: Date | string | null
    created_at?: Date | string
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateManyInput = {
    id?: string
    lead_id?: string | null
    method: string
    status: string
    notes?: string | null
    scheduled_at?: Date | string | null
    completed_at?: Date | string | null
    created_at?: Date | string
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealAnalysisCreateInput = {
    id?: string
    lead_id: string
    analysis_json: string
    arv?: number | null
    budget?: number | null
    total_investment?: number | null
    net_profit?: number | null
    roi_pct?: number | null
    risk_score?: number | null
    recommendation?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DealAnalysisUncheckedCreateInput = {
    id?: string
    lead_id: string
    analysis_json: string
    arv?: number | null
    budget?: number | null
    total_investment?: number | null
    net_profit?: number | null
    roi_pct?: number | null
    risk_score?: number | null
    recommendation?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DealAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: StringFieldUpdateOperationsInput | string
    analysis_json?: StringFieldUpdateOperationsInput | string
    arv?: NullableFloatFieldUpdateOperationsInput | number | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    total_investment?: NullableFloatFieldUpdateOperationsInput | number | null
    net_profit?: NullableFloatFieldUpdateOperationsInput | number | null
    roi_pct?: NullableFloatFieldUpdateOperationsInput | number | null
    risk_score?: NullableIntFieldUpdateOperationsInput | number | null
    recommendation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: StringFieldUpdateOperationsInput | string
    analysis_json?: StringFieldUpdateOperationsInput | string
    arv?: NullableFloatFieldUpdateOperationsInput | number | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    total_investment?: NullableFloatFieldUpdateOperationsInput | number | null
    net_profit?: NullableFloatFieldUpdateOperationsInput | number | null
    roi_pct?: NullableFloatFieldUpdateOperationsInput | number | null
    risk_score?: NullableIntFieldUpdateOperationsInput | number | null
    recommendation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealAnalysisCreateManyInput = {
    id?: string
    lead_id: string
    analysis_json: string
    arv?: number | null
    budget?: number | null
    total_investment?: number | null
    net_profit?: number | null
    roi_pct?: number | null
    risk_score?: number | null
    recommendation?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DealAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: StringFieldUpdateOperationsInput | string
    analysis_json?: StringFieldUpdateOperationsInput | string
    arv?: NullableFloatFieldUpdateOperationsInput | number | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    total_investment?: NullableFloatFieldUpdateOperationsInput | number | null
    net_profit?: NullableFloatFieldUpdateOperationsInput | number | null
    roi_pct?: NullableFloatFieldUpdateOperationsInput | number | null
    risk_score?: NullableIntFieldUpdateOperationsInput | number | null
    recommendation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lead_id?: StringFieldUpdateOperationsInput | string
    analysis_json?: StringFieldUpdateOperationsInput | string
    arv?: NullableFloatFieldUpdateOperationsInput | number | null
    budget?: NullableFloatFieldUpdateOperationsInput | number | null
    total_investment?: NullableFloatFieldUpdateOperationsInput | number | null
    net_profit?: NullableFloatFieldUpdateOperationsInput | number | null
    roi_pct?: NullableFloatFieldUpdateOperationsInput | number | null
    risk_score?: NullableIntFieldUpdateOperationsInput | number | null
    recommendation?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobCreateInput = {
    id?: string
    source: string
    status: string
    config: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    logs?: string | null
    resultsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    propertyRecords?: PropertyRecordCreateNestedManyWithoutScrapingJobInput
  }

  export type ScrapingJobUncheckedCreateInput = {
    id?: string
    source: string
    status: string
    config: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    logs?: string | null
    resultsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    propertyRecords?: PropertyRecordUncheckedCreateNestedManyWithoutScrapingJobInput
  }

  export type ScrapingJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyRecords?: PropertyRecordUpdateManyWithoutScrapingJobNestedInput
  }

  export type ScrapingJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyRecords?: PropertyRecordUncheckedUpdateManyWithoutScrapingJobNestedInput
  }

  export type ScrapingJobCreateManyInput = {
    id?: string
    source: string
    status: string
    config: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    logs?: string | null
    resultsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordCreateInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    scrapingJob?: ScrapingJobCreateNestedOneWithoutPropertyRecordsInput
  }

  export type PropertyRecordUncheckedCreateInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    scrapingJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scrapingJob?: ScrapingJobUpdateOneWithoutPropertyRecordsNestedInput
  }

  export type PropertyRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    scrapingJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordCreateManyInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    scrapingJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    scrapingJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingScheduleCreateInput = {
    id?: string
    enabled?: boolean
    frequency?: string | null
    time?: string | null
    day?: string | null
    sources: string
    zipCodes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingScheduleUncheckedCreateInput = {
    id?: string
    enabled?: boolean
    frequency?: string | null
    time?: string | null
    day?: string | null
    sources: string
    zipCodes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    day?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: StringFieldUpdateOperationsInput | string
    zipCodes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    day?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: StringFieldUpdateOperationsInput | string
    zipCodes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingScheduleCreateManyInput = {
    id?: string
    enabled?: boolean
    frequency?: string | null
    time?: string | null
    day?: string | null
    sources: string
    zipCodes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    day?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: StringFieldUpdateOperationsInput | string
    zipCodes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    day?: NullableStringFieldUpdateOperationsInput | string | null
    sources?: StringFieldUpdateOperationsInput | string
    zipCodes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScraperJobCreateInput = {
    id?: string
    source: $Enums.ScraperSource
    inputPayload: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.JobStatus
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempt?: number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobUncheckedCreateInput = {
    id?: string
    source: $Enums.ScraperSource
    inputPayload: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.JobStatus
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempt?: number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    inputPayload?: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempt?: IntFieldUpdateOperationsInput | number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    inputPayload?: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempt?: IntFieldUpdateOperationsInput | number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobCreateManyInput = {
    id?: string
    source: $Enums.ScraperSource
    inputPayload: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status: $Enums.JobStatus
    startedAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempt?: number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    inputPayload?: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempt?: IntFieldUpdateOperationsInput | number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScraperJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    inputPayload?: JsonNullValueInput | InputJsonValue
    resultPayload?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempt?: IntFieldUpdateOperationsInput | number
    previousErrors?: JsonNullValueInput | InputJsonValue
  }

  export type ScrapedPropertyCreateInput = {
    id?: string
    source: $Enums.ScraperSource
    zip: string
    address: string
    price?: number | null
    beds?: number | null
    sqft?: number | null
    propertyType?: string | null
    link?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyCreateenrichmentTagsInput | string[]
    investmentScore?: number | null
    condition?: $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyCreatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapedPropertyUncheckedCreateInput = {
    id?: string
    source: $Enums.ScraperSource
    zip: string
    address: string
    price?: number | null
    beds?: number | null
    sqft?: number | null
    propertyType?: string | null
    link?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyCreateenrichmentTagsInput | string[]
    investmentScore?: number | null
    condition?: $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyCreatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapedPropertyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    zip?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    price?: NullableIntFieldUpdateOperationsInput | number | null
    beds?: NullableIntFieldUpdateOperationsInput | number | null
    sqft?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyUpdateenrichmentTagsInput | string[]
    investmentScore?: NullableIntFieldUpdateOperationsInput | number | null
    condition?: NullableEnumPropertyConditionFieldUpdateOperationsInput | $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyUpdatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapedPropertyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    zip?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    price?: NullableIntFieldUpdateOperationsInput | number | null
    beds?: NullableIntFieldUpdateOperationsInput | number | null
    sqft?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyUpdateenrichmentTagsInput | string[]
    investmentScore?: NullableIntFieldUpdateOperationsInput | number | null
    condition?: NullableEnumPropertyConditionFieldUpdateOperationsInput | $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyUpdatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapedPropertyCreateManyInput = {
    id?: string
    source: $Enums.ScraperSource
    zip: string
    address: string
    price?: number | null
    beds?: number | null
    sqft?: number | null
    propertyType?: string | null
    link?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyCreateenrichmentTagsInput | string[]
    investmentScore?: number | null
    condition?: $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyCreatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapedPropertyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    zip?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    price?: NullableIntFieldUpdateOperationsInput | number | null
    beds?: NullableIntFieldUpdateOperationsInput | number | null
    sqft?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyUpdateenrichmentTagsInput | string[]
    investmentScore?: NullableIntFieldUpdateOperationsInput | number | null
    condition?: NullableEnumPropertyConditionFieldUpdateOperationsInput | $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyUpdatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapedPropertyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: EnumScraperSourceFieldUpdateOperationsInput | $Enums.ScraperSource
    zip?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    price?: NullableIntFieldUpdateOperationsInput | number | null
    beds?: NullableIntFieldUpdateOperationsInput | number | null
    sqft?: NullableIntFieldUpdateOperationsInput | number | null
    propertyType?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    enrichmentTags?: ScrapedPropertyUpdateenrichmentTagsInput | string[]
    investmentScore?: NullableIntFieldUpdateOperationsInput | number | null
    condition?: NullableEnumPropertyConditionFieldUpdateOperationsInput | $Enums.PropertyCondition | null
    reasons?: ScrapedPropertyUpdatereasonsInput | string[]
    tagReasons?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionCreateInput = {
    id?: string
    targetUrl: string
    eventTypes?: WebhookSubscriptionCreateeventTypesInput | string[]
    isActive?: boolean
    signingSecret: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookSubscriptionUncheckedCreateInput = {
    id?: string
    targetUrl: string
    eventTypes?: WebhookSubscriptionCreateeventTypesInput | string[]
    isActive?: boolean
    signingSecret: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUrl?: StringFieldUpdateOperationsInput | string
    eventTypes?: WebhookSubscriptionUpdateeventTypesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signingSecret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUrl?: StringFieldUpdateOperationsInput | string
    eventTypes?: WebhookSubscriptionUpdateeventTypesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signingSecret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionCreateManyInput = {
    id?: string
    targetUrl: string
    eventTypes?: WebhookSubscriptionCreateeventTypesInput | string[]
    isActive?: boolean
    signingSecret: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUrl?: StringFieldUpdateOperationsInput | string
    eventTypes?: WebhookSubscriptionUpdateeventTypesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signingSecret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetUrl?: StringFieldUpdateOperationsInput | string
    eventTypes?: WebhookSubscriptionUpdateeventTypesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    signingSecret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookDeliveryFailureCreateInput = {
    id?: string
    subscriptionId: string
    eventType: string
    payload: JsonNullValueInput | InputJsonValue
    attempts: number
    finalError?: string | null
    lastError?: string | null
    createdAt?: Date | string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    replayedAt?: Date | string | null
    replayJobId?: string | null
  }

  export type WebhookDeliveryFailureUncheckedCreateInput = {
    id?: string
    subscriptionId: string
    eventType: string
    payload: JsonNullValueInput | InputJsonValue
    attempts: number
    finalError?: string | null
    lastError?: string | null
    createdAt?: Date | string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    replayedAt?: Date | string | null
    replayJobId?: string | null
  }

  export type WebhookDeliveryFailureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    attempts?: IntFieldUpdateOperationsInput | number
    finalError?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    replayedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replayJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookDeliveryFailureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    attempts?: IntFieldUpdateOperationsInput | number
    finalError?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    replayedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replayJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookDeliveryFailureCreateManyInput = {
    id?: string
    subscriptionId: string
    eventType: string
    payload: JsonNullValueInput | InputJsonValue
    attempts: number
    finalError?: string | null
    lastError?: string | null
    createdAt?: Date | string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    replayedAt?: Date | string | null
    replayJobId?: string | null
  }

  export type WebhookDeliveryFailureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    attempts?: IntFieldUpdateOperationsInput | number
    finalError?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    replayedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replayJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookDeliveryFailureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    attempts?: IntFieldUpdateOperationsInput | number
    finalError?: NullableStringFieldUpdateOperationsInput | string | null
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    replayedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    replayJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookDeliveryLogCreateInput = {
    id?: string
    subscriptionId: string
    eventType: string
    status: string
    attemptsMade: number
    jobId: string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookDeliveryLogUncheckedCreateInput = {
    id?: string
    subscriptionId: string
    eventType: string
    status: string
    attemptsMade: number
    jobId: string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookDeliveryLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attemptsMade?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookDeliveryLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attemptsMade?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookDeliveryLogCreateManyInput = {
    id?: string
    subscriptionId: string
    eventType: string
    status: string
    attemptsMade: number
    jobId: string
    lastAttemptAt?: Date | string
    isResolved?: boolean
    lastError?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebhookDeliveryLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attemptsMade?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebhookDeliveryLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    attemptsMade?: IntFieldUpdateOperationsInput | number
    jobId?: StringFieldUpdateOperationsInput | string
    lastAttemptAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isResolved?: BoolFieldUpdateOperationsInput | boolean
    lastError?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchmakingJobCreateInput = {
    id?: string
    filterJSON: JsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    matchedCount?: number
  }

  export type MatchmakingJobUncheckedCreateInput = {
    id?: string
    filterJSON: JsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    matchedCount?: number
  }

  export type MatchmakingJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterJSON?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    matchedCount?: IntFieldUpdateOperationsInput | number
  }

  export type MatchmakingJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterJSON?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    matchedCount?: IntFieldUpdateOperationsInput | number
  }

  export type MatchmakingJobCreateManyInput = {
    id?: string
    filterJSON: JsonNullValueInput | InputJsonValue
    status?: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    matchedCount?: number
  }

  export type MatchmakingJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterJSON?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    matchedCount?: IntFieldUpdateOperationsInput | number
  }

  export type MatchmakingJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filterJSON?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    matchedCount?: IntFieldUpdateOperationsInput | number
  }

  export type CrmActivityCreateInput = {
    id?: string
    type: string
    propertyId?: string | null
    leadId?: string | null
    userId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CrmActivityUncheckedCreateInput = {
    id?: string
    type: string
    propertyId?: string | null
    leadId?: string | null
    userId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CrmActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    propertyId?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrmActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    propertyId?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrmActivityCreateManyInput = {
    id?: string
    type: string
    propertyId?: string | null
    leadId?: string | null
    userId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CrmActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    propertyId?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrmActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    propertyId?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallTranscriptCreateInput = {
    id?: string
    callSid: string
    leadId?: string | null
    userId?: string | null
    audioUrl?: string | null
    transcript?: string | null
    recordingUrl?: string | null
    transcriptUrl?: string | null
    dtmfCaptured?: string | null
    createdAt?: Date | string
  }

  export type CallTranscriptUncheckedCreateInput = {
    id?: string
    callSid: string
    leadId?: string | null
    userId?: string | null
    audioUrl?: string | null
    transcript?: string | null
    recordingUrl?: string | null
    transcriptUrl?: string | null
    dtmfCaptured?: string | null
    createdAt?: Date | string
  }

  export type CallTranscriptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    recordingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dtmfCaptured?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallTranscriptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    recordingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dtmfCaptured?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallTranscriptCreateManyInput = {
    id?: string
    callSid: string
    leadId?: string | null
    userId?: string | null
    audioUrl?: string | null
    transcript?: string | null
    recordingUrl?: string | null
    transcriptUrl?: string | null
    dtmfCaptured?: string | null
    createdAt?: Date | string
  }

  export type CallTranscriptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    recordingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dtmfCaptured?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallTranscriptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    audioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    recordingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    transcriptUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dtmfCaptured?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallAnalysisCreateInput = {
    id?: string
    callSid: string
    transcriptId: string
    summary: string
    score: number
    tags?: CallAnalysisCreatetagsInput | string[]
    createdAt?: Date | string
  }

  export type CallAnalysisUncheckedCreateInput = {
    id?: string
    callSid: string
    transcriptId: string
    summary: string
    score: number
    tags?: CallAnalysisCreatetagsInput | string[]
    createdAt?: Date | string
  }

  export type CallAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    transcriptId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    tags?: CallAnalysisUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    transcriptId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    tags?: CallAnalysisUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallAnalysisCreateManyInput = {
    id?: string
    callSid: string
    transcriptId: string
    summary: string
    score: number
    tags?: CallAnalysisCreatetagsInput | string[]
    createdAt?: Date | string
  }

  export type CallAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    transcriptId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    tags?: CallAnalysisUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    callSid?: StringFieldUpdateOperationsInput | string
    transcriptId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    tags?: CallAnalysisUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ApiCostEntryCountOrderByAggregateInput = {
    id?: SortOrder
    apiType?: SortOrder
    cost?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiCostEntryAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
  }

  export type ApiCostEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    apiType?: SortOrder
    cost?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiCostEntryMinOrderByAggregateInput = {
    id?: SortOrder
    apiType?: SortOrder
    cost?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiCostEntrySumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LeadCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    owner_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    source_type?: SortOrder
    source?: SortOrder
    motivation_score?: SortOrder
    estimated_value?: SortOrder
    equity?: SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    is_probate?: SortOrder
    is_vacant?: SortOrder
    days_on_market?: SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    phones?: SortOrder
    emails?: SortOrder
    raw_data?: SortOrder
    temperature_tag?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    skip_traced_at?: SortOrder
    dnc_flag?: SortOrder
    timezone?: SortOrder
    quiet_hours_start?: SortOrder
    quiet_hours_end?: SortOrder
    activity_log_json?: SortOrder
    skip_trace_provider?: SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
    ai_scored_at?: SortOrder
  }

  export type LeadAvgOrderByAggregateInput = {
    motivation_score?: SortOrder
    estimated_value?: SortOrder
    equity?: SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    days_on_market?: SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    dnc_flag?: SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
  }

  export type LeadMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    owner_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    source_type?: SortOrder
    source?: SortOrder
    motivation_score?: SortOrder
    estimated_value?: SortOrder
    equity?: SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    is_probate?: SortOrder
    is_vacant?: SortOrder
    days_on_market?: SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    phones?: SortOrder
    emails?: SortOrder
    raw_data?: SortOrder
    temperature_tag?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    skip_traced_at?: SortOrder
    dnc_flag?: SortOrder
    timezone?: SortOrder
    quiet_hours_start?: SortOrder
    quiet_hours_end?: SortOrder
    activity_log_json?: SortOrder
    skip_trace_provider?: SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
    ai_scored_at?: SortOrder
  }

  export type LeadMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    owner_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    source_type?: SortOrder
    source?: SortOrder
    motivation_score?: SortOrder
    estimated_value?: SortOrder
    equity?: SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    is_probate?: SortOrder
    is_vacant?: SortOrder
    days_on_market?: SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    phones?: SortOrder
    emails?: SortOrder
    raw_data?: SortOrder
    temperature_tag?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    skip_traced_at?: SortOrder
    dnc_flag?: SortOrder
    timezone?: SortOrder
    quiet_hours_start?: SortOrder
    quiet_hours_end?: SortOrder
    activity_log_json?: SortOrder
    skip_trace_provider?: SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
    ai_scored_at?: SortOrder
  }

  export type LeadSumOrderByAggregateInput = {
    motivation_score?: SortOrder
    estimated_value?: SortOrder
    equity?: SortOrder
    condition_score?: SortOrder
    tax_debt?: SortOrder
    violations?: SortOrder
    days_on_market?: SortOrder
    lead_score?: SortOrder
    aiScore?: SortOrder
    feedback_good?: SortOrder
    feedback_bad?: SortOrder
    dnc_flag?: SortOrder
    skip_trace_cost_cents?: SortOrder
    ai_cost_cents?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProbateCaseCountOrderByAggregateInput = {
    id?: SortOrder
    case_number?: SortOrder
    deceased_name?: SortOrder
    filing_date?: SortOrder
    case_status?: SortOrder
    county?: SortOrder
    estimated_estate_value?: SortOrder
    properties_json?: SortOrder
    heirs_json?: SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
    next_hearing_date?: SortOrder
    attorney_name?: SortOrder
    attorney_phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProbateCaseAvgOrderByAggregateInput = {
    estimated_estate_value?: SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
  }

  export type ProbateCaseMaxOrderByAggregateInput = {
    id?: SortOrder
    case_number?: SortOrder
    deceased_name?: SortOrder
    filing_date?: SortOrder
    case_status?: SortOrder
    county?: SortOrder
    estimated_estate_value?: SortOrder
    properties_json?: SortOrder
    heirs_json?: SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
    next_hearing_date?: SortOrder
    attorney_name?: SortOrder
    attorney_phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProbateCaseMinOrderByAggregateInput = {
    id?: SortOrder
    case_number?: SortOrder
    deceased_name?: SortOrder
    filing_date?: SortOrder
    case_status?: SortOrder
    county?: SortOrder
    estimated_estate_value?: SortOrder
    properties_json?: SortOrder
    heirs_json?: SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
    next_hearing_date?: SortOrder
    attorney_name?: SortOrder
    attorney_phone?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProbateCaseSumOrderByAggregateInput = {
    estimated_estate_value?: SortOrder
    urgency_score?: SortOrder
    deal_potential_score?: SortOrder
  }

  export type PropertyViolationCountOrderByAggregateInput = {
    id?: SortOrder
    property_address?: SortOrder
    violation_type?: SortOrder
    severity_score?: SortOrder
    repeat_offender?: SortOrder
    financial_burden?: SortOrder
    compliance_deadline?: SortOrder
    enforcement_stage?: SortOrder
    deal_potential?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PropertyViolationAvgOrderByAggregateInput = {
    severity_score?: SortOrder
    financial_burden?: SortOrder
    deal_potential?: SortOrder
  }

  export type PropertyViolationMaxOrderByAggregateInput = {
    id?: SortOrder
    property_address?: SortOrder
    violation_type?: SortOrder
    severity_score?: SortOrder
    repeat_offender?: SortOrder
    financial_burden?: SortOrder
    compliance_deadline?: SortOrder
    enforcement_stage?: SortOrder
    deal_potential?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PropertyViolationMinOrderByAggregateInput = {
    id?: SortOrder
    property_address?: SortOrder
    violation_type?: SortOrder
    severity_score?: SortOrder
    repeat_offender?: SortOrder
    financial_burden?: SortOrder
    compliance_deadline?: SortOrder
    enforcement_stage?: SortOrder
    deal_potential?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PropertyViolationSumOrderByAggregateInput = {
    severity_score?: SortOrder
    financial_burden?: SortOrder
    deal_potential?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    status?: SortOrder
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    status?: SortOrder
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    status?: SortOrder
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    target_count?: SortOrder
    sent_count?: SortOrder
    response_rate?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    method?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    scheduled_at?: SortOrder
    completed_at?: SortOrder
    created_at?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    method?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    scheduled_at?: SortOrder
    completed_at?: SortOrder
    created_at?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    method?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    scheduled_at?: SortOrder
    completed_at?: SortOrder
    created_at?: SortOrder
  }

  export type DealAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    analysis_json?: SortOrder
    arv?: SortOrder
    budget?: SortOrder
    total_investment?: SortOrder
    net_profit?: SortOrder
    roi_pct?: SortOrder
    risk_score?: SortOrder
    recommendation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DealAnalysisAvgOrderByAggregateInput = {
    arv?: SortOrder
    budget?: SortOrder
    total_investment?: SortOrder
    net_profit?: SortOrder
    roi_pct?: SortOrder
    risk_score?: SortOrder
  }

  export type DealAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    analysis_json?: SortOrder
    arv?: SortOrder
    budget?: SortOrder
    total_investment?: SortOrder
    net_profit?: SortOrder
    roi_pct?: SortOrder
    risk_score?: SortOrder
    recommendation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DealAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    analysis_json?: SortOrder
    arv?: SortOrder
    budget?: SortOrder
    total_investment?: SortOrder
    net_profit?: SortOrder
    roi_pct?: SortOrder
    risk_score?: SortOrder
    recommendation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DealAnalysisSumOrderByAggregateInput = {
    arv?: SortOrder
    budget?: SortOrder
    total_investment?: SortOrder
    net_profit?: SortOrder
    roi_pct?: SortOrder
    risk_score?: SortOrder
  }

  export type PropertyRecordListRelationFilter = {
    every?: PropertyRecordWhereInput
    some?: PropertyRecordWhereInput
    none?: PropertyRecordWhereInput
  }

  export type PropertyRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScrapingJobCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    config?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    logs?: SortOrder
    resultsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobAvgOrderByAggregateInput = {
    resultsCount?: SortOrder
  }

  export type ScrapingJobMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    config?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    logs?: SortOrder
    resultsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    config?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    logs?: SortOrder
    resultsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingJobSumOrderByAggregateInput = {
    resultsCount?: SortOrder
  }

  export type ScrapingJobNullableRelationFilter = {
    is?: ScrapingJobWhereInput | null
    isNot?: ScrapingJobWhereInput | null
  }

  export type PropertyRecordCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    source?: SortOrder
    rawData?: SortOrder
    processed?: SortOrder
    scrapingJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    source?: SortOrder
    rawData?: SortOrder
    processed?: SortOrder
    scrapingJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyRecordMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    source?: SortOrder
    rawData?: SortOrder
    processed?: SortOrder
    scrapingJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    frequency?: SortOrder
    time?: SortOrder
    day?: SortOrder
    sources?: SortOrder
    zipCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    frequency?: SortOrder
    time?: SortOrder
    day?: SortOrder
    sources?: SortOrder
    zipCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapingScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    frequency?: SortOrder
    time?: SortOrder
    day?: SortOrder
    sources?: SortOrder
    zipCodes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumScraperSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.ScraperSource | EnumScraperSourceFieldRefInput<$PrismaModel>
    in?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumScraperSourceFilter<$PrismaModel> | $Enums.ScraperSource
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type ScraperJobCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    inputPayload?: SortOrder
    resultPayload?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attempt?: SortOrder
    previousErrors?: SortOrder
  }

  export type ScraperJobAvgOrderByAggregateInput = {
    attempt?: SortOrder
  }

  export type ScraperJobMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attempt?: SortOrder
  }

  export type ScraperJobMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attempt?: SortOrder
  }

  export type ScraperJobSumOrderByAggregateInput = {
    attempt?: SortOrder
  }

  export type EnumScraperSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScraperSource | EnumScraperSourceFieldRefInput<$PrismaModel>
    in?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumScraperSourceWithAggregatesFilter<$PrismaModel> | $Enums.ScraperSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScraperSourceFilter<$PrismaModel>
    _max?: NestedEnumScraperSourceFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPropertyConditionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyCondition | EnumPropertyConditionFieldRefInput<$PrismaModel> | null
    in?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPropertyConditionNullableFilter<$PrismaModel> | $Enums.PropertyCondition | null
  }

  export type ScrapedPropertySourceZipAddressCompoundUniqueInput = {
    source: $Enums.ScraperSource
    zip: string
    address: string
  }

  export type ScrapedPropertyCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    price?: SortOrder
    beds?: SortOrder
    sqft?: SortOrder
    propertyType?: SortOrder
    link?: SortOrder
    imageUrl?: SortOrder
    data?: SortOrder
    enrichmentTags?: SortOrder
    investmentScore?: SortOrder
    condition?: SortOrder
    reasons?: SortOrder
    tagReasons?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapedPropertyAvgOrderByAggregateInput = {
    price?: SortOrder
    beds?: SortOrder
    sqft?: SortOrder
    investmentScore?: SortOrder
  }

  export type ScrapedPropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    price?: SortOrder
    beds?: SortOrder
    sqft?: SortOrder
    propertyType?: SortOrder
    link?: SortOrder
    imageUrl?: SortOrder
    investmentScore?: SortOrder
    condition?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapedPropertyMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    zip?: SortOrder
    address?: SortOrder
    price?: SortOrder
    beds?: SortOrder
    sqft?: SortOrder
    propertyType?: SortOrder
    link?: SortOrder
    imageUrl?: SortOrder
    investmentScore?: SortOrder
    condition?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScrapedPropertySumOrderByAggregateInput = {
    price?: SortOrder
    beds?: SortOrder
    sqft?: SortOrder
    investmentScore?: SortOrder
  }

  export type EnumPropertyConditionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyCondition | EnumPropertyConditionFieldRefInput<$PrismaModel> | null
    in?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPropertyConditionNullableWithAggregatesFilter<$PrismaModel> | $Enums.PropertyCondition | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPropertyConditionNullableFilter<$PrismaModel>
    _max?: NestedEnumPropertyConditionNullableFilter<$PrismaModel>
  }

  export type WebhookSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    targetUrl?: SortOrder
    eventTypes?: SortOrder
    isActive?: SortOrder
    signingSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    targetUrl?: SortOrder
    isActive?: SortOrder
    signingSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    targetUrl?: SortOrder
    isActive?: SortOrder
    signingSecret?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookDeliveryFailureCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    payload?: SortOrder
    attempts?: SortOrder
    finalError?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    replayedAt?: SortOrder
    replayJobId?: SortOrder
  }

  export type WebhookDeliveryFailureAvgOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type WebhookDeliveryFailureMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    attempts?: SortOrder
    finalError?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    replayedAt?: SortOrder
    replayJobId?: SortOrder
  }

  export type WebhookDeliveryFailureMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    attempts?: SortOrder
    finalError?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    replayedAt?: SortOrder
    replayJobId?: SortOrder
  }

  export type WebhookDeliveryFailureSumOrderByAggregateInput = {
    attempts?: SortOrder
  }

  export type WebhookDeliveryLogCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    status?: SortOrder
    attemptsMade?: SortOrder
    jobId?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookDeliveryLogAvgOrderByAggregateInput = {
    attemptsMade?: SortOrder
  }

  export type WebhookDeliveryLogMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    status?: SortOrder
    attemptsMade?: SortOrder
    jobId?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookDeliveryLogMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    eventType?: SortOrder
    status?: SortOrder
    attemptsMade?: SortOrder
    jobId?: SortOrder
    lastAttemptAt?: SortOrder
    isResolved?: SortOrder
    lastError?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebhookDeliveryLogSumOrderByAggregateInput = {
    attemptsMade?: SortOrder
  }

  export type MatchmakingJobCountOrderByAggregateInput = {
    id?: SortOrder
    filterJSON?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    matchedCount?: SortOrder
  }

  export type MatchmakingJobAvgOrderByAggregateInput = {
    matchedCount?: SortOrder
  }

  export type MatchmakingJobMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    matchedCount?: SortOrder
  }

  export type MatchmakingJobMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    matchedCount?: SortOrder
  }

  export type MatchmakingJobSumOrderByAggregateInput = {
    matchedCount?: SortOrder
  }

  export type CrmActivityCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    propertyId?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CrmActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    propertyId?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CrmActivityMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    propertyId?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CallTranscriptCountOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    audioUrl?: SortOrder
    transcript?: SortOrder
    recordingUrl?: SortOrder
    transcriptUrl?: SortOrder
    dtmfCaptured?: SortOrder
    createdAt?: SortOrder
  }

  export type CallTranscriptMaxOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    audioUrl?: SortOrder
    transcript?: SortOrder
    recordingUrl?: SortOrder
    transcriptUrl?: SortOrder
    dtmfCaptured?: SortOrder
    createdAt?: SortOrder
  }

  export type CallTranscriptMinOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    audioUrl?: SortOrder
    transcript?: SortOrder
    recordingUrl?: SortOrder
    transcriptUrl?: SortOrder
    dtmfCaptured?: SortOrder
    createdAt?: SortOrder
  }

  export type CallAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    transcriptId?: SortOrder
    summary?: SortOrder
    score?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type CallAnalysisAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type CallAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    transcriptId?: SortOrder
    summary?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type CallAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    callSid?: SortOrder
    transcriptId?: SortOrder
    summary?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type CallAnalysisSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PropertyRecordCreateNestedManyWithoutScrapingJobInput = {
    create?: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput> | PropertyRecordCreateWithoutScrapingJobInput[] | PropertyRecordUncheckedCreateWithoutScrapingJobInput[]
    connectOrCreate?: PropertyRecordCreateOrConnectWithoutScrapingJobInput | PropertyRecordCreateOrConnectWithoutScrapingJobInput[]
    createMany?: PropertyRecordCreateManyScrapingJobInputEnvelope
    connect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
  }

  export type PropertyRecordUncheckedCreateNestedManyWithoutScrapingJobInput = {
    create?: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput> | PropertyRecordCreateWithoutScrapingJobInput[] | PropertyRecordUncheckedCreateWithoutScrapingJobInput[]
    connectOrCreate?: PropertyRecordCreateOrConnectWithoutScrapingJobInput | PropertyRecordCreateOrConnectWithoutScrapingJobInput[]
    createMany?: PropertyRecordCreateManyScrapingJobInputEnvelope
    connect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
  }

  export type PropertyRecordUpdateManyWithoutScrapingJobNestedInput = {
    create?: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput> | PropertyRecordCreateWithoutScrapingJobInput[] | PropertyRecordUncheckedCreateWithoutScrapingJobInput[]
    connectOrCreate?: PropertyRecordCreateOrConnectWithoutScrapingJobInput | PropertyRecordCreateOrConnectWithoutScrapingJobInput[]
    upsert?: PropertyRecordUpsertWithWhereUniqueWithoutScrapingJobInput | PropertyRecordUpsertWithWhereUniqueWithoutScrapingJobInput[]
    createMany?: PropertyRecordCreateManyScrapingJobInputEnvelope
    set?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    disconnect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    delete?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    connect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    update?: PropertyRecordUpdateWithWhereUniqueWithoutScrapingJobInput | PropertyRecordUpdateWithWhereUniqueWithoutScrapingJobInput[]
    updateMany?: PropertyRecordUpdateManyWithWhereWithoutScrapingJobInput | PropertyRecordUpdateManyWithWhereWithoutScrapingJobInput[]
    deleteMany?: PropertyRecordScalarWhereInput | PropertyRecordScalarWhereInput[]
  }

  export type PropertyRecordUncheckedUpdateManyWithoutScrapingJobNestedInput = {
    create?: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput> | PropertyRecordCreateWithoutScrapingJobInput[] | PropertyRecordUncheckedCreateWithoutScrapingJobInput[]
    connectOrCreate?: PropertyRecordCreateOrConnectWithoutScrapingJobInput | PropertyRecordCreateOrConnectWithoutScrapingJobInput[]
    upsert?: PropertyRecordUpsertWithWhereUniqueWithoutScrapingJobInput | PropertyRecordUpsertWithWhereUniqueWithoutScrapingJobInput[]
    createMany?: PropertyRecordCreateManyScrapingJobInputEnvelope
    set?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    disconnect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    delete?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    connect?: PropertyRecordWhereUniqueInput | PropertyRecordWhereUniqueInput[]
    update?: PropertyRecordUpdateWithWhereUniqueWithoutScrapingJobInput | PropertyRecordUpdateWithWhereUniqueWithoutScrapingJobInput[]
    updateMany?: PropertyRecordUpdateManyWithWhereWithoutScrapingJobInput | PropertyRecordUpdateManyWithWhereWithoutScrapingJobInput[]
    deleteMany?: PropertyRecordScalarWhereInput | PropertyRecordScalarWhereInput[]
  }

  export type ScrapingJobCreateNestedOneWithoutPropertyRecordsInput = {
    create?: XOR<ScrapingJobCreateWithoutPropertyRecordsInput, ScrapingJobUncheckedCreateWithoutPropertyRecordsInput>
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutPropertyRecordsInput
    connect?: ScrapingJobWhereUniqueInput
  }

  export type ScrapingJobUpdateOneWithoutPropertyRecordsNestedInput = {
    create?: XOR<ScrapingJobCreateWithoutPropertyRecordsInput, ScrapingJobUncheckedCreateWithoutPropertyRecordsInput>
    connectOrCreate?: ScrapingJobCreateOrConnectWithoutPropertyRecordsInput
    upsert?: ScrapingJobUpsertWithoutPropertyRecordsInput
    disconnect?: ScrapingJobWhereInput | boolean
    delete?: ScrapingJobWhereInput | boolean
    connect?: ScrapingJobWhereUniqueInput
    update?: XOR<XOR<ScrapingJobUpdateToOneWithWhereWithoutPropertyRecordsInput, ScrapingJobUpdateWithoutPropertyRecordsInput>, ScrapingJobUncheckedUpdateWithoutPropertyRecordsInput>
  }

  export type EnumScraperSourceFieldUpdateOperationsInput = {
    set?: $Enums.ScraperSource
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type ScrapedPropertyCreateenrichmentTagsInput = {
    set: string[]
  }

  export type ScrapedPropertyCreatereasonsInput = {
    set: string[]
  }

  export type ScrapedPropertyUpdateenrichmentTagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumPropertyConditionFieldUpdateOperationsInput = {
    set?: $Enums.PropertyCondition | null
  }

  export type ScrapedPropertyUpdatereasonsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type WebhookSubscriptionCreateeventTypesInput = {
    set: string[]
  }

  export type WebhookSubscriptionUpdateeventTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CallAnalysisCreatetagsInput = {
    set: string[]
  }

  export type CallAnalysisUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumScraperSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.ScraperSource | EnumScraperSourceFieldRefInput<$PrismaModel>
    in?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumScraperSourceFilter<$PrismaModel> | $Enums.ScraperSource
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumScraperSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScraperSource | EnumScraperSourceFieldRefInput<$PrismaModel>
    in?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScraperSource[] | ListEnumScraperSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumScraperSourceWithAggregatesFilter<$PrismaModel> | $Enums.ScraperSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScraperSourceFilter<$PrismaModel>
    _max?: NestedEnumScraperSourceFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumPropertyConditionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyCondition | EnumPropertyConditionFieldRefInput<$PrismaModel> | null
    in?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPropertyConditionNullableFilter<$PrismaModel> | $Enums.PropertyCondition | null
  }

  export type NestedEnumPropertyConditionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PropertyCondition | EnumPropertyConditionFieldRefInput<$PrismaModel> | null
    in?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PropertyCondition[] | ListEnumPropertyConditionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPropertyConditionNullableWithAggregatesFilter<$PrismaModel> | $Enums.PropertyCondition | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPropertyConditionNullableFilter<$PrismaModel>
    _max?: NestedEnumPropertyConditionNullableFilter<$PrismaModel>
  }

  export type PropertyRecordCreateWithoutScrapingJobInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyRecordUncheckedCreateWithoutScrapingJobInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyRecordCreateOrConnectWithoutScrapingJobInput = {
    where: PropertyRecordWhereUniqueInput
    create: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput>
  }

  export type PropertyRecordCreateManyScrapingJobInputEnvelope = {
    data: PropertyRecordCreateManyScrapingJobInput | PropertyRecordCreateManyScrapingJobInput[]
    skipDuplicates?: boolean
  }

  export type PropertyRecordUpsertWithWhereUniqueWithoutScrapingJobInput = {
    where: PropertyRecordWhereUniqueInput
    update: XOR<PropertyRecordUpdateWithoutScrapingJobInput, PropertyRecordUncheckedUpdateWithoutScrapingJobInput>
    create: XOR<PropertyRecordCreateWithoutScrapingJobInput, PropertyRecordUncheckedCreateWithoutScrapingJobInput>
  }

  export type PropertyRecordUpdateWithWhereUniqueWithoutScrapingJobInput = {
    where: PropertyRecordWhereUniqueInput
    data: XOR<PropertyRecordUpdateWithoutScrapingJobInput, PropertyRecordUncheckedUpdateWithoutScrapingJobInput>
  }

  export type PropertyRecordUpdateManyWithWhereWithoutScrapingJobInput = {
    where: PropertyRecordScalarWhereInput
    data: XOR<PropertyRecordUpdateManyMutationInput, PropertyRecordUncheckedUpdateManyWithoutScrapingJobInput>
  }

  export type PropertyRecordScalarWhereInput = {
    AND?: PropertyRecordScalarWhereInput | PropertyRecordScalarWhereInput[]
    OR?: PropertyRecordScalarWhereInput[]
    NOT?: PropertyRecordScalarWhereInput | PropertyRecordScalarWhereInput[]
    id?: StringFilter<"PropertyRecord"> | string
    address?: StringFilter<"PropertyRecord"> | string
    city?: StringNullableFilter<"PropertyRecord"> | string | null
    state?: StringNullableFilter<"PropertyRecord"> | string | null
    zipCode?: StringNullableFilter<"PropertyRecord"> | string | null
    source?: StringFilter<"PropertyRecord"> | string
    rawData?: StringFilter<"PropertyRecord"> | string
    processed?: BoolFilter<"PropertyRecord"> | boolean
    scrapingJobId?: StringNullableFilter<"PropertyRecord"> | string | null
    createdAt?: DateTimeFilter<"PropertyRecord"> | Date | string
    updatedAt?: DateTimeFilter<"PropertyRecord"> | Date | string
  }

  export type ScrapingJobCreateWithoutPropertyRecordsInput = {
    id?: string
    source: string
    status: string
    config: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    logs?: string | null
    resultsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobUncheckedCreateWithoutPropertyRecordsInput = {
    id?: string
    source: string
    status: string
    config: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    logs?: string | null
    resultsCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScrapingJobCreateOrConnectWithoutPropertyRecordsInput = {
    where: ScrapingJobWhereUniqueInput
    create: XOR<ScrapingJobCreateWithoutPropertyRecordsInput, ScrapingJobUncheckedCreateWithoutPropertyRecordsInput>
  }

  export type ScrapingJobUpsertWithoutPropertyRecordsInput = {
    update: XOR<ScrapingJobUpdateWithoutPropertyRecordsInput, ScrapingJobUncheckedUpdateWithoutPropertyRecordsInput>
    create: XOR<ScrapingJobCreateWithoutPropertyRecordsInput, ScrapingJobUncheckedCreateWithoutPropertyRecordsInput>
    where?: ScrapingJobWhereInput
  }

  export type ScrapingJobUpdateToOneWithWhereWithoutPropertyRecordsInput = {
    where?: ScrapingJobWhereInput
    data: XOR<ScrapingJobUpdateWithoutPropertyRecordsInput, ScrapingJobUncheckedUpdateWithoutPropertyRecordsInput>
  }

  export type ScrapingJobUpdateWithoutPropertyRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapingJobUncheckedUpdateWithoutPropertyRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    config?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    resultsCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordCreateManyScrapingJobInput = {
    id?: string
    address: string
    city?: string | null
    state?: string | null
    zipCode?: string | null
    source: string
    rawData: string
    processed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyRecordUpdateWithoutScrapingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordUncheckedUpdateWithoutScrapingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyRecordUncheckedUpdateManyWithoutScrapingJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    source?: StringFieldUpdateOperationsInput | string
    rawData?: StringFieldUpdateOperationsInput | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ScrapingJobCountOutputTypeDefaultArgs instead
     */
    export type ScrapingJobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScrapingJobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiCostEntryDefaultArgs instead
     */
    export type ApiCostEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApiCostEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadDefaultArgs instead
     */
    export type LeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProbateCaseDefaultArgs instead
     */
    export type ProbateCaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProbateCaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyViolationDefaultArgs instead
     */
    export type PropertyViolationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyViolationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignDefaultArgs instead
     */
    export type CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactDefaultArgs instead
     */
    export type ContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DealAnalysisDefaultArgs instead
     */
    export type DealAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DealAnalysisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScrapingJobDefaultArgs instead
     */
    export type ScrapingJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScrapingJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyRecordDefaultArgs instead
     */
    export type PropertyRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScrapingScheduleDefaultArgs instead
     */
    export type ScrapingScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScrapingScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScraperJobDefaultArgs instead
     */
    export type ScraperJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScraperJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScrapedPropertyDefaultArgs instead
     */
    export type ScrapedPropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScrapedPropertyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookSubscriptionDefaultArgs instead
     */
    export type WebhookSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookDeliveryFailureDefaultArgs instead
     */
    export type WebhookDeliveryFailureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookDeliveryFailureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookDeliveryLogDefaultArgs instead
     */
    export type WebhookDeliveryLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookDeliveryLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchmakingJobDefaultArgs instead
     */
    export type MatchmakingJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchmakingJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CrmActivityDefaultArgs instead
     */
    export type CrmActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CrmActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CallTranscriptDefaultArgs instead
     */
    export type CallTranscriptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CallTranscriptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CallAnalysisDefaultArgs instead
     */
    export type CallAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CallAnalysisDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}