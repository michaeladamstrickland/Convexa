generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiCostEntry {
  id        Int      @id @default(autoincrement())
  apiType   String
  cost      Float
  details   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("api_cost_entries")
}

model Lead {
  id                    String    @id @default(cuid())
  address               String
  owner_name            String?
  phone                 String?
  email                 String?
  source_type           String
  source                String    @default("manual")
  motivation_score      Int       @default(0)
  estimated_value       Float?
  equity                Float?
  condition_score       Int       @default(50)
  tax_debt              Float     @default(0)
  violations            Int       @default(0)
  is_probate            Boolean   @default(false)
  is_vacant             Boolean   @default(false)
  days_on_market        Int?
  lead_score            Int       @default(0)
  aiScore               Int?
  feedback_good         Int       @default(0)
  feedback_bad          Int       @default(0)
  phones                String    @default("[]")
  emails                String    @default("[]")
  raw_data              String?
  temperature_tag       String    @default("DEAD")
  status                String    @default("NEW")
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  skip_traced_at        DateTime?
  dnc_flag              Int       @default(0)
  timezone              String?
  quiet_hours_start     String?
  quiet_hours_end       String?
  activity_log_json     String?
  skip_trace_provider   String?
  skip_trace_cost_cents Int       @default(0)
  ai_cost_cents         Int       @default(0)
  ai_scored_at          DateTime?

  @@map("leads")
}

model ProbateCase {
  id                     String    @id @default(cuid())
  case_number            String    @unique
  deceased_name          String
  filing_date            DateTime
  case_status            String
  county                 String
  estimated_estate_value Float?
  properties_json        String?
  heirs_json             String?
  urgency_score          Int       @default(0)
  deal_potential_score   Int       @default(0)
  next_hearing_date      DateTime?
  attorney_name          String?
  attorney_phone         String?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt

  @@map("probate_cases")
}

model PropertyViolation {
  id                  String   @id @default(cuid())
  property_address    String
  violation_type      String
  severity_score      Int
  repeat_offender     Boolean  @default(false)
  financial_burden    Float
  compliance_deadline DateTime
  enforcement_stage   String
  deal_potential      Int      @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("property_violations")
}

model Campaign {
  id            String   @id @default(cuid())
  name          String
  type          String
  status        String   @default("active")
  target_count  Int      @default(0)
  sent_count    Int      @default(0)
  response_rate Float    @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("campaigns")
}

model Contact {
  id           String    @id @default(cuid())
  lead_id      String?
  method       String
  status       String
  notes        String?
  scheduled_at DateTime?
  completed_at DateTime?
  created_at   DateTime  @default(now())

  @@map("contacts")
}

model DealAnalysis {
  id               String   @id @default(cuid())
  lead_id          String
  analysis_json    String
  arv              Float?
  budget           Float?
  total_investment Float?
  net_profit       Float?
  roi_pct          Float?
  risk_score       Int?
  recommendation   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@index([lead_id], map: "dealanalysis_lead_idx")
  @@map("deal_analysis")
}

model ScrapingJob {
  id              String           @id @default(cuid())
  source          String
  status          String
  config          String
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  logs            String?
  resultsCount    Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  propertyRecords PropertyRecord[]

  @@map("scraping_jobs")
}

model PropertyRecord {
  id            String       @id @default(cuid())
  address       String
  city          String?
  state         String?
  zipCode       String?
  source        String
  rawData       String
  processed     Boolean      @default(false)
  scrapingJobId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  scrapingJob   ScrapingJob? @relation(fields: [scrapingJobId], references: [id])

  @@map("property_records")
}

model ScrapingSchedule {
  id        String   @id @default(cuid())
  enabled   Boolean  @default(false)
  frequency String?
  time      String?
  day       String?
  sources   String
  zipCodes  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("scraping_schedules")
}

model ScraperJob {
  id             String        @id @default(uuid())
  source         ScraperSource
  inputPayload   Json
  resultPayload  Json?
  status         JobStatus
  startedAt      DateTime?
  finishedAt     DateTime?
  error          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  attempt        Int           @default(0)
  previousErrors Json          @default("[]")

  @@index([createdAt])
  @@index([source])
  @@map("scraper_jobs")
}

model ScrapedProperty {
  id           String        @id @default(uuid())
  source       ScraperSource
  zip          String
  address      String
  price        Int?
  beds         Int?
  sqft         Int?
  propertyType String?
  link         String?
  imageUrl     String?
  data         Json?
  enrichmentTags String[]   @default([])
  investmentScore Int?
  condition     PropertyCondition?
  reasons       String[]     @default([])
  tagReasons    Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([source, zip, address])
  @@index([source])
  @@index([zip])
  @@index([beds])
  @@index([propertyType])
  @@index([createdAt])
  @@map("scraped_properties")
}

model WebhookSubscription {
  id            String   @id @default(uuid())
  targetUrl     String
  eventTypes    String[]
  isActive      Boolean  @default(true)
  signingSecret String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isActive])
  @@map("webhook_subscriptions")
}

model WebhookDeliveryFailure {
  id             String   @id @default(uuid())
  subscriptionId String
  eventType      String
  payload        Json
  attempts       Int
  finalError     String?
  lastError      String?
  createdAt      DateTime @default(now())
  lastAttemptAt  DateTime @default(now())
  isResolved     Boolean  @default(false)
  replayedAt     DateTime?
  replayJobId    String?

  @@index([subscriptionId])
  @@map("webhook_delivery_failures")
}

// Unified delivery history log (success + failures). Failed rows can later be marked isResolved true when a retry succeeds.
model WebhookDeliveryLog {
  id             String   @id @default(uuid())
  subscriptionId String
  eventType      String
  status         String   // 'delivered' | 'failed'
  attemptsMade   Int
  jobId          String
  lastAttemptAt  DateTime @default(now())
  isResolved     Boolean  @default(false)
  lastError      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([subscriptionId])
  @@index([eventType])
  @@index([createdAt])
  @@map("webhook_delivery_logs")
}

// Matchmaking job scaffolding for future buyer/property matching
model MatchmakingJob {
  id           String   @id @default(uuid())
  filterJSON   Json
  status       String   @default("queued")
  createdAt    DateTime @default(now())
  completedAt  DateTime?
  matchedCount Int      @default(0)

  @@index([status])
  @@map("matchmaking_jobs")
}

// CRM activity log entries for downstream CRM systems and webhooks
model CrmActivity {
  id         String   @id @default(uuid())
  type       String   // e.g., 'enrichment.completed' | 'matchmaking.completed' | 'manual.note' | 'call.summary'
  propertyId String?
  leadId     String?
  userId     String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([type])
  @@index([propertyId])
  @@index([userId])
  @@index([createdAt])
  @@map("crm_activities")
}

// Call transcription records (Twilio/Whisper/AssemblyAI ingestion)
model CallTranscript {
  id         String   @id @default(uuid())
  callSid    String   @unique
  leadId     String?
  userId     String?
  audioUrl   String?
  transcript String?
  recordingUrl String?
  transcriptUrl String?
  dtmfCaptured String?
  createdAt  DateTime @default(now())

  @@map("call_transcripts")
}

// LLM analysis outputs for a given transcript
model CallAnalysis {
  id           String   @id @default(uuid())
  callSid      String   @unique
  transcriptId String   @unique
  summary      String
  score        Float
  tags         String[] @default([])
  createdAt    DateTime @default(now())

  @@map("call_analyses")
}

enum ScraperSource {
  zillow
  auction
}

enum JobStatus {
  queued
  running
  completed
  failed
}

enum PropertyCondition {
  Excellent
  Fair
  NeedsWork
}
