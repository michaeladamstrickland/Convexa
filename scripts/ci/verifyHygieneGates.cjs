#!/usr/bin/env node

/**
 * Hygiene Gates CI Verification  
 * Checks all audit outputs and enforces quality gates
 */

const fs = require('fs');
const path = require('path');

const repoRoot = path.resolve(__dirname, '..', '..');

function checkFile(filePath, description) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`${description} not found: ${filePath}`);
  }
  const stats = fs.statSync(filePath);
  if (stats.size === 0) {
    throw new Error(`${description} is empty: ${filePath}`);
  }
  return true;
}

function main() {
  console.log('🔍 Verifying hygiene gates...');
  
  const gates = [
    {
      file: 'ops/findings/routes_inventory.json',
      description: 'Route inventory',
      check: (data) => data.routes && data.routes.length > 0
    },
    {
      file: 'ops/findings/dep_unused.json', 
      description: 'Dead code analysis',
      check: (data) => data.files !== undefined
    },
    {
      file: 'ops/findings/dupes.json',
      description: 'Duplicate files analysis', 
      check: (data) => data.duplicates !== undefined && Array.isArray(data.duplicates)
    },
    {
      file: 'ops/findings/env_report.json',
      description: 'Environment variables audit',
      check: (data) => data.totalVariables !== undefined
    },
    {
      file: 'ops/findings/db_audit_report.json',
      description: 'Database schema audit',
      check: (data) => data.summary !== undefined
    },
    {
      file: 'ops/findings/metrics_logging_audit.json', 
      description: 'Metrics and logging audit',
      check: (data) => data.summary && data.summary.mutationRoutes !== undefined
    }
  ];

  let passed = 0;
  let failed = 0;

  for (const gate of gates) {
    try {
      const filePath = path.join(repoRoot, gate.file);
      checkFile(filePath, gate.description);
      
      const content = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(content);
      
      if (gate.check(data)) {
        console.log(`✅ ${gate.description} - passed`);
        passed++;
      } else {
        console.error(`❌ ${gate.description} - failed validation`);
        failed++;
      }
    } catch (error) {
      console.error(`❌ ${gate.description} - ${error.message}`);
      failed++;
    }
  }

  // Additional quality checks
  try {
    // Check .env.example was updated
    const envExample = path.join(repoRoot, '.env.example');
    if (fs.existsSync(envExample)) {
      const content = fs.readFileSync(envExample, 'utf8');
      if (content.includes('Generated by envUsage audit')) {
        console.log('✅ .env.example - updated by audit');
        passed++;
      } else {
        console.warn('⚠️  .env.example - not updated by audit');
      }
    }

    // Check API documentation was updated
    const apiSurface = path.join(repoRoot, 'docs/API_SURFACE.md');
    if (fs.existsSync(apiSurface)) {
      const content = fs.readFileSync(apiSurface, 'utf8');
      if (content.includes('Generated from ops/findings/routes_inventory.json')) {
        console.log('✅ API documentation - updated by audit');
        passed++;
      } else {
        console.warn('⚠️  API documentation - not updated by audit');
      }
    }

  } catch (error) {
    console.warn(`⚠️  Additional checks failed: ${error.message}`);
  }

  console.log(`\n📊 Hygiene Gates Summary: ${passed} passed, ${failed} failed`);

  if (failed > 0) {
    console.error('❌ Hygiene gates failed - please fix issues before merging');
    process.exit(1);
  } else {
    console.log('✅ All hygiene gates passed!');
  }
}

if (require.main === module) {
  main();
}