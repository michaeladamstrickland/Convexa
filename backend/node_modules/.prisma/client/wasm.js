
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plan: 'plan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monthlyLeadCount: 'monthlyLeadCount',
  monthlySkipTraceCount: 'monthlySkipTraceCount',
  monthlyCampaignCount: 'monthlyCampaignCount'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  status: 'status',
  source: 'source',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyAddress: 'propertyAddress',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  propertyType: 'propertyType',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  squareFootage: 'squareFootage',
  lotSize: 'lotSize',
  yearBuilt: 'yearBuilt',
  normalizedAddress: 'normalizedAddress',
  listPrice: 'listPrice',
  arv: 'arv',
  estimatedValue: 'estimatedValue',
  estimatedRepairs: 'estimatedRepairs',
  marketValue: 'marketValue',
  loanAmount: 'loanAmount',
  equity: 'equity',
  equityPercent: 'equityPercent',
  lastSalePrice: 'lastSalePrice',
  lastSaleDate: 'lastSaleDate',
  taxAssessedValue: 'taxAssessedValue',
  ownerName: 'ownerName',
  ownerPhone: 'ownerPhone',
  ownerEmail: 'ownerEmail',
  ownerAddress: 'ownerAddress',
  isAbsenteeOwner: 'isAbsenteeOwner',
  phonesJson: 'phonesJson',
  emailsJson: 'emailsJson',
  skipTraceProvider: 'skipTraceProvider',
  skipTraceCostCents: 'skipTraceCostCents',
  skipTracedAt: 'skipTracedAt',
  dncFlag: 'dncFlag',
  motivationScore: 'motivationScore',
  motivationFactors: 'motivationFactors',
  distressSignals: 'distressSignals',
  timeOnMarket: 'timeOnMarket',
  priceReductions: 'priceReductions',
  aiScore: 'aiScore',
  aiCostCents: 'aiCostCents',
  aiScoredAt: 'aiScoredAt',
  aiSummary: 'aiSummary',
  dealPotential: 'dealPotential',
  profitEstimate: 'profitEstimate',
  temperatureTag: 'temperatureTag',
  tags: 'tags',
  isActive: 'isActive',
  organizationId: 'organizationId',
  assignedToId: 'assignedToId'
};

exports.Prisma.LeadNoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  leadId: 'leadId'
};

exports.Prisma.SkipTraceRecordScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  status: 'status',
  requestData: 'requestData',
  responseData: 'responseData',
  cost: 'cost',
  confidence: 'confidence',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  leadId: 'leadId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  subject: 'subject',
  message: 'message',
  script: 'script',
  filters: 'filters',
  targetCount: 'targetCount',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  sent: 'sent',
  delivered: 'delivered',
  opened: 'opened',
  clicked: 'clicked',
  replied: 'replied',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.CampaignLogScalarFieldEnum = {
  id: 'id',
  status: 'status',
  response: 'response',
  errorMessage: 'errorMessage',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  repliedAt: 'repliedAt',
  campaignId: 'campaignId',
  leadId: 'leadId',
  userId: 'userId'
};

exports.Prisma.CallLogScalarFieldEnum = {
  id: 'id',
  direction: 'direction',
  status: 'status',
  duration: 'duration',
  transcript: 'transcript',
  recording: 'recording',
  fromNumber: 'fromNumber',
  toNumber: 'toNumber',
  twilioCallSid: 'twilioCallSid',
  sentiment: 'sentiment',
  aiSummary: 'aiSummary',
  motivationScore: 'motivationScore',
  outcome: 'outcome',
  followUpDate: 'followUpDate',
  callStartedAt: 'callStartedAt',
  callEndedAt: 'callEndedAt',
  createdAt: 'createdAt',
  leadId: 'leadId',
  organizationId: 'organizationId',
  createdById: 'createdById'
};

exports.Prisma.ScrapingJobScalarFieldEnum = {
  id: 'id',
  source: 'source',
  status: 'status',
  config: 'config',
  recordsFound: 'recordsFound',
  recordsSaved: 'recordsSaved',
  errorCount: 'errorCount',
  logs: 'logs',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.PropertyRecordScalarFieldEnum = {
  id: 'id',
  source: 'source',
  sourceId: 'sourceId',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  rawData: 'rawData',
  processed: 'processed',
  propertyHash: 'propertyHash',
  createdAt: 'createdAt'
};

exports.Prisma.DailyMetricScalarFieldEnum = {
  id: 'id',
  date: 'date',
  leadsGenerated: 'leadsGenerated',
  leadsContacted: 'leadsContacted',
  leadsConverted: 'leadsConverted',
  campaignsSent: 'campaignsSent',
  campaignReplies: 'campaignReplies',
  callsMade: 'callsMade',
  callsAnswered: 'callsAnswered',
  avgCallDuration: 'avgCallDuration',
  skipTracesRun: 'skipTracesRun',
  skipTraceSuccess: 'skipTraceSuccess',
  totalSpent: 'totalSpent',
  revenueGenerated: 'revenueGenerated',
  createdAt: 'createdAt'
};

exports.Prisma.ScraperJobScalarFieldEnum = {
  id: 'id',
  source: 'source',
  inputPayload: 'inputPayload',
  resultPayload: 'resultPayload',
  status: 'status',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ScraperSource = exports.$Enums.ScraperSource = {
  zillow: 'zillow',
  auction: 'auction'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  queued: 'queued',
  running: 'running',
  completed: 'completed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Lead: 'Lead',
  LeadNote: 'LeadNote',
  SkipTraceRecord: 'SkipTraceRecord',
  Campaign: 'Campaign',
  CampaignLog: 'CampaignLog',
  CallLog: 'CallLog',
  ScrapingJob: 'ScrapingJob',
  PropertyRecord: 'PropertyRecord',
  DailyMetric: 'DailyMetric',
  ScraperJob: 'ScraperJob'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
