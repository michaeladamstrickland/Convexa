// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ORGANIZATIONS & USERS
// ========================================

model Organization {
  id        String   @id @default(cuid())
  name      String
  plan      String   @default("free") // free, basic, pro, enterprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  users     User[]
  leads     Lead[]
  campaigns Campaign[]
  callLogs  CallLog[]

  // Usage tracking
  monthlyLeadCount      Int @default(0)
  monthlySkipTraceCount Int @default(0)
  monthlyCampaignCount  Int @default(0)

  @@map("organizations")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  role        String    @default("user") // admin, manager, user
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Activity relationships
  assignedLeads Lead[]        @relation("AssignedTo")
  callLogs      CallLog[]     @relation("CreatedBy")
  campaignLogs  CampaignLog[]

  @@map("users")
}

// ========================================
// LEADS & PROPERTIES
// ========================================

// ========================================
// ENUMS (Updated for PostgreSQL)
// ========================================

enum ScraperSource {
  zillow
  auction
}

enum JobStatus {
  queued
  running
  completed
  failed
}

model Lead {
  id        String   @id @default(cuid())
  status    String   @default("new") // new, contacted, nurturing, offer_sent, under_contract, closed, dead
  source    String // zillow_fsbo, realtor_com, nj_property_records, craigslist, manual, attom:property-detail
  priority  String   @default("medium") // low, medium, high, hot
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Property Information
  propertyAddress String
  city            String
  state           String
  zipCode         String
  propertyType    String? // single_family, condo, townhouse, multi_family
  bedrooms        Int?
  bathrooms       Float?
  squareFootage   Int?
  lotSize         Float?
  yearBuilt       Int?

  // Normalized address for deduplication
  normalizedAddress String?

  // Valuation & Financial
  listPrice        Float?
  arv              Float? // After Repair Value
  estimatedValue   Int? // From ATTOM API
  estimatedRepairs Float?
  marketValue      Float?
  loanAmount       Float?
  equity           Int? // Equity percentage from ATTOM
  equityPercent    Float?
  lastSalePrice    Float?
  lastSaleDate     DateTime?
  taxAssessedValue Float?

  // Owner Information (from skip tracing)
  ownerName       String?
  ownerPhone      String?
  ownerEmail      String?
  ownerAddress    String? // if different from property
  isAbsenteeOwner Boolean @default(false)

  // Skip Tracing Data
  phonesJson         String? // JSON array of phone numbers
  emailsJson         String? // JSON array of email addresses
  skipTraceProvider  String? // batchdata, etc.
  skipTraceCostCents Int? // Cost in cents
  skipTracedAt       DateTime?
  dncFlag            Boolean   @default(false)

  // Motivation & Context
  motivationScore   Float? // 0-100 AI-generated motivation score
  motivationFactors String? // JSON array of detected factors
  distressSignals   String? // JSON array of distress indicators
  timeOnMarket      Int? // days
  priceReductions   Int? // number of price drops

  // AI Analysis
  aiScore        Int? // 0-100 overall AI deal score
  aiCostCents    Int? // Cost in cents for AI scoring
  aiScoredAt     DateTime?
  aiSummary      String? // AI-generated summary
  dealPotential  String? // flip, wholesale, rental, pass
  profitEstimate Float?

  // Temperature
  // Legacy temperature tag removed; keeping column as string for now to avoid breaking existing code
  temperatureTag String? @default("WARM")

  // Tags & Classification
  tags     String // inherited, pre_foreclosure, tax_lien, etc. - stored as JSON string
  isActive Boolean @default(true)

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  assignedToId String?
  assignedTo   User?   @relation("AssignedTo", fields: [assignedToId], references: [id])

  callLogs         CallLog[]
  campaignLogs     CampaignLog[]
  leadNotes        LeadNote[]
  skipTraceRecords SkipTraceRecord[]

  @@map("leads")
}

model LeadNote {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("general") // general, call, email, meeting, follow_up
  createdAt DateTime @default(now())

  // Relationships
  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("lead_notes")
}

// ========================================
// SKIP TRACING & ENRICHMENT
// ========================================

model SkipTraceRecord {
  id           String    @id @default(cuid())
  provider     String // batch_skip_tracing, whitepages_pro, manual
  status       String // pending, completed, failed
  requestData  String // JSON of original request
  responseData String? // JSON of provider response
  cost         Float? // cost of this skip trace
  confidence   Float? // confidence score from provider
  createdAt    DateTime  @default(now())
  completedAt  DateTime?

  // Relationships
  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("skip_trace_records")
}

// ========================================
// CAMPAIGNS & OUTREACH
// ========================================

model Campaign {
  id     String @id @default(cuid())
  name   String
  type   String // sms, call, email, direct_mail
  status String @default("draft") // draft, active, paused, completed

  // Campaign Content
  subject String? // for email/sms
  message String // main content
  script  String? // for calls

  // Targeting & Filters
  filters     String // JSON of lead filters
  targetCount Int    @default(0)

  // Scheduling
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  // Results Tracking
  sent      Int @default(0)
  delivered Int @default(0)
  opened    Int @default(0)
  clicked   Int @default(0)
  replied   Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  campaignLogs CampaignLog[]

  @@map("campaigns")
}

model CampaignLog {
  id           String    @id @default(cuid())
  status       String // sent, delivered, opened, clicked, replied, failed
  response     String? // actual response content
  errorMessage String?
  sentAt       DateTime  @default(now())
  deliveredAt  DateTime?
  openedAt     DateTime?
  repliedAt    DateTime?

  // Relationships
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("campaign_logs")
}

// ========================================
// CALL MANAGEMENT
// ========================================

model CallLog {
  id         String  @id @default(cuid())
  direction  String // inbound, outbound
  status     String // completed, busy, no_answer, voicemail, failed
  duration   Int? // seconds
  transcript String?
  recording  String? // URL to recording

  // Call Details
  fromNumber    String
  toNumber      String
  twilioCallSid String?

  // AI Analysis
  sentiment       String? // positive, neutral, negative
  aiSummary       String?
  motivationScore Float? // 0-100
  outcome         String? // interested, not_interested, callback, no_answer
  followUpDate    DateTime?

  callStartedAt DateTime
  callEndedAt   DateTime?
  createdAt     DateTime  @default(now())

  // Relationships
  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("call_logs")
}

// ========================================
// SCRAPING & DATA SOURCES
// ========================================

model ScrapingJob {
  id     String @id @default(cuid())
  source String // zillow_fsbo, realtor_com, nj_property_records
  status String // pending, running, completed, failed

  // Job Configuration
  config String // JSON of scraping parameters

  // Results
  recordsFound Int     @default(0)
  recordsSaved Int     @default(0)
  errorCount   Int     @default(0)
  logs         String? // execution logs

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@map("scraping_jobs")
}

model PropertyRecord {
  id       String  @id @default(cuid())
  source   String // where this record came from
  sourceId String? // external ID from source

  // Property Details
  address String
  city    String
  state   String
  zipCode String

  // Raw Data
  rawData   String // JSON of all scraped data
  processed Boolean @default(false)

  // Duplicate Detection
  propertyHash String // hash for deduplication

  createdAt DateTime @default(now())

  @@unique([source, sourceId])
  @@index([propertyHash])
  @@map("property_records")
}

// ========================================
// ANALYTICS & REPORTING
// ========================================

model DailyMetric {
  id   String   @id @default(cuid())
  date DateTime @unique

  // Lead Metrics
  leadsGenerated Int @default(0)
  leadsContacted Int @default(0)
  leadsConverted Int @default(0)

  // Campaign Metrics
  campaignsSent   Int @default(0)
  campaignReplies Int @default(0)

  // Call Metrics
  callsMade       Int    @default(0)
  callsAnswered   Int    @default(0)
  avgCallDuration Float?

  // Skip Trace Metrics
  skipTracesRun    Int @default(0)
  skipTraceSuccess Int @default(0)

  // Financial Metrics
  totalSpent       Float @default(0)
  revenueGenerated Float @default(0)

  createdAt DateTime @default(now())

  @@map("daily_metrics")
}

// ========================================
// SCRAPER JOB QUEUE PERSISTENCE (New)
// ========================================

model ScraperJob {
  id            String        @id @default(uuid())
  source        ScraperSource
  inputPayload  Json
  resultPayload Json?
  status        JobStatus
  startedAt     DateTime?
  finishedAt    DateTime?
  error         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("scraper_jobs")
}
